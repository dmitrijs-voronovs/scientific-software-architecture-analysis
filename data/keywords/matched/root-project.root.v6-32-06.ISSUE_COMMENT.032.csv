id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/6957:219,testability,depend,dependent,219,"> `clingtest` exports many more symbols from `libCling`, for testing purposes (see the code in `interpreter/CMakeLists.txt`). This means our (patched) LLVM and Clang will interfere with other LLVM installations used by dependent libraries. IIRC this can make tests fail! We will build that version of ROOT only to run clingtest, right? We still will test ROOT the regular way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6957
https://github.com/root-project/root/issues/6957:259,testability,test,tests,259,"> `clingtest` exports many more symbols from `libCling`, for testing purposes (see the code in `interpreter/CMakeLists.txt`). This means our (patched) LLVM and Clang will interfere with other LLVM installations used by dependent libraries. IIRC this can make tests fail! We will build that version of ROOT only to run clingtest, right? We still will test ROOT the regular way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6957
https://github.com/root-project/root/issues/6957:350,testability,test,test,350,"> `clingtest` exports many more symbols from `libCling`, for testing purposes (see the code in `interpreter/CMakeLists.txt`). This means our (patched) LLVM and Clang will interfere with other LLVM installations used by dependent libraries. IIRC this can make tests fail! We will build that version of ROOT only to run clingtest, right? We still will test ROOT the regular way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6957
https://github.com/root-project/root/pull/6959:67,integrability,compon,components,67,"@Axel-Naumann, it is bugfix. After your RLogger changes these both components does not compile at all",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6959
https://github.com/root-project/root/pull/6959:67,interoperability,compon,components,67,"@Axel-Naumann, it is bugfix. After your RLogger changes these both components does not compile at all",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6959
https://github.com/root-project/root/pull/6959:67,modifiability,compon,components,67,"@Axel-Naumann, it is bugfix. After your RLogger changes these both components does not compile at all",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6959
https://github.com/root-project/root/pull/6959:78,reliability,doe,does,78,"@Axel-Naumann, it is bugfix. After your RLogger changes these both components does not compile at all",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6959
https://github.com/root-project/root/pull/6960:298,modifiability,exten,extending,298,> what tests would you like to see? At the very least tests in roottest/root/io/newstl (and possibly roottest/root/io/datamodelevolution/stl). There is a pattern for each class template. For example follow the use of listHolder[.C] or vectorHolder[.C]. It might be as easy as duplicating those and extending srun.C.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:7,safety,test,tests,7,> what tests would you like to see? At the very least tests in roottest/root/io/newstl (and possibly roottest/root/io/datamodelevolution/stl). There is a pattern for each class template. For example follow the use of listHolder[.C] or vectorHolder[.C]. It might be as easy as duplicating those and extending srun.C.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:54,safety,test,tests,54,> what tests would you like to see? At the very least tests in roottest/root/io/newstl (and possibly roottest/root/io/datamodelevolution/stl). There is a pattern for each class template. For example follow the use of listHolder[.C] or vectorHolder[.C]. It might be as easy as duplicating those and extending srun.C.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:7,testability,test,tests,7,> what tests would you like to see? At the very least tests in roottest/root/io/newstl (and possibly roottest/root/io/datamodelevolution/stl). There is a pattern for each class template. For example follow the use of listHolder[.C] or vectorHolder[.C]. It might be as easy as duplicating those and extending srun.C.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:54,testability,test,tests,54,> what tests would you like to see? At the very least tests in roottest/root/io/newstl (and possibly roottest/root/io/datamodelevolution/stl). There is a pattern for each class template. For example follow the use of listHolder[.C] or vectorHolder[.C]. It might be as easy as duplicating those and extending srun.C.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:4,deployability,version,version,4,New version of this PR at https://github.com/root-project/root/pull/7232,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:4,integrability,version,version,4,New version of this PR at https://github.com/root-project/root/pull/7232,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6960:4,modifiability,version,version,4,New version of this PR at https://github.com/root-project/root/pull/7232,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6960
https://github.com/root-project/root/pull/6963:11,deployability,build,build,11,@phsft-bot build also on ROOT-centos7/noimt with flags -Dminuit2=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6963
https://github.com/root-project/root/issues/6964:46,deployability,contain,contains,46,"#6965 fixes the repro above, where the branch contains integers. The `TBranchElement` case follows a different code path:. ```cpp. #include <TFile.h>. #include <TTree.h>. #include <iostream>. int main(). {. {. TFile f(""f.root"", ""recreate"");. TTree t(""t"", ""t"");. std::vector<int> x(1,42);. t.Branch(""x"", &x);. t.Fill();. t.Write();. }. TFile f(""f.root"");. auto *t = f.Get<TTree>(""t"");. TFile f2(""f.root"");. auto *t2 = f2.Get<TTree>(""t"");. t->AddFriend(t2, ""thefriend"");. std::cout << t->GetLeaf(""asdjkl"", ""x"") << '\n'; // should print 0, prints non-zero, even with #6965 . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6964
https://github.com/root-project/root/pull/6965:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6965
https://github.com/root-project/root/pull/6968:858,deployability,version,version,858,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:965,deployability,contain,contains,965,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:486,energy efficiency,load,loading,486,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:840,energy efficiency,load,loads,840,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:43,integrability,coupl,couple,43,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:161,integrability,batch,batchcompute,161,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:640,integrability,rout,routines,640,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:762,integrability,batch,batchcompute,762,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:858,integrability,version,version,858,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:1003,integrability,batch,batch,1003,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:726,interoperability,specif,specified,726,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:943,interoperability,specif,specific,943,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:43,modifiability,coupl,couple,43,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:858,modifiability,version,version,858,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:161,performance,batch,batchcompute,161,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:486,performance,load,loading,486,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:762,performance,batch,batchcompute,762,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:840,performance,load,loads,840,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:1003,performance,batch,batch,1003,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:43,testability,coupl,couple,43,"> Hi,. > The PR looks good to me. > Just a couple of small comments:. > . > * I don't like that there is now an Initialisation.cxx file in roofitcore and one in batchcompute. Maybe it is better having different names. > * what was the reasoning for the change of name from the library from libRooFitCompute_* to libRooBatchCompute* ? The old name looks nicer to me. roofitcore/Initialisation used to be roofitcore/RooBanner.cxx and Stephan converted it so that he could add the library loading code. This code is now moved, but I still believe it's a good idea to stay Initialisation.cxx in case there's a need in the future for other init routines to be added. (static functions shouldn't exist in random files but only in a specified Initialisation.cxx file). batchcompute/Initialisation.cxx for the moment only inspects the hardware and loads the correct version of the library, so it is again initializing... . I find RooBatchCompute more specific. The library contains all the utilities for making batch computations. RooFit can work without it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:43,usability,clear,clear,43,"OK, thank you Manos for the answers. It is clear now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:132,interoperability,standard,standard,132,"None of those should have I/O capabilities, so no Linkdef required. You have to ask other people, though, how to run without. Maybe standard library package is the wrong approach, and cmake library does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:149,modifiability,pac,package,149,"None of those should have I/O capabilities, so no Linkdef required. You have to ask other people, though, how to run without. Maybe standard library package is the wrong approach, and cmake library does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:26,performance,I/O,I/O,26,"None of those should have I/O capabilities, so no Linkdef required. You have to ask other people, though, how to run without. Maybe standard library package is the wrong approach, and cmake library does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6968:198,reliability,doe,does,198,"None of those should have I/O capabilities, so no Linkdef required. You have to ask other people, though, how to run without. Maybe standard library package is the wrong approach, and cmake library does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6968
https://github.com/root-project/root/pull/6969:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:51,deployability,fail,failing,51,The intent was that we only wanted to see what was failing. We are working on a bigger patch which will come in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:87,deployability,patch,patch,87,The intent was that we only wanted to see what was failing. We are working on a bigger patch which will come in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:51,reliability,fail,failing,51,The intent was that we only wanted to see what was failing. We are working on a bigger patch which will come in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:87,safety,patch,patch,87,The intent was that we only wanted to see what was failing. We are working on a bigger patch which will come in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:87,security,patch,patch,87,The intent was that we only wanted to see what was failing. We are working on a bigger patch which will come in this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:546,availability,down,down,546,"> Thank you for the improvements! Apart from the new comments here, please address [#6969 (comment)](https://github.com/root-project/root/pull/6969#discussion_r618406433). > . > I'd still appreciate hearing your opinion on. > . > > That's quite some code - much of that would be much better off being hosted by llvm :-/ Is it worth trying to move the RPath handling upstream? > . > Isn't there existing ""load that library"" code anywhere in llvm, that either already handles RPATH or would be better off having RPATH support? Yes, that is further down the road, the idea for this is to become a high-performance, default`llvm::orc::DefinitionGenerator`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:404,energy efficiency,load,load,404,"> Thank you for the improvements! Apart from the new comments here, please address [#6969 (comment)](https://github.com/root-project/root/pull/6969#discussion_r618406433). > . > I'd still appreciate hearing your opinion on. > . > > That's quite some code - much of that would be much better off being hosted by llvm :-/ Is it worth trying to move the RPath handling upstream? > . > Isn't there existing ""load that library"" code anywhere in llvm, that either already handles RPATH or would be better off having RPATH support? Yes, that is further down the road, the idea for this is to become a high-performance, default`llvm::orc::DefinitionGenerator`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:404,performance,load,load,404,"> Thank you for the improvements! Apart from the new comments here, please address [#6969 (comment)](https://github.com/root-project/root/pull/6969#discussion_r618406433). > . > I'd still appreciate hearing your opinion on. > . > > That's quite some code - much of that would be much better off being hosted by llvm :-/ Is it worth trying to move the RPath handling upstream? > . > Isn't there existing ""load that library"" code anywhere in llvm, that either already handles RPATH or would be better off having RPATH support? Yes, that is further down the road, the idea for this is to become a high-performance, default`llvm::orc::DefinitionGenerator`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:599,performance,perform,performance,599,"> Thank you for the improvements! Apart from the new comments here, please address [#6969 (comment)](https://github.com/root-project/root/pull/6969#discussion_r618406433). > . > I'd still appreciate hearing your opinion on. > . > > That's quite some code - much of that would be much better off being hosted by llvm :-/ Is it worth trying to move the RPath handling upstream? > . > Isn't there existing ""load that library"" code anywhere in llvm, that either already handles RPATH or would be better off having RPATH support? Yes, that is further down the road, the idea for this is to become a high-performance, default`llvm::orc::DefinitionGenerator`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:516,usability,support,support,516,"> Thank you for the improvements! Apart from the new comments here, please address [#6969 (comment)](https://github.com/root-project/root/pull/6969#discussion_r618406433). > . > I'd still appreciate hearing your opinion on. > . > > That's quite some code - much of that would be much better off being hosted by llvm :-/ Is it worth trying to move the RPath handling upstream? > . > Isn't there existing ""load that library"" code anywhere in llvm, that either already handles RPATH or would be better off having RPATH support? Yes, that is further down the road, the idea for this is to become a high-performance, default`llvm::orc::DefinitionGenerator`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:599,usability,perform,performance,599,"> Thank you for the improvements! Apart from the new comments here, please address [#6969 (comment)](https://github.com/root-project/root/pull/6969#discussion_r618406433). > . > I'd still appreciate hearing your opinion on. > . > > That's quite some code - much of that would be much better off being hosted by llvm :-/ Is it worth trying to move the RPath handling upstream? > . > Isn't there existing ""load that library"" code anywhere in llvm, that either already handles RPATH or would be better off having RPATH support? Yes, that is further down the road, the idea for this is to become a high-performance, default`llvm::orc::DefinitionGenerator`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:0,availability,Failur,Failure,0,Failure in 32bit Linux roottest_python_cpp_cpp is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:0,deployability,Fail,Failure,0,Failure in 32bit Linux roottest_python_cpp_cpp is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:0,performance,Failur,Failure,0,Failure in 32bit Linux roottest_python_cpp_cpp is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:0,reliability,Fail,Failure,0,Failure in 32bit Linux roottest_python_cpp_cpp is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6969:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6969
https://github.com/root-project/root/pull/6970:88,deployability,fail,fails,88,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:113,interoperability,platform,platforms,113,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:88,reliability,fail,fails,88,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:55,safety,test,test,55,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:55,testability,test,test,55,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:70,testability,understand,understand,70,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:20,usability,help,help,20,"@bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:184,availability,error,error,184,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:90,deployability,fail,fails,90,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:235,deployability,build,build,235,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:190,integrability,messag,message,190,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:115,interoperability,platform,platforms,115,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:190,interoperability,messag,message,190,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:184,performance,error,error,184,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:90,reliability,fail,fails,90,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:57,safety,test,test,57,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:184,safety,error,error,184,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:57,testability,test,test,57,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:72,testability,understand,understand,72,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:169,testability,understand,understand,169,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:22,usability,help,help,22,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:184,usability,error,error,184,"> @bellenot could you help us with the Win regex of that test. I do not understand why it fails, the output across platforms should be the same... No idea, I don't even understand the error message... But I'll check on my own llvm 9.0 build and let you know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:32,deployability,upgrad,upgrade,32,"That's not related to the llvm9 upgrade. Here we want to print, and compare against the expected, the generated gradient function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:32,modifiability,upgrad,upgrade,32,"That's not related to the llvm9 upgrade. Here we want to print, and compare against the expected, the generated gradient function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:209,availability,ping,ping,209,"> That's not related to the llvm9 upgrade. Here we want to print, and compare against the expected, the generated gradient function. Oh, OK, sorry I overlooked the PR. I'll take a look beginning of next year (ping me if I forget)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:34,deployability,upgrad,upgrade,34,"> That's not related to the llvm9 upgrade. Here we want to print, and compare against the expected, the generated gradient function. Oh, OK, sorry I overlooked the PR. I'll take a look beginning of next year (ping me if I forget)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6970:34,modifiability,upgrad,upgrade,34,"> That's not related to the llvm9 upgrade. Here we want to print, and compare against the expected, the generated gradient function. Oh, OK, sorry I overlooked the PR. I'll take a look beginning of next year (ping me if I forget)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6970
https://github.com/root-project/root/pull/6973:4,availability,failur,failure,4,The failure is pre-existing (python config on mac),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6973
https://github.com/root-project/root/pull/6973:4,deployability,fail,failure,4,The failure is pre-existing (python config on mac),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6973
https://github.com/root-project/root/pull/6973:4,performance,failur,failure,4,The failure is pre-existing (python config on mac),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6973
https://github.com/root-project/root/pull/6973:4,reliability,fail,failure,4,The failure is pre-existing (python config on mac),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6973
https://github.com/root-project/root/issues/6974:66,availability,error,error,66,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:230,availability,error,error,230,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:45,deployability,version,version,45,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:216,deployability,fail,fails,216,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:293,deployability,modul,module,293,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:598,deployability,modul,module,598,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1080,deployability,modul,module,1080,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1207,energy efficiency,load,loadExtensions,1207,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1329,energy efficiency,load,loadExtensions,1329,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1415,energy efficiency,load,loadExtensions,1415,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:45,integrability,version,version,45,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:333,integrability,pub,public,333,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:45,modifiability,version,version,45,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:293,modifiability,modul,module,293,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:598,modifiability,modul,module,598,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1080,modifiability,modul,module,1080,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1126,modifiability,Extens,ExtensionManager,1126,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1474,modifiability,Extens,ExtensionManager,1474,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:66,performance,error,error,66,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:230,performance,error,error,230,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1207,performance,load,loadExtensions,1207,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1329,performance,load,loadExtensions,1329,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1415,performance,load,loadExtensions,1415,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:216,reliability,fail,fails,216,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:66,safety,error,error,66,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:230,safety,error,error,230,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:293,safety,modul,module,293,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:598,safety,modul,module,598,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:849,safety,except,except,849,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:856,safety,Except,Exception,856,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:1080,safety,modul,module,1080,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:66,usability,error,error,66,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:230,usability,error,error,230,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:. https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37. now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(). /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x). ----> 2 import ROOT # script works, if remove this line. 3 return x. 4 . 5 from ipyparallel import Client. 6 pool = Client(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(). 88 if hasattr(ip,""kernel""):. 89 import JupyROOT. ---> 90 import JsMVA. 91 . 92 # Register cleanup. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds). 160 except Exception:. 161 pass. --> 162 return _orig_ihook(name, *args, **kwds). 163 __builtin__.__import__ = _importhook. 164 . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(). 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). 13 . ---> 14 loadExtensions(). /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(). 8 ## This function will register JsMVAMagic class to ipython. 9 def loadExtensions():. ---> 10 ip = get_ipython(). 11 extMgr = ExtensionManager(ip). 12 extMgr.load_extension(""JsMVA.JsMVAMagic""). NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:24,availability,slo,slow,24,"@etejedor Sorry for the slow response. I've been out of network few days. Now, it seems to work. Thank you again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:56,performance,network,network,56,"@etejedor Sorry for the slow response. I've been out of network few days. Now, it seems to work. Thank you again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:24,reliability,slo,slow,24,"@etejedor Sorry for the slow response. I've been out of network few days. Now, it seems to work. Thank you again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6974:56,security,network,network,56,"@etejedor Sorry for the slow response. I've been out of network few days. Now, it seems to work. Thank you again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6974
https://github.com/root-project/root/issues/6975:1196,availability,slo,slowly,1196,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:236,energy efficiency,measur,measure,236,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1444,energy efficiency,reduc,reduced,1444,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:904,integrability,Batch,BatchMode,904,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:244,performance,memor,memory,244,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:904,performance,Batch,BatchMode,904,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:974,performance,memor,memory,974,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1086,performance,memor,memory,1086,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1161,performance,memor,memory,1161,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1413,performance,memor,memory,1413,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1592,performance,memor,memory,1592,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:56,reliability,doe,doesn,56,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1196,reliability,slo,slowly,1196,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:451,safety,test,test,451,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:206,testability,trace,trace,206,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:451,testability,test,test,451,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:244,usability,memor,memory,244,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:974,usability,memor,memory,974,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1086,usability,memor,memory,1086,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1161,usability,memor,memory,1161,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1413,usability,memor,memory,1413,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1493,usability,close,close,1493,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6975:1592,usability,memor,memory,1592,"Hi! The `RooTrace` cannot be used like that, because it doesn't track all the constructors and destructors of RooAbsCollection. If you want to use it, you have to change the code in the classes you want to trace. Alternatively, you can measure memory consumption with `ProcInfo`, similar to https://github.com/root-project/root/issues/7933:. ```C++. #include ""RooRealVar.h"". #include ""RooGaussian.h"". #include ""RooPlot.h"". #include ""RooTrace.h"". void test() {. RooTrace::active(kTRUE);. RooTrace::mark();. RooRealVar x(""x"",""x"",-10,10);. RooDataSet d(""d"",""d"",RooArgSet(x));. RooRealVar s(""s"",""s"",1,1,10);. RooRealVar m(""m"",""m"",0,-10,10);. RooGaussian g(""gauss"",""gauss(x,m,s)"",x,m,s);. RooPlot *f=x.frame();. for (Int_t j=0; j<300; ++j){. x.setVal(gRandom->Gaus(0,1));. d.add(x);. }. ProcInfo_t pinfo; . for (Int_t i=0; i<1000; i++) {. g.fitTo(d,RooFit::PrintLevel(-1));//,RooFit::SumW2Error(true),RooFit::BatchMode(true));. gSystem->GetProcInfo(&pinfo);. std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;. }. }. ```. Now, I don't see any memory increase per fit iteration. The only thing that happens is that the memory consuption climbs very very slowly when you do tens of thousands of fits because of the MemPoolForRooSets (also reported in https://github.com/root-project/root/issues/7933). But with the recent changes to the MemPoolForRooSets, this increasing memory consumption is strongly reduced and not relevant in your example. I will close this issue because it relies on a wrong report based on `RooTrace`, but it you have any more memory issues please feel free to open another thread or reopen this one! Cheers,. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6975
https://github.com/root-project/root/issues/6977:203,usability,confirm,confirm,203,"Hi @pgamamed,. It seems to me that the problem might not be on ROOT (according to frame 6 of the backtrace, i.e. `AliAnalysisTask::SetUsed`). However, I am forwarding this to @Axel-Naumann, maybe he can confirm. Cheers,. J.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6977
https://github.com/root-project/root/issues/6977:227,deployability,continu,continue,227,"This doesn't look like a way to merge the ROOT files, it seems to stem from running the function `AliAnalysisManager::InitAnalysis()`. To merge files consider using `hadd`. Given that this is unlikely a ROOT issue I propose we continue the discussion at https://root-forum.cern.ch if there's still something for us to help with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6977
https://github.com/root-project/root/issues/6977:5,reliability,doe,doesn,5,"This doesn't look like a way to merge the ROOT files, it seems to stem from running the function `AliAnalysisManager::InitAnalysis()`. To merge files consider using `hadd`. Given that this is unlikely a ROOT issue I propose we continue the discussion at https://root-forum.cern.ch if there's still something for us to help with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6977
https://github.com/root-project/root/issues/6977:318,usability,help,help,318,"This doesn't look like a way to merge the ROOT files, it seems to stem from running the function `AliAnalysisManager::InitAnalysis()`. To merge files consider using `hadd`. Given that this is unlikely a ROOT issue I propose we continue the discussion at https://root-forum.cern.ch if there's still something for us to help with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6977
https://github.com/root-project/root/pull/6978:158,interoperability,specif,specific,158,"Thanks for the PR! I see there is room for improvement, but isn't it weird to use `ColumnNames_t` for the list of files or globs (with ""column"" having a very specific meaning in RDF)? Maybe we need to switch to a generic `Names_t`/`StringVector`...alias or just remove `ColumnNames_t` altogether? Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6978
https://github.com/root-project/root/pull/6979:104,deployability,stack,stack,104,"[are we set on the (super-ambiguous, imho) ""friend"" terminology? some possible alternatives: horizontal stack, column-wise concat, field-wise concat, horizontal concat...]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/pull/6979:41,deployability,stack,stack,41,"> some possible alternatives: horizontal stack, column-wise concat, field-wise concat, horizontal concat...]. I'm not sure if it lines up with the SQL term exactly but we could use ""join"" (column-join, field-join, etc.).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/pull/6979:11,deployability,provis,provision,11,"Is there a provision/design for the case where the entries in the ""friend"" are not aligned (either because the friend is missing entries, or has more entries and/or they are in a different order)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/pull/6979:33,safety,review,review,33,"@pcanal This should be ready for review. I think the way to later allow for unaligned friends is through combining friends with another virtual page source that gives access to the underlying page source with an entry list (or another mechanism for shuffling & skimming the original entries). I like @mxxo suggestion of renaming friends to ""joins"" or joined ntuples. @eguiraud @Axel-Naumann what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/pull/6979:167,security,access,access,167,"@pcanal This should be ready for review. I think the way to later allow for unaligned friends is through combining friends with another virtual page source that gives access to the underlying page source with an entry list (or another mechanism for shuffling & skimming the original entries). I like @mxxo suggestion of renaming friends to ""joins"" or joined ntuples. @eguiraud @Axel-Naumann what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/pull/6979:33,testability,review,review,33,"@pcanal This should be ready for review. I think the way to later allow for unaligned friends is through combining friends with another virtual page source that gives access to the underlying page source with an entry list (or another mechanism for shuffling & skimming the original entries). I like @mxxo suggestion of renaming friends to ""joins"" or joined ntuples. @eguiraud @Axel-Naumann what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/pull/6979:296,deployability,build,build,296,"About the name of the feature, my two cents: I think ""join"" has the huge advantage that it is what users (both database-savvy and not) would instinctively search for in a lot of cases. ""Joined ntuples"" is a better wording if what you can do is basically a horizontal ""paste"". If you can actually build relations between two ntuples based on entry values, then it's basically an analog of the SQL ""join"" so even just ""join"" is not misleading.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/pull/6979:99,usability,user,users,99,"About the name of the feature, my two cents: I think ""join"" has the huge advantage that it is what users (both database-savvy and not) would instinctively search for in a lot of cases. ""Joined ntuples"" is a better wording if what you can do is basically a horizontal ""paste"". If you can actually build relations between two ntuples based on entry values, then it's basically an analog of the SQL ""join"" so even just ""join"" is not misleading.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6979
https://github.com/root-project/root/issues/6981:165,deployability,contain,contains,165,"Hi @Harshalzzzzzzz ,. `RDataFrame` has a `Display` method that prints the contents of the dataset on screen. Some users complained that when a column of the dataset contains a collection (e.g. an array), we only print the first and last element of the collection with `...` in between and that's less helpful than printing all of it. Ideally, for collections, we would like to have behavior similar to `TTree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:2017,deployability,log,logic,2017,"Tree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements long. The relevant logic is at RDFDisplay.cxx, in `RDisplay::Print`: https://github.com/root-project/root/blob/master/tree/dataframe/src/RDFDisplay.cxx#L194-L249. [RDataFrame docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), [RDataFrame tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html). Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:74,performance,content,contents,74,"Hi @Harshalzzzzzzz ,. `RDataFrame` has a `Display` method that prints the contents of the dataset on screen. Some users complained that when a column of the dataset contains a collection (e.g. an array), we only print the first and last element of the collection with `...` in between and that's less helpful than printing all of it. Ideally, for collections, we would like to have behavior similar to `TTree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:120,safety,compl,complained,120,"Hi @Harshalzzzzzzz ,. `RDataFrame` has a `Display` method that prints the contents of the dataset on screen. Some users complained that when a column of the dataset contains a collection (e.g. an array), we only print the first and last element of the collection with `...` in between and that's less helpful than printing all of it. Ideally, for collections, we would like to have behavior similar to `TTree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:2017,safety,log,logic,2017,"Tree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements long. The relevant logic is at RDFDisplay.cxx, in `RDisplay::Print`: https://github.com/root-project/root/blob/master/tree/dataframe/src/RDFDisplay.cxx#L194-L249. [RDataFrame docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), [RDataFrame tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html). Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:120,security,compl,complained,120,"Hi @Harshalzzzzzzz ,. `RDataFrame` has a `Display` method that prints the contents of the dataset on screen. Some users complained that when a column of the dataset contains a collection (e.g. an array), we only print the first and last element of the collection with `...` in between and that's less helpful than printing all of it. Ideally, for collections, we would like to have behavior similar to `TTree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:2017,security,log,logic,2017,"Tree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements long. The relevant logic is at RDFDisplay.cxx, in `RDisplay::Print`: https://github.com/root-project/root/blob/master/tree/dataframe/src/RDFDisplay.cxx#L194-L249. [RDataFrame docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), [RDataFrame tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html). Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:2017,testability,log,logic,2017,"Tree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements long. The relevant logic is at RDFDisplay.cxx, in `RDisplay::Print`: https://github.com/root-project/root/blob/master/tree/dataframe/src/RDFDisplay.cxx#L194-L249. [RDataFrame docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), [RDataFrame tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html). Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:114,usability,user,users,114,"Hi @Harshalzzzzzzz ,. `RDataFrame` has a `Display` method that prints the contents of the dataset on screen. Some users complained that when a column of the dataset contains a collection (e.g. an array), we only print the first and last element of the collection with `...` in between and that's less helpful than printing all of it. Ideally, for collections, we would like to have behavior similar to `TTree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:301,usability,help,helpful,301,"Hi @Harshalzzzzzzz ,. `RDataFrame` has a `Display` method that prints the contents of the dataset on screen. Some users complained that when a column of the dataset contains a collection (e.g. an array), we only print the first and last element of the collection with `...` in between and that's less helpful than printing all of it. Ideally, for collections, we would like to have behavior similar to `TTree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/issues/6981:382,usability,behavi,behavior,382,"Hi @Harshalzzzzzzz ,. `RDataFrame` has a `Display` method that prints the contents of the dataset on screen. Some users complained that when a column of the dataset contains a collection (e.g. an array), we only print the first and last element of the collection with `...` in between and that's less helpful than printing all of it. Ideally, for collections, we would like to have behavior similar to `TTree::Scan`, which for that same dataset prints the following:. ```. ~/W/R/r/t/dataframe (master *=) root -l f.root (cern-root) . root [0] . Attaching file f.root as _file0... (TFile *) 0x561d66d753a0. root [1] t->Scan(). ***********************************************************************. * Row * Instance * y.y * x * w.w * z *. ***********************************************************************. * 0 * 0 * 100 * 1 * 1.8 * 1.1 *. * 0 * 1 * 100 * 2 * 1.8 * 2.1 *. * 0 * 2 * 100 * 3 * 1.8 * 2.1 *. * 0 * 3 * 100 * 4 * 1.8 * 3.1 *. * 0 * 4 * 100 * * 1.8 * 3.1 *. * 0 * 5 * 100 * * 1.8 * 4.1 *. * 1 * 0 * 10000 * 5 * 3.24 * 4.51 *. * 1 * 1 * 10000 * 6 * 3.24 * 5.51 *. * 1 * 2 * 10000 * 7 * 3.24 * 5.51 *. * 1 * 3 * 10000 * 8 * 3.24 * 6.51 *. * 1 * 4 * 10000 * * 3.24 * 6.51 *. * 1 * 5 * 10000 * * 3.24 * 7.51 *. * 2 * 0 * 1000000 * 9 * 5.832 * 8.261 *. * 2 * 1 * 1000000 * 10 * 5.832 * 9.261 *. * 2 * 2 * 1000000 * 11 * 5.832 * 9.261 *. * 2 * 3 * 1000000 * 12 * 5.832 * 10.261 *. * 2 * 4 * 1000000 * * 5.832 * 10.261 *. * 2 * 5 * 1000000 * * 5.832 * 11.261 *. * 3 * 0 * 100000000 * 13 * 10.4976 * 12.3871 *. * 3 * 1 * 100000000 * 14 * 10.4976 * 13.3871 *. * 3 * 2 * 100000000 * 15 * 10.4976 * 13.3871 *. * 3 * 3 * 100000000 * 16 * 10.4976 * 14.3871 *. * 3 * 4 * 100000000 * * 10.4976 * 14.3871 *. * 3 * 5 * 100000000 * * 10.4976 * 15.3871 *. * 4 * 0 * 1e+10 * 17 * 18.89568 * 16.92581 *. ```. . As you can see, all elements in the collection are printed on screen, no `...`. I think a good default would be to print all elements of a collection if the collection is at most 16 elements lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6981
https://github.com/root-project/root/pull/6983:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora32/default with flags -During=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:660,availability,cluster,clusters,660,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:660,deployability,cluster,clusters,660,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:756,energy efficiency,load,loaded,756,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:913,energy efficiency,clock,clock,913,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1001,energy efficiency,clock,clock,1001,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1089,energy efficiency,CPU,CPU,1089,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1169,energy efficiency,CPU,CPU,1169,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1018,modifiability,deco,decompressing,1018,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1184,modifiability,deco,decompressing,1184,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1456,modifiability,deco,decompression,1456,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:500,performance,overhead,overhead,500,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:756,performance,load,loaded,756,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:892,performance,time,timeWallRead,892,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:919,performance,time,time,919,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:979,performance,time,timeWallUnzip,979,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1007,performance,time,time,1007,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1074,performance,time,timeCpuRead,1074,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1089,performance,CPU,CPU,1089,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1093,performance,time,time,1093,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1153,performance,time,timeCpuUnzip,1153,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1169,performance,CPU,CPU,1169,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:1173,performance,time,time,1173,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```. $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p. Runtime-Initialization: 6817us. Runtime-Analysis: 1233370us. RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134. RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669. RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759. RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135. RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576. RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134. RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848. RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848. RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405. RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890. RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000. RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000. RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190. RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608. RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133. RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643. RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790. Runtime-Main: 1614633us. ```. :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:82,performance,throughput,throughput,82,"Well that's kind of hilarious. I think the `IOSQE_ASYNC` flag is meant to improve throughput at the cost of latency so the discrepancy makes sense post hoc. . > On my machine, I don't see a difference. But the change certainly makes sense. Even if there's no improvement, hopefully enabling this shouldn't have a negative impact.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:108,performance,latenc,latency,108,"Well that's kind of hilarious. I think the `IOSQE_ASYNC` flag is meant to improve throughput at the cost of latency so the discrepancy makes sense post hoc. . > On my machine, I don't see a difference. But the change certainly makes sense. Even if there's no improvement, hopefully enabling this shouldn't have a negative impact.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:108,usability,latenc,latency,108,"Well that's kind of hilarious. I think the `IOSQE_ASYNC` flag is meant to improve throughput at the cost of latency so the discrepancy makes sense post hoc. . > On my machine, I don't see a difference. But the change certainly makes sense. Even if there's no improvement, hopefully enabling this shouldn't have a negative impact.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:86,interoperability,compatib,compatibility,86,"Especially as this should be forward looking! We are not yet in any legacy / backward compatibility move here, so let's embrace the fast future! :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora32/default with flags -During=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:46,deployability,log,log,46,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:122,deployability,updat,updated,122,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:78,performance,perform,performance,78,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:46,safety,log,log,46,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:122,safety,updat,updated,122,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:46,security,log,log,46,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:122,security,updat,updated,122,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:46,testability,log,log,46,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:78,usability,perform,performance,78,"> Approving but consider rewording the commit log to include some (anecdotal) performance result. Thank you @pcanal, just updated the wording.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:0,availability,failur,failure,0,failure on ROOT-fedora32/default are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:0,deployability,fail,failure,0,failure on ROOT-fedora32/default are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:0,performance,failur,failure,0,failure on ROOT-fedora32/default are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/pull/6983:0,reliability,fail,failure,0,failure on ROOT-fedora32/default are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6983
https://github.com/root-project/root/issues/6985:105,deployability,build,build,105,"Hi @rlalik ,. If I'm not mistaken, the reason could be that the graphic format is not supported with the build you have. I also think this is an issue of confusing message and is fixed in the master. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:164,integrability,messag,message,164,"Hi @rlalik ,. If I'm not mistaken, the reason could be that the graphic format is not supported with the build you have. I also think this is an issue of confusing message and is fixed in the master. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:72,interoperability,format,format,72,"Hi @rlalik ,. If I'm not mistaken, the reason could be that the graphic format is not supported with the build you have. I also think this is an issue of confusing message and is fixed in the master. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:164,interoperability,messag,message,164,"Hi @rlalik ,. If I'm not mistaken, the reason could be that the graphic format is not supported with the build you have. I also think this is an issue of confusing message and is fixed in the master. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:86,usability,support,supported,86,"Hi @rlalik ,. If I'm not mistaken, the reason could be that the graphic format is not supported with the build you have. I also think this is an issue of confusing message and is fixed in the master. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:417,availability,Avail,Available,417,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:427,deployability,version,versions,427,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:555,deployability,Instal,Installed,555,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:565,deployability,version,versions,565,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:274,energy efficiency,cpu,cpu,274,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:427,integrability,version,versions,427,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:565,integrability,version,versions,565,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:243,interoperability,share,shared,243,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:309,interoperability,xml,xml,309,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:6,modifiability,paramet,parameter,6,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:427,modifiability,version,versions,427,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:565,modifiability,version,versions,565,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:274,performance,cpu,cpu,274,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:417,reliability,Availab,Available,417,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:132,safety,except,exceptions,132,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:417,safety,Avail,Available,417,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:260,security,ssl,ssl,260,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:417,security,Availab,Available,417,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:368,usability,support,support,368,"Which parameter/feature of root rules that? ```. $ root-config --features. cxx17 asimage builtin_clang builtin_llvm dataframe davix exceptions fortran gdml gsl_shared gviz http imt mathmore mlp minuit2 opengl pyroot qt5web roofit webgui root7 shared soversion ssl tmva tmva-cpu tmva-pymva spectrum unuran x11 xml. ```. If this is libafterimage, then it is compiled to support gif:. ```. [I] media-libs/libafterimage. Available versions: 1.20-r2 1.20-r3 {+X examples gif jpeg nls opengl png +shaping shm static-libs svg tiff truetype CPU_FLAGS_X86=""mmx""}. Installed versions: 1.20-r3(03:15:10 AM 01/05/2021)(X gif jpeg nls png shaping svg tiff truetype -examples -shm -static-libs CPU_FLAGS_X86=""mmx""). Homepage: http://www.afterstep.org/afterimage/index.php. Description: Afterstep's standalone generic image manipulation library. ```. Can you also tell me which commit is about to fix it/do what you wrote above?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:133,deployability,build,build,133,@rlalik this might be due to the local (external) libAfterImage... Maybe @couet already saw this or has an idea. Or you could try to build from source with built-in libAfterImage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:15,availability,ping,ping,15,@rlalik @couet ping,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:168,reliability,doe,does,168,"So I can confirm, that on Ubuntu-20.04.1:. * with external afterimage - do not work. * with built-in afterimage - do works. I also checked that on Ubuntu libAfterImage does not link against libgif. And on my Gentoo it does:. ```bash. $ ldd /usr/lib64/libAfterImage.so | grep gif. 10: libgif.so.7 => /usr/lib64/libgif.so.7 (0x00007f6ee1670000). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:218,reliability,doe,does,218,"So I can confirm, that on Ubuntu-20.04.1:. * with external afterimage - do not work. * with built-in afterimage - do works. I also checked that on Ubuntu libAfterImage does not link against libgif. And on my Gentoo it does:. ```bash. $ ldd /usr/lib64/libAfterImage.so | grep gif. 10: libgif.so.7 => /usr/lib64/libgif.so.7 (0x00007f6ee1670000). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/issues/6985:9,usability,confirm,confirm,9,"So I can confirm, that on Ubuntu-20.04.1:. * with external afterimage - do not work. * with built-in afterimage - do works. I also checked that on Ubuntu libAfterImage does not link against libgif. And on my Gentoo it does:. ```bash. $ ldd /usr/lib64/libAfterImage.so | grep gif. 10: libgif.so.7 => /usr/lib64/libgif.so.7 (0x00007f6ee1670000). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6985
https://github.com/root-project/root/pull/6987:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:44,deployability,patch,patches,44,@rlalik could you please backport into 6.22-patches branch please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:44,safety,patch,patches,44,@rlalik could you please backport into 6.22-patches branch please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:44,security,patch,patches,44,@rlalik could you please backport into 6.22-patches branch please?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:46,deployability,patch,patches,46,"> @rlalik could you please backport into 6.22-patches branch please? You mean I should made PR into 6.22-patches instead of master, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:105,deployability,patch,patches,105,"> @rlalik could you please backport into 6.22-patches branch please? You mean I should made PR into 6.22-patches instead of master, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:46,safety,patch,patches,46,"> @rlalik could you please backport into 6.22-patches branch please? You mean I should made PR into 6.22-patches instead of master, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:105,safety,patch,patches,105,"> @rlalik could you please backport into 6.22-patches branch please? You mean I should made PR into 6.22-patches instead of master, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:46,security,patch,patches,46,"> @rlalik could you please backport into 6.22-patches branch please? You mean I should made PR into 6.22-patches instead of master, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:105,security,patch,patches,105,"> @rlalik could you please backport into 6.22-patches branch please? You mean I should made PR into 6.22-patches instead of master, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:58,availability,avail,available,58,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:219,availability,avail,available,219,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:90,deployability,releas,release,90,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:196,deployability,patch,patches,196,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:237,deployability,patch,patch,237,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:248,deployability,releas,release,248,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:58,reliability,availab,available,58,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:219,reliability,availab,available,219,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:58,safety,avail,available,58,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:196,safety,patch,patches,196,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:219,safety,avail,available,219,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:237,safety,patch,patch,237,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:58,security,availab,available,58,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:196,security,patch,patches,196,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:219,security,availab,available,219,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:237,security,patch,patch,237,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/pull/6987:292,testability,plan,planned,292,"@rlalik ah no, I just wanted to say that your fix will be available only in the next ROOT release 6.24, otherwise you could _as well_ open PR to https://github.com/root-project/root/tree/v6-22-00-patches so it could be available in next patch 6.22 release - 6.22.08 (I am not sure when it is planned)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6987
https://github.com/root-project/root/issues/6991:53,testability,simpl,simple,53,"As said in the forum, this can be reproduced doing a simple zoom on the X axis of a THStack plot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:53,usability,simpl,simple,53,"As said in the forum, this can be reproduced doing a simple zoom on the X axis of a THStack plot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:235,deployability,Updat,Update,235,"```. {. auto h1 = new TH1F(""h1"", ""h1"", 100, 0, 100);. for (int i=0; i<1e6; i++) h1->Fill(gRandom->Gaus(20, 5));. auto c = new TCanvas();. c->Divide(2,1);. c->cd(1); h1->Draw(); // full range shown;. h1->GetXaxis()->SetRange(1, 6);. c->Update(); // Yaxis zooms in to show content in bins 1 to 6;. auto h2 = new TH1F(""h2"", ""h2"", 100, 0, 100);. for (int i=0; i<10; i++) h2->Fill(gRandom->Gaus(9, 5));. auto hs = new THStack();. hs->Add(h1);. hs->Add(h2);. c->cd(2); hs->Draw(); // note Yaxis range;. hs->GetXaxis()->SetRange(1, 6);. }. ```. <img width=""688"" alt=""Screenshot 2021-02-23 at 11 18 36"" src=""https://user-images.githubusercontent.com/4697738/108829835-f50b4e80-75c8-11eb-8254-94f52df10beb.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:169,energy efficiency,Draw,Draw,169,"```. {. auto h1 = new TH1F(""h1"", ""h1"", 100, 0, 100);. for (int i=0; i<1e6; i++) h1->Fill(gRandom->Gaus(20, 5));. auto c = new TCanvas();. c->Divide(2,1);. c->cd(1); h1->Draw(); // full range shown;. h1->GetXaxis()->SetRange(1, 6);. c->Update(); // Yaxis zooms in to show content in bins 1 to 6;. auto h2 = new TH1F(""h2"", ""h2"", 100, 0, 100);. for (int i=0; i<10; i++) h2->Fill(gRandom->Gaus(9, 5));. auto hs = new THStack();. hs->Add(h1);. hs->Add(h2);. c->cd(2); hs->Draw(); // note Yaxis range;. hs->GetXaxis()->SetRange(1, 6);. }. ```. <img width=""688"" alt=""Screenshot 2021-02-23 at 11 18 36"" src=""https://user-images.githubusercontent.com/4697738/108829835-f50b4e80-75c8-11eb-8254-94f52df10beb.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:467,energy efficiency,Draw,Draw,467,"```. {. auto h1 = new TH1F(""h1"", ""h1"", 100, 0, 100);. for (int i=0; i<1e6; i++) h1->Fill(gRandom->Gaus(20, 5));. auto c = new TCanvas();. c->Divide(2,1);. c->cd(1); h1->Draw(); // full range shown;. h1->GetXaxis()->SetRange(1, 6);. c->Update(); // Yaxis zooms in to show content in bins 1 to 6;. auto h2 = new TH1F(""h2"", ""h2"", 100, 0, 100);. for (int i=0; i<10; i++) h2->Fill(gRandom->Gaus(9, 5));. auto hs = new THStack();. hs->Add(h1);. hs->Add(h2);. c->cd(2); hs->Draw(); // note Yaxis range;. hs->GetXaxis()->SetRange(1, 6);. }. ```. <img width=""688"" alt=""Screenshot 2021-02-23 at 11 18 36"" src=""https://user-images.githubusercontent.com/4697738/108829835-f50b4e80-75c8-11eb-8254-94f52df10beb.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:271,performance,content,content,271,"```. {. auto h1 = new TH1F(""h1"", ""h1"", 100, 0, 100);. for (int i=0; i<1e6; i++) h1->Fill(gRandom->Gaus(20, 5));. auto c = new TCanvas();. c->Divide(2,1);. c->cd(1); h1->Draw(); // full range shown;. h1->GetXaxis()->SetRange(1, 6);. c->Update(); // Yaxis zooms in to show content in bins 1 to 6;. auto h2 = new TH1F(""h2"", ""h2"", 100, 0, 100);. for (int i=0; i<10; i++) h2->Fill(gRandom->Gaus(9, 5));. auto hs = new THStack();. hs->Add(h1);. hs->Add(h2);. c->cd(2); hs->Draw(); // note Yaxis range;. hs->GetXaxis()->SetRange(1, 6);. }. ```. <img width=""688"" alt=""Screenshot 2021-02-23 at 11 18 36"" src=""https://user-images.githubusercontent.com/4697738/108829835-f50b4e80-75c8-11eb-8254-94f52df10beb.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:235,safety,Updat,Update,235,"```. {. auto h1 = new TH1F(""h1"", ""h1"", 100, 0, 100);. for (int i=0; i<1e6; i++) h1->Fill(gRandom->Gaus(20, 5));. auto c = new TCanvas();. c->Divide(2,1);. c->cd(1); h1->Draw(); // full range shown;. h1->GetXaxis()->SetRange(1, 6);. c->Update(); // Yaxis zooms in to show content in bins 1 to 6;. auto h2 = new TH1F(""h2"", ""h2"", 100, 0, 100);. for (int i=0; i<10; i++) h2->Fill(gRandom->Gaus(9, 5));. auto hs = new THStack();. hs->Add(h1);. hs->Add(h2);. c->cd(2); hs->Draw(); // note Yaxis range;. hs->GetXaxis()->SetRange(1, 6);. }. ```. <img width=""688"" alt=""Screenshot 2021-02-23 at 11 18 36"" src=""https://user-images.githubusercontent.com/4697738/108829835-f50b4e80-75c8-11eb-8254-94f52df10beb.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:235,security,Updat,Update,235,"```. {. auto h1 = new TH1F(""h1"", ""h1"", 100, 0, 100);. for (int i=0; i<1e6; i++) h1->Fill(gRandom->Gaus(20, 5));. auto c = new TCanvas();. c->Divide(2,1);. c->cd(1); h1->Draw(); // full range shown;. h1->GetXaxis()->SetRange(1, 6);. c->Update(); // Yaxis zooms in to show content in bins 1 to 6;. auto h2 = new TH1F(""h2"", ""h2"", 100, 0, 100);. for (int i=0; i<10; i++) h2->Fill(gRandom->Gaus(9, 5));. auto hs = new THStack();. hs->Add(h1);. hs->Add(h2);. c->cd(2); hs->Draw(); // note Yaxis range;. hs->GetXaxis()->SetRange(1, 6);. }. ```. <img width=""688"" alt=""Screenshot 2021-02-23 at 11 18 36"" src=""https://user-images.githubusercontent.com/4697738/108829835-f50b4e80-75c8-11eb-8254-94f52df10beb.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/issues/6991:608,usability,user,user-images,608,"```. {. auto h1 = new TH1F(""h1"", ""h1"", 100, 0, 100);. for (int i=0; i<1e6; i++) h1->Fill(gRandom->Gaus(20, 5));. auto c = new TCanvas();. c->Divide(2,1);. c->cd(1); h1->Draw(); // full range shown;. h1->GetXaxis()->SetRange(1, 6);. c->Update(); // Yaxis zooms in to show content in bins 1 to 6;. auto h2 = new TH1F(""h2"", ""h2"", 100, 0, 100);. for (int i=0; i<10; i++) h2->Fill(gRandom->Gaus(9, 5));. auto hs = new THStack();. hs->Add(h1);. hs->Add(h2);. c->cd(2); hs->Draw(); // note Yaxis range;. hs->GetXaxis()->SetRange(1, 6);. }. ```. <img width=""688"" alt=""Screenshot 2021-02-23 at 11 18 36"" src=""https://user-images.githubusercontent.com/4697738/108829835-f50b4e80-75c8-11eb-8254-94f52df10beb.png"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6991
https://github.com/root-project/root/pull/6994:39,deployability,patch,patch,39,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:60,deployability,updat,update,60,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:135,deployability,version,version,135,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:127,energy efficiency,current,current,127,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:135,integrability,version,version,135,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:135,modifiability,version,version,135,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:39,safety,patch,patch,39,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:60,safety,updat,update,60,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:39,security,patch,patch,39,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6994:60,security,updat,update,60,"Thanks @stwunsch ! No, we don't need a patch because a full update from upstream would still fix the issue, it's just that the current version of the code we have in ROOT wouldn't work with the upstream changes as they are (there have been other changes that affect those lines of code too).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6994
https://github.com/root-project/root/pull/6995:15,availability,failur,failures,15,"These are real failures, I cannot reproduce the crash but valgrind sees the access-after-delete, work in progress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/pull/6995:15,deployability,fail,failures,15,"These are real failures, I cannot reproduce the crash but valgrind sees the access-after-delete, work in progress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/pull/6995:15,performance,failur,failures,15,"These are real failures, I cannot reproduce the crash but valgrind sees the access-after-delete, work in progress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/pull/6995:15,reliability,fail,failures,15,"These are real failures, I cannot reproduce the crash but valgrind sees the access-after-delete, work in progress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/pull/6995:76,security,access,access-after-delete,76,"These are real failures, I cannot reproduce the crash but valgrind sees the access-after-delete, work in progress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/pull/6995:105,usability,progress,progress,105,"These are real failures, I cannot reproduce the crash but valgrind sees the access-after-delete, work in progress",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/pull/6995:26,safety,review,review,26,@pcanal this is ready for review,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/pull/6995:26,testability,review,review,26,@pcanal this is ready for review,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6995
https://github.com/root-project/root/issues/6997:349,energy efficiency,Draw,Draw,349,"Thanks. Here is the code re-formatted (easier to copy/paste in a macro). ```. {. auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);. auto h2 = new TH1D(""h2"", ""h2"", 50, -5, 5);. h1->FillRandom(""gaus"");. h2->FillRandom(""gaus"");. auto hstack = new THStack(""hstack"", """");. hstack->Add(h1);. hstack->Add(h2);. h1->SetFillStyle(0);. h2->SetFillStyle(0);. hstack->Draw(""c"");. gPad->SetGrid();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:28,interoperability,format,formatted,28,"Thanks. Here is the code re-formatted (easier to copy/paste in a macro). ```. {. auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);. auto h2 = new TH1D(""h2"", ""h2"", 50, -5, 5);. h1->FillRandom(""gaus"");. h2->FillRandom(""gaus"");. auto hstack = new THStack(""hstack"", """");. hstack->Add(h1);. hstack->Add(h2);. h1->SetFillStyle(0);. h2->SetFillStyle(0);. hstack->Draw(""c"");. gPad->SetGrid();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:277,energy efficiency,Draw,Draw,277,"Actually this behaviour is documented [here](https://root.cern/doc/master/classTHStack.html#a6294f58bebce2f1ce5d6dced8e22bc1e). One should use the option ""noclear"" . May be the painting option should be made more visible at the top of the THStack class. Just do:. ```. hstack->Draw(""c noclear"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:14,usability,behavi,behaviour,14,"Actually this behaviour is documented [here](https://root.cern/doc/master/classTHStack.html#a6294f58bebce2f1ce5d6dced8e22bc1e). One should use the option ""noclear"" . May be the painting option should be made more visible at the top of the THStack class. Just do:. ```. hstack->Draw(""c noclear"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:27,usability,document,documented,27,"Actually this behaviour is documented [here](https://root.cern/doc/master/classTHStack.html#a6294f58bebce2f1ce5d6dced8e22bc1e). One should use the option ""noclear"" . May be the painting option should be made more visible at the top of the THStack class. Just do:. ```. hstack->Draw(""c noclear"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:8,usability,document,documentation,8,THStack documentation has been clarified.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:210,deployability,stack,stack,210,"Thank you Olivier. I did not expect that THStack had drawing options in addition to those for TH1. I do not understand why the ""noclear"" option is needed. . > If the patterns used to draw the histograms in the stack are transparents, then the plot behind will be visible. Always enabling ""noclear"" will not change the behaviors of all use cases, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:53,energy efficiency,draw,drawing,53,"Thank you Olivier. I did not expect that THStack had drawing options in addition to those for TH1. I do not understand why the ""noclear"" option is needed. . > If the patterns used to draw the histograms in the stack are transparents, then the plot behind will be visible. Always enabling ""noclear"" will not change the behaviors of all use cases, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:183,energy efficiency,draw,draw,183,"Thank you Olivier. I did not expect that THStack had drawing options in addition to those for TH1. I do not understand why the ""noclear"" option is needed. . > If the patterns used to draw the histograms in the stack are transparents, then the plot behind will be visible. Always enabling ""noclear"" will not change the behaviors of all use cases, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:108,testability,understand,understand,108,"Thank you Olivier. I did not expect that THStack had drawing options in addition to those for TH1. I do not understand why the ""noclear"" option is needed. . > If the patterns used to draw the histograms in the stack are transparents, then the plot behind will be visible. Always enabling ""noclear"" will not change the behaviors of all use cases, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/issues/6997:318,usability,behavi,behaviors,318,"Thank you Olivier. I did not expect that THStack had drawing options in addition to those for TH1. I do not understand why the ""noclear"" option is needed. . > If the patterns used to draw the histograms in the stack are transparents, then the plot behind will be visible. Always enabling ""noclear"" will not change the behaviors of all use cases, I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6997
https://github.com/root-project/root/pull/6999:32,deployability,patch,patch,32,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:221,deployability,stack,stack,221,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:849,deployability,build,build-debug,849,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:999,deployability,Stack,StackTrace,999,"assilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1667,deployability,Modul,ModuleFile,1667,"tem (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1702,deployability,Modul,ModuleFile,1702,"sdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1769,deployability,build,build-debug,1769," (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1881,deployability,Modul,ModuleFile,1881,"35 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1974,deployability,Modul,ModuleFile,1974,"24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2041,deployability,build,build-debug,2041,"/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2165,deployability,Modul,ModuleKind,2165,"0, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2222,deployability,Modul,ModuleFile,2222,"/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) ()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2378,deployability,build,build-debug,2378,"xSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2490,deployability,Modul,ModuleFile,2490,"ystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2583,deployability,Modul,ModuleFile,2583,"duleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2650,deployability,build,build-debug,2650,"alization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2774,deployability,Modul,ModuleKind,2774,"g/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2831,deployability,Modul,ModuleFile,2831,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2987,deployability,build,build-debug,2987,"unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3099,deployability,Modul,ModuleFile,3099,"STReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3192,deployability,Modul,ModuleFile,3192,"n, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3259,deployability,build,build-debug,3259,"STReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::Arr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3383,deployability,Modul,ModuleKind,3383,"g/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libClin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3440,deployability,Modul,ModuleFile,3440,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3596,deployability,build,build-debug,3596,"unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3716,deployability,Modul,ModuleKind,3716,"::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3860,deployability,build,build-debug,3860,"clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, na",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4056,deployability,Modul,Module,4056,":ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4124,deployability,build,build-debug,4124,"mpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4365,deployability,build,build-debug,4365,"ialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9e",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4458,deployability,Modul,Module,4458,"allVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4507,deployability,build,build-debug,4507,"ng, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /hom",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4574,deployability,Modul,ModuleName,4574,"eta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6469,deployability,stack,stack,6469,"07f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6767,deployability,Modul,ModuleFile,6767,"c/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6802,deployability,Modul,ModuleFile,6802,"f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6869,deployability,build,build-debug,6869,"a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6981,deployability,Modul,ModuleFile,6981,"oneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7074,deployability,Modul,ModuleFile,7074,"0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7141,deployability,build,build-debug,7141,"===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7265,deployability,Modul,ModuleKind,7265,"get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7322,deployability,Modul,ModuleFile,7322,"/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) ()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7478,deployability,build,build-debug,7478,"om above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7590,deployability,Modul,ModuleFile,7590,"==========================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7683,deployability,Modul,ModuleFile,7683,"duleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7750,deployability,build,build-debug,7750,"alization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7874,deployability,Modul,ModuleKind,7874,"g/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7931,deployability,Modul,ModuleFile,7931,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8087,deployability,build,build-debug,8087,"unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8199,deployability,Modul,ModuleFile,8199,"STReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8292,deployability,Modul,ModuleFile,8292,"n, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8359,deployability,build,build-debug,8359,"STReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::Arr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8483,deployability,Modul,ModuleKind,8483,"g/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libClin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8540,deployability,Modul,ModuleFile,8540,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8696,deployability,build,build-debug,8696,"unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8816,deployability,Modul,ModuleKind,8816,"::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8960,deployability,build,build-debug,8960,"clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, na",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9156,deployability,Modul,Module,9156,":ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9224,deployability,build,build-debug,9224,"mpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9465,deployability,build,build-debug,9465,"ialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9e",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9558,deployability,Modul,Module,9558,"allVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9607,deployability,build,build-debug,9607,"ng, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /hom",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9674,deployability,Modul,ModuleName,9674,"eta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:541,energy efficiency,optim,optimized,541,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:683,energy efficiency,optim,optimized,683,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:925,energy efficiency,core,core,925,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1061,energy efficiency,core,core,1061,"ash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1233,energy efficiency,core,core,1233," all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1366,energy efficiency,core,core,1366,"oc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1475,energy efficiency,core,core,1475,"linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::se",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3940,energy efficiency,load,loadModule,3940,"ed int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4440,energy efficiency,load,loadModule,4440,"eFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4562,energy efficiency,Load,LoadModule,4562,"om /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4637,energy efficiency,core,core,4637,"cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4765,energy efficiency,core,core,4765,"vm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/ba",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4987,energy efficiency,core,core,4987,"std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/mone",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:5150,energy efficiency,core,core,5150," #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. =====",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:5284,energy efficiency,alloc,alloc,5284,":IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by askin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:5321,energy efficiency,core,core,5321,"ion> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:5434,energy efficiency,core,core,5434,"er::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:5535,energy efficiency,core,core,5535,"20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything els",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:5760,energy efficiency,core,core,5760,"ot/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serializat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6005,energy efficiency,core,core,6005,"Cling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9040,energy efficiency,load,loadModule,9040,"ed int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9540,energy efficiency,load,loadModule,9540,"eFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9662,energy efficiency,Load,LoadModule,9662,"om /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9737,energy efficiency,core,core,9737,"cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9865,energy efficiency,core,core,9865,"vm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/ba",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:10087,energy efficiency,core,core,10087,"std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/mone",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:10250,energy efficiency,core,core,10250," #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. =====",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:10384,energy efficiency,alloc,alloc,10384,"clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ==========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:10421,energy efficiency,core,core,10421,"clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ==========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:10534,energy efficiency,core,core,10534,"clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ==========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:10635,energy efficiency,core,core,10635,"clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ==========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:10860,energy efficiency,core,core,10860,"clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ==========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:11105,energy efficiency,core,core,11105,"clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ==========================================================. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6400,integrability,sub,submit,6400,") at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1667,modifiability,Modul,ModuleFile,1667,"tem (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1702,modifiability,Modul,ModuleFile,1702,"sdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1881,modifiability,Modul,ModuleFile,1881,"35 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1974,modifiability,Modul,ModuleFile,1974,"24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2165,modifiability,Modul,ModuleKind,2165,"0, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2222,modifiability,Modul,ModuleFile,2222,"/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) ()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2490,modifiability,Modul,ModuleFile,2490,"ystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2583,modifiability,Modul,ModuleFile,2583,"duleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2774,modifiability,Modul,ModuleKind,2774,"g/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2831,modifiability,Modul,ModuleFile,2831,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3099,modifiability,Modul,ModuleFile,3099,"STReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3192,modifiability,Modul,ModuleFile,3192,"n, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3383,modifiability,Modul,ModuleKind,3383,"g/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libClin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3440,modifiability,Modul,ModuleFile,3440,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3716,modifiability,Modul,ModuleKind,3716,"::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4056,modifiability,Modul,Module,4056,":ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4458,modifiability,Modul,Module,4458,"allVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4574,modifiability,Modul,ModuleName,4574,"eta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6767,modifiability,Modul,ModuleFile,6767,"c/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6802,modifiability,Modul,ModuleFile,6802,"f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6981,modifiability,Modul,ModuleFile,6981,"oneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7074,modifiability,Modul,ModuleFile,7074,"0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7265,modifiability,Modul,ModuleKind,7265,"get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7322,modifiability,Modul,ModuleFile,7322,"/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) ()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7590,modifiability,Modul,ModuleFile,7590,"==========================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7683,modifiability,Modul,ModuleFile,7683,"duleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7874,modifiability,Modul,ModuleKind,7874,"g/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7931,modifiability,Modul,ModuleFile,7931,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8199,modifiability,Modul,ModuleFile,8199,"STReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8292,modifiability,Modul,ModuleFile,8292,"n, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8483,modifiability,Modul,ModuleKind,8483,"g/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libClin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8540,modifiability,Modul,ModuleFile,8540,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8816,modifiability,Modul,ModuleKind,8816,"::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9156,modifiability,Modul,Module,9156,":ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9558,modifiability,Modul,Module,9558,"allVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9674,modifiability,Modul,ModuleName,9674,"eta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:541,performance,optimiz,optimized,541,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:683,performance,optimiz,optimized,683,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3940,performance,load,loadModule,3940,"ed int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4440,performance,load,loadModule,4440,"eFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4562,performance,Load,LoadModule,4562,"om /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9040,performance,load,loadModule,9040,"ed int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9540,performance,load,loadModule,9540,"eFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9662,performance,Load,LoadModule,9662,"om /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:32,safety,patch,patch,32,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1667,safety,Modul,ModuleFile,1667,"tem (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1702,safety,Modul,ModuleFile,1702,"sdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1881,safety,Modul,ModuleFile,1881,"35 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1974,safety,Modul,ModuleFile,1974,"24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2165,safety,Modul,ModuleKind,2165,"0, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2222,safety,Modul,ModuleFile,2222,"/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) ()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2490,safety,Modul,ModuleFile,2490,"ystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2583,safety,Modul,ModuleFile,2583,"duleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2774,safety,Modul,ModuleKind,2774,"g/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:2831,safety,Modul,ModuleFile,2831,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3099,safety,Modul,ModuleFile,3099,"STReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3192,safety,Modul,ModuleFile,3192,"n, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3383,safety,Modul,ModuleKind,3383,"g/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libClin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3440,safety,Modul,ModuleFile,3440,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:3716,safety,Modul,ModuleKind,3716,"::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4056,safety,Modul,Module,4056,":ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4458,safety,Modul,Module,4458,"allVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4574,safety,Modul,ModuleName,4574,"eta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6767,safety,Modul,ModuleFile,6767,"c/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6802,safety,Modul,ModuleFile,6802,"f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6981,safety,Modul,ModuleFile,6981,"oneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7074,safety,Modul,ModuleFile,7074,"0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7265,safety,Modul,ModuleKind,7265,"get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7322,safety,Modul,ModuleFile,7322,"/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) ()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7590,safety,Modul,ModuleFile,7590,"==========================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::Im",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7683,safety,Modul,ModuleFile,7683,"duleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7874,safety,Modul,ModuleKind,7874,"g/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:7931,safety,Modul,ModuleFile,7931,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8199,safety,Modul,ModuleFile,8199,"STReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8292,safety,Modul,ModuleFile,8292,"n, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8483,safety,Modul,ModuleKind,8483,"g/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libClin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8540,safety,Modul,ModuleFile,8540,"ader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #13 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:8816,safety,Modul,ModuleKind,8816,"::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9156,safety,Modul,Module,9156,":ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9558,safety,Modul,Module,9558,"allVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9674,safety,Modul,ModuleName,9674,"eta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:32,security,patch,patch,32,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:1515,security,sign,signal,1515,"n __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVect",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4006,security,Ident,IdentifierInfo,4006,"o. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:4288,security,Ident,IdentifierInfo,4288,"0007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9106,security,Ident,IdentifierInfo,9106,"o. #14 0x00007f55cc6f98c4 in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #15 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:9388,security,Ident,IdentifierInfo,9388,"0007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #16 0x00007f55cc73983b in clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #17 0x00007f55cc489440 in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #18 0x00007f55cc91b69c in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #19 0x00007f55cbf9f82d in cling::Interpreter::loadModule(clang::Module*, bool) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #20 0x00007f55cbdc07b8 in LoadModule (ModuleName=""Genetic"", interp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1053. #21 0x00007f55cbdc1d4b in RegisterCxxModules (clingInterp=...) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1294. #22 0x00007f55cbdc4238 in TCling::TCling (this=0x560a89be2100, name=0x7f55ce7c1596 ""C++"", title=0x7f55ce7c1580 ""cling C++ Interpreter"", argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:1574. #23 0x00007f55cbdbde3a in CreateInterpreter (interpLibHandle=0x560a89bcc8f0, argv=0x7ffff97ab630) at /home/moneta/rootgit/root/core/metacling/src/TCling.cxx:600. #24 0x00007f55d09c09f8 in TROOT::InitInterpreter (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:227,testability,trace,trace,227,"@vgvassilev : I have tried this patch but I am now getting a crash when starting ROOT :. ```. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f55d03b3dba in __GI___wait4 (pid=532952, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27. #1 0x00007f55d03b3d7b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffff97a6338, options=options. entry=0) at waitpid.c:38. #2 0x00007f55d03230e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172. #3 0x00007f55d0b7b962 in TUnixSystem::Exec (this=0x560a89b6d800, shellcmd=0x560a8a395ad0 ""/home/moneta/rootgit/root-build-debug/etc/gdb-backtrace.sh 532935 1>&2"") at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2120. #4 0x00007f55d0b7c24d in TUnixSystem::StackTrace (this=0x560a89b6d800) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:2411. #5 0x00007f55d0b7ffc5 in TUnixSystem::DispatchSignals (this=0x560a89b6d800, sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3649. #6 0x00007f55d0b7744e in SigHandler (sig=kSigSegmentationViolation) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:407. #7 0x00007f55d0b7fece in sighandler (sig=11) at /home/moneta/rootgit/root/core/unix/src/TUnixSystem.cxx:3620. #8 <signal handler called>. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6475,testability,trace,trace,6475,"09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6230,usability,hint,hint,6230,"r (this=0x7f55d0e17d60 <ROOT::Internal::GetROOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6274,usability,help,help,6274,"OOT1()::alloc>) at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:2076. #25 0x00007f55d09b9ec6 in ROOT::Internal::GetROOT2 () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:384. #26 0x00007f55d09ba21c in ROOT::GetROOT () at /home/moneta/rootgit/root/core/base/src/TROOT.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:6551,usability,help,help,6551,"T.cxx:466. #27 0x00007f55d09cc0bb in TApplication::TApplication (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, numOptions=0) at /home/moneta/rootgit/root/core/base/src/TApplication.cxx:153. #28 0x00007f55d0e69828 in TRint::TRint (this=0x560a89bc5a00, appClassName=0x560a88ce007a ""Rint"", argc=0x7ffff97ad8cc, argv=0x7ffff97ad9e8, options=0x0, numOptions=0, noLogo=false) at /home/moneta/rootgit/root/core/rint/src/TRint.cxx:147. #29 0x0000560a88cdf21b in main (argc=9, argv=0x7ffff97ad9e8) at /home/moneta/rootgit/root/main/src/rmain.cxx:27. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern.ch/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern.ch/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #9 0x00007f55cc6e3ef2 in clang::ASTReader::ReadModuleMapFileBlock(llvm::SmallVector<unsigned long, 64u>&, clang::serialization::ModuleFile&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #10 0x00007f55cc6f9cfa in clang::ASTReader::ReadControlBlock(clang::serialization::ModuleFile&, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, clang::serialization::ModuleFile const*, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #11 0x00007f55cc6fab74 in clang::ASTReader::ReadASTCore(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, clang::serialization::ModuleFile*, llvm::SmallVectorImpl<clang::ASTReader::ImportedModule>&, long, long, clang::ASTFileSignature, unsigned int) () from /home/moneta/rootgit/root-build-debug/lib/libCling.so. #12 0x00007f55cc6f98c4 in clang::ASTReader::Re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:38,availability,consist,consistency,38,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:15,deployability,patch,patch,15,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:123,deployability,patch,patch,123,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:15,safety,patch,patch,15,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:123,safety,patch,patch,123,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:15,security,patch,patch,15,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:123,security,patch,patch,123,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:38,usability,consist,consistency,38,"@lmoneta, this patch is more fixing a consistency bug rather fixing the issue described in ROOT-10980. With or without his patch you need `export ROOT_INCLUDE_PATH=""/opt/cuda/include""` to resolve ROOT-10980.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:29,usability,prefer,preferred,29,I discussed with Lorenzo; my preferred resolution is to remove the CUDA includes from ROOT's headers. Lorenzo will see whether that's possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:53,integrability,sub,subsequent,53,"How was my comment resolved? O, I guess that's for a subsequent PR? I hope yous will remember that this PR here should then get reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:85,safety,reme,remember,85,"How was my comment resolved? O, I guess that's for a subsequent PR? I hope yous will remember that this PR here should then get reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:21,availability,consist,consistently,21,"Yes, we will have to consistently undo a set of other changes, namely in the tmva cmake files and rootcling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:21,usability,consist,consistently,21,"Yes, we will have to consistently undo a set of other changes, namely in the tmva cmake files and rootcling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:34,usability,undo,undo,34,"Yes, we will have to consistently undo a set of other changes, namely in the tmva cmake files and rootcling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:39,deployability,modul,module,39,"On a second thought, removing the cuda module of root will leave the cmssw cuda setup untested and that can be sufficiently bad...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:39,modifiability,modul,module,39,"On a second thought, removing the cuda module of root will leave the cmssw cuda setup untested and that can be sufficiently bad...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:39,safety,modul,module,39,"On a second thought, removing the cuda module of root will leave the cmssw cuda setup untested and that can be sufficiently bad...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:79,availability,error,error,79,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:130,deployability,Modul,Module,130,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:96,integrability,messag,message,96,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:96,interoperability,messag,message,96,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:130,modifiability,Modul,Module,130,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:79,performance,error,error,79,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:50,safety,test,tested,50,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:79,safety,error,error,79,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:130,safety,Modul,Module,130,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:50,testability,test,tested,50,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/6999:79,usability,error,error,79,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:. ```. Module cuda not found. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6999
https://github.com/root-project/root/pull/7002:76,testability,simpl,simplification,76,"Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:36,usability,statu,status,36,"Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:76,usability,simpl,simplification,76,"Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:253,deployability,continu,continue,253,"> Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me. Since there was no answer I rebased the PR on master and solved the conflicts. Maybe seeing now the CI results will help us to make a decision on how to continue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:168,interoperability,conflict,conflicts,168,"> Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me. Since there was no answer I rebased the PR on master and solved the conflicts. Maybe seeing now the CI results will help us to make a decision on how to continue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:78,testability,simpl,simplification,78,"> Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me. Since there was no answer I rebased the PR on master and solved the conflicts. Maybe seeing now the CI results will help us to make a decision on how to continue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:38,usability,statu,status,38,"> Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me. Since there was no answer I rebased the PR on master and solved the conflicts. Maybe seeing now the CI results will help us to make a decision on how to continue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:78,usability,simpl,simplification,78,"> Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me. Since there was no answer I rebased the PR on master and solved the conflicts. Maybe seeing now the CI results will help us to make a decision on how to continue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/pull/7002:216,usability,help,help,216,"> Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me. Since there was no answer I rebased the PR on master and solved the conflicts. Maybe seeing now the CI results will help us to make a decision on how to continue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7002
https://github.com/root-project/root/issues/7008:98,deployability,version,version,98,"Thanks! I think I'd like to keep the full path - which can catch cases of ""oh that's not the ROOT version I intended"". And indeed I should switch to not using `Info` etc, but whatever gets called by `Info`, to provide our own formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:98,integrability,version,version,98,"Thanks! I think I'd like to keep the full path - which can catch cases of ""oh that's not the ROOT version I intended"". And indeed I should switch to not using `Info` etc, but whatever gets called by `Info`, to provide our own formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:226,interoperability,format,formatting,226,"Thanks! I think I'd like to keep the full path - which can catch cases of ""oh that's not the ROOT version I intended"". And indeed I should switch to not using `Info` etc, but whatever gets called by `Info`, to provide our own formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:98,modifiability,version,version,98,"Thanks! I think I'd like to keep the full path - which can catch cases of ""oh that's not the ROOT version I intended"". And indeed I should switch to not using `Info` etc, but whatever gets called by `Info`, to provide our own formatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:152,deployability,log,log,152,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:186,deployability,log,log,186,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:286,deployability,log,log,286,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:152,safety,log,log,152,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:186,safety,log,log,186,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:286,safety,log,log,286,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:152,security,log,log,152,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:186,security,log,log,186,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:286,security,log,log,286,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:152,testability,log,log,152,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:186,testability,log,log,186,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:286,testability,log,log,286,"Yes you can catch the odd ""wrong ROOT"" case, but at what price? :sweat_smile: You get that same (typically super long) path to ROOTSYS printed at every log line, and it makes the actual log much less readable. Maybe filename/line number could be moved out of the way, to the end of the log line?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:83,availability,error,error,83,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:653,integrability,event,event,653,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:721,integrability,messag,message,721,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:747,integrability,messag,message,747,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:918,integrability,event,event,918,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1318,integrability,event,event,1318,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:40,interoperability,format,format,40,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:721,interoperability,messag,message,721,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:747,interoperability,messag,message,747,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:55,modifiability,exten,extent,55,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:83,performance,error,error,83,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:83,safety,error,error,83,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:238,safety,input,input,238,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:382,testability,context,context,382,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:83,usability,error,error,83,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:195,usability,user,user,195,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:231,usability,user,user,231,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:238,usability,input,input,238,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:703,usability,prefer,prefer,703,"Ideally I'd like to follow the GCC diag format to some extent:. ```. <source>:1:1: error: DIAG. ```. and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. [tree/dataframe/src/RLoopManager.cxx:658]. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info. [tree/dataframe/src/RLoopManager.cxx:660]. ```. It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before? 2) file attached to last line:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0. Some value: 17. Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]. ```. That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:290,availability,Error,Error,290,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:383,availability,Error,Error,383,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:612,availability,redund,redundant,612,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:612,deployability,redundan,redundant,612,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:650,deployability,contain,contained,650,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:77,integrability,messag,message,77,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:163,integrability,messag,message,163,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:202,integrability,messag,message,202,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:221,integrability,messag,message,221,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:525,integrability,event,event,525,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:673,integrability,messag,message,673,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:731,integrability,rout,routine,731,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:758,integrability,messag,message,758,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:778,integrability,messag,messages,778,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:909,integrability,messag,message,909,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1022,integrability,messag,message,1022,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1140,integrability,event,event,1140,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1214,integrability,event,event,1214,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:77,interoperability,messag,message,77,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:163,interoperability,messag,message,163,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:202,interoperability,messag,message,202,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:221,interoperability,messag,message,221,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:673,interoperability,messag,message,673,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:758,interoperability,messag,message,758,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:778,interoperability,messag,messages,778,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:909,interoperability,messag,message,909,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1022,interoperability,messag,message,1022,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:290,performance,Error,Error,290,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:383,performance,Error,Error,383,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1001,performance,content,content,1001,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:612,reliability,redundan,redundant,612,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:290,safety,Error,Error,290,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:383,safety,Error,Error,383,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:612,safety,redund,redundant,612,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:249,usability,user,user,249,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:290,usability,Error,Error,290,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:383,usability,Error,Error,383,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1046,usability,user,user,1046,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:. ```. Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0. ```. I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:. ```. Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0. ```. or even ""just"". ```. Info in ROOT.RDF: Starting event loop number 0. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:403,availability,Error,Error,403,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:24,integrability,messag,message,24,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:50,integrability,messag,message,50,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:288,integrability,messag,messages,288,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:24,interoperability,messag,message,24,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:50,interoperability,messag,message,50,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:288,interoperability,messag,messages,288,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:403,performance,Error,Error,403,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:429,performance,time,time,429,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:403,safety,Error,Error,403,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:6,usability,prefer,prefer,6,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:232,usability,user,users,232,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:403,usability,Error,Error,403,"> I'd prefer to put the message last, because the message might be multi-line. That's a good argument. Thinking about [what I'm using RLogger for in RDF](https://github.com/root-project/root/pull/6828) I tend to agree with @pcanal, users won't care about what source code line the `Info` messages come from (and if they really do, they are one grep away) but devs would hate to have to grep for a given Error/Fatal/Warning every time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:63,availability,redund,redundant,63,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1204,availability,error,error,1204,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1263,availability,error,error,1263,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:63,deployability,redundan,redundant,63,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:101,deployability,contain,contained,101,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:608,deployability,Build,BuildOld,608,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:837,deployability,Build,BuildOld,837,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1380,deployability,version,version,1380,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:124,integrability,messag,message,124,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:182,integrability,rout,routine,182,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:209,integrability,messag,message,209,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:270,integrability,messag,messages,270,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1210,integrability,messag,messages,1210,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1380,integrability,version,version,1380,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1419,integrability,interfac,interface,1419,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1479,integrability,interfac,interface,1479,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:124,interoperability,messag,message,124,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:209,interoperability,messag,message,209,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:270,interoperability,messag,messages,270,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1210,interoperability,messag,messages,1210,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1419,interoperability,interfac,interface,1419,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1479,interoperability,interfac,interface,1479,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1380,modifiability,version,version,1380,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1419,modifiability,interfac,interface,1419,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1479,modifiability,interfac,interface,1479,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1204,performance,error,error,1204,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1263,performance,error,error,1263,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:63,reliability,redundan,redundant,63,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1542,reliability,doe,does,1542,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:63,safety,redund,redundant,63,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1204,safety,error,error,1204,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1247,safety,except,exceptional,1247,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1263,safety,error,error,1263,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1436,safety,compl,completely,1436,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1436,security,compl,completely,1436,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1204,usability,error,error,1204,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:1263,usability,error,error,1263,"> I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). *The* file - which file should I open? > Ambiguous messages (same text for different lines) are rare. Define ""rare"". ```. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. io/io/src/TFileMerger.cxx: Info(""MergeRecursive"", ""could not read object for key {%s, %s}; skipping file %s"",. ```. ```. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. io/io/src/TStreamerInfo.cxx: Info(""BuildOld"", ""element: %s %s::%s has new type: %s/%d"", element->GetTypeName(), GetName(. ), element->GetName(), dm ? dm->GetFullTypeName() : TDataType::GetTypeName((EDataType)newType), newType);. ```. to name just those I immediately found in io/io :-). I'd argue we should keep the file name:. - for debug output, be verbose because someone wanted debug output. - for error messages, be verbose because it's an exceptional, an error case, and more information is strictly better. So indeed, maybe for `Info` we could go with your ""super-short"" version. But I dislike having the same interface behave completely differently. So what should the interface be? Maybe a new CPP macro, `R__LOG_TERSE_INFO`, that does not show the file and line and function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:98,integrability,messag,message,98,"The one in TStreamerInfo.cxx are:. ```if (gDebug>0) Info(...)```. so odd beast and/or now a Debug message. The one in TFileMerger are likely actually Warnings rather than Info but either way, the line number is not that informative ... (the debugging that would need to happen is about the ROOT file not the source file). Either way. > ```R__LOG_TERSE_INFO```, that does not show the file and line and function? I suppose so .. and/or have a terse option/parameter (so that it can be used for all level)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:98,interoperability,messag,message,98,"The one in TStreamerInfo.cxx are:. ```if (gDebug>0) Info(...)```. so odd beast and/or now a Debug message. The one in TFileMerger are likely actually Warnings rather than Info but either way, the line number is not that informative ... (the debugging that would need to happen is about the ROOT file not the source file). Either way. > ```R__LOG_TERSE_INFO```, that does not show the file and line and function? I suppose so .. and/or have a terse option/parameter (so that it can be used for all level)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:455,modifiability,paramet,parameter,455,"The one in TStreamerInfo.cxx are:. ```if (gDebug>0) Info(...)```. so odd beast and/or now a Debug message. The one in TFileMerger are likely actually Warnings rather than Info but either way, the line number is not that informative ... (the debugging that would need to happen is about the ROOT file not the source file). Either way. > ```R__LOG_TERSE_INFO```, that does not show the file and line and function? I suppose so .. and/or have a terse option/parameter (so that it can be used for all level)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:366,reliability,doe,does,366,"The one in TStreamerInfo.cxx are:. ```if (gDebug>0) Info(...)```. so odd beast and/or now a Debug message. The one in TFileMerger are likely actually Warnings rather than Info but either way, the line number is not that informative ... (the debugging that would need to happen is about the ROOT file not the source file). Either way. > ```R__LOG_TERSE_INFO```, that does not show the file and line and function? I suppose so .. and/or have a terse option/parameter (so that it can be used for all level)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:223,energy efficiency,current,currently,223,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:131,integrability,messag,message,131,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:363,integrability,messag,message,363,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:131,interoperability,messag,message,131,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:363,interoperability,messag,message,363,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:528,performance,content,content,528,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:515,testability,context,context,515,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7008:487,usability,help,help,487,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```. [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]. The actual message. which can be multi-line. ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7008
https://github.com/root-project/root/issues/7010:67,usability,command,command,67,Humm. I cannot reproduce it on Linux then. Can you give the actual command you use to create the FIFO?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:0,reliability,Doe,Doesn,0,"Doesn't matter, just like `new std::string` vs `new std::string()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:2,reliability,Doe,Doesn,2,"> Doesn't matter, just like `new std::string` vs `new std::string()`. Ah ok, got it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:49,deployability,log,log,49,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:29,safety,TEST,TEST,29,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:49,safety,log,log,49,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:63,safety,TEST,TEST,63,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:49,security,log,log,49,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:29,testability,TEST,TEST,29,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:49,testability,log,log,49,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7010:63,testability,TEST,TEST,63,"Reproducer:. ```. cd. mkfifo TEST. tail +1f /var/log/syslog >> TEST. ```. and let it sit. Then, in a different terminal:. ```. cd. root. root [0] TH1F h;. ```. and it hangs. PR coming up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7010
https://github.com/root-project/root/issues/7012:85,testability,simpl,simpler,85,"Are you talking about JSROOT or ROOT itself? And if it is ROOT, would that be really simpler than a single self-extracting executable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7012
https://github.com/root-project/root/issues/7012:85,usability,simpl,simpler,85,"Are you talking about JSROOT or ROOT itself? And if it is ROOT, would that be really simpler than a single self-extracting executable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7012
https://github.com/root-project/root/pull/7015:91,interoperability,specif,specific,91,"Many thanks for your contribution! The ROOT tutorials are typically meant to demonstrate a specific capability of the ROOT software, while this tutorial rather aims at showing a particular formula. So I'm not sure if the ROOT tutorials are the right fit for this macro. @Axel-Naumann any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7015
https://github.com/root-project/root/pull/7015:89,performance,Time,Time,89,@jblomer it is demonstrating a graph of a function that is undefined at a certain point. Time dilation is just a real-world example. Bit I get your point.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7015
https://github.com/root-project/root/pull/7015:158,performance,time,time,158,"Indeed, this is not relevant for a ROOT tutorial. > I put a lot of effort into this, so please consider it :). That's unfortunate - please check with us next time whether something is a good investment. In general, [open bugs labeled with ""good first issue""](https://github.com/root-project/root/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) are great starting points for contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7015
https://github.com/root-project/root/issues/7016:26,deployability,version,version,26,"Indeed, not listing class version 13 in the rule means it would not be applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:26,integrability,version,version,26,"Indeed, not listing class version 13 in the rule means it would not be applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:26,modifiability,version,version,26,"Indeed, not listing class version 13 in the rule means it would not be applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:39,interoperability,convers,conversion,39,"The leak is related to the handling of conversion from unversioned class from MathCore (namely from ```ROOT::Math::Cartesian3D<double>``` to ```ROOT::Math::Cartesian3D<Double32_t>``` and ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>``` to ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>```. In some circumstances (involving which StreamerInfo was recorded in an acceleration structure/cache), TClass was not remembering that it already created the Conversion StreamerInfo from one to the other and recreating from each object read.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:572,interoperability,Convers,Conversion,572,"The leak is related to the handling of conversion from unversioned class from MathCore (namely from ```ROOT::Math::Cartesian3D<double>``` to ```ROOT::Math::Cartesian3D<Double32_t>``` and ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>``` to ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>```. In some circumstances (involving which StreamerInfo was recorded in an acceleration structure/cache), TClass was not remembering that it already created the Conversion StreamerInfo from one to the other and recreating from each object read.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:509,performance,cach,cache,509,"The leak is related to the handling of conversion from unversioned class from MathCore (namely from ```ROOT::Math::Cartesian3D<double>``` to ```ROOT::Math::Cartesian3D<Double32_t>``` and ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>``` to ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>```. In some circumstances (involving which StreamerInfo was recorded in an acceleration structure/cache), TClass was not remembering that it already created the Conversion StreamerInfo from one to the other and recreating from each object read.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:532,safety,reme,remembering,532,"The leak is related to the handling of conversion from unversioned class from MathCore (namely from ```ROOT::Math::Cartesian3D<double>``` to ```ROOT::Math::Cartesian3D<Double32_t>``` and ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>``` to ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>```. In some circumstances (involving which StreamerInfo was recorded in an acceleration structure/cache), TClass was not remembering that it already created the Conversion StreamerInfo from one to the other and recreating from each object read.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:87,performance,I/O,I/O,87,"At the very least, it sounds like the LArSoft dictionary should be fixed to enable the I/O rule to be applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:18,energy efficiency,current,current,18,"Indeed. Given the current understanding, fixing the rule (even-though it is necessary for LArSoft to read the data properly) should not prevent the memory leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:148,performance,memor,memory,148,"Indeed. Given the current understanding, fixing the rule (even-though it is necessary for LArSoft to read the data properly) should not prevent the memory leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:136,safety,prevent,prevent,136,"Indeed. Given the current understanding, fixing the rule (even-though it is necessary for LArSoft to read the data properly) should not prevent the memory leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:136,security,preven,prevent,136,"Indeed. Given the current understanding, fixing the rule (even-though it is necessary for LArSoft to read the data properly) should not prevent the memory leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:26,testability,understand,understanding,26,"Indeed. Given the current understanding, fixing the rule (even-though it is necessary for LArSoft to read the data properly) should not prevent the memory leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:148,usability,memor,memory,148,"Indeed. Given the current understanding, fixing the rule (even-though it is necessary for LArSoft to read the data properly) should not prevent the memory leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:76,deployability,version,version,76,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:245,deployability,version,version,245,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:296,deployability,version,version,296,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:348,deployability,version,version,348,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:400,deployability,version,version,400,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:474,deployability,version,version,474,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:545,deployability,version,version,545,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:587,deployability,version,version,587,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:654,deployability,version,version,654,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:672,deployability,version,version,672,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:76,integrability,version,version,76,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:245,integrability,version,version,245,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:296,integrability,version,version,296,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:348,integrability,version,version,348,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:400,integrability,version,version,400,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:474,integrability,version,version,474,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:545,integrability,version,version,545,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:587,integrability,version,version,587,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:654,integrability,version,version,654,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:672,integrability,version,version,672,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:126,interoperability,specif,specified,126,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:143,interoperability,XML,XML,143,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:166,interoperability,XML,XML,166,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:192,interoperability,xml,xml,192,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:570,interoperability,specif,specified,570,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:76,modifiability,version,version,76,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:245,modifiability,version,version,245,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:296,modifiability,version,version,296,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:348,modifiability,version,version,348,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:400,modifiability,version,version,400,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:474,modifiability,version,version,474,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:545,modifiability,version,version,545,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:587,modifiability,version,version,587,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:654,modifiability,version,version,654,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:672,modifiability,version,version,672,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:71,performance,disk,disk,71,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:271,security,checksum,checksum,271,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:322,security,checksum,checksum,322,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:374,security,checksum,checksum,374,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:426,security,checksum,checksum,426,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:23,testability,understand,understanding,23,"@pcanal, it appears my understanding of the file was incorrect. The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. ```.xml. <class name=""recob::Track"" ClassVersion=""17"">. <version ClassVersion=""17"" checksum=""738708267""/>. <version ClassVersion=""16"" checksum=""1293628079""/>. <version ClassVersion=""15"" checksum=""2420564911""/>. <version ClassVersion=""14"" checksum=""2345363916""/>. </class>. ... <ioread. version=""[-14]"" ...>. ... </ioread>. ```. Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. ```.diff. <ioread. - version=""[-14]. + version=""[14]"". ... ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:140,integrability,discover,discovered,140,I will need to investigate further why the rule was (apparently) not run in the example we had since it is unrelated to the memory growth I discovered.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:140,interoperability,discover,discovered,140,I will need to investigate further why the rule was (apparently) not run in the example we had since it is unrelated to the memory growth I discovered.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:124,performance,memor,memory,124,I will need to investigate further why the rule was (apparently) not run in the example we had since it is unrelated to the memory growth I discovered.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:131,reliability,growth,growth,131,I will need to investigate further why the rule was (apparently) not run in the example we had since it is unrelated to the memory growth I discovered.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:124,usability,memor,memory,124,I will need to investigate further why the rule was (apparently) not run in the example we had since it is unrelated to the memory growth I discovered.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:140,usability,discov,discovered,140,I will need to investigate further why the rule was (apparently) not run in the example we had since it is unrelated to the memory growth I discovered.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:31,deployability,version,version,31,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:73,deployability,version,version,73,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:186,deployability,version,version,186,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:31,integrability,version,version,31,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:73,integrability,version,version,73,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:186,integrability,version,version,186,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:56,interoperability,specif,specified,56,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:236,interoperability,specif,specified,236,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:253,interoperability,XML,XML,253,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:276,interoperability,XML,XML,276,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:31,modifiability,version,version,31,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:73,modifiability,version,version,73,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:186,modifiability,version,version,186,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:181,performance,disk,disk,181,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:151,reliability,pra,practical,151,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/issues/7016:362,usability,behavi,behavior,362,"> Am I correct that because no version older than 14 is specified in the version list, the IO rule can be changed to:. yes, but it also should have no practical effect :). > The on-disk version of the class in the file was 15, which is specified in the XML file. However, the XML file looks like:. Indeed, that is what I see also. So it is the expected/intended behavior that the rule is not called :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7016
https://github.com/root-project/root/pull/7017:61,deployability,patch,patch,61,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:32,safety,review,review,32,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:61,safety,patch,patch,61,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:61,security,patch,patch,61,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:32,testability,review,review,32,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:96,usability,clear,clearer,96,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:97,deployability,patch,patch,97,@vgvassilev sorry for this ! I was so fast in merging it. Thank you for providing the additional patch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:97,safety,patch,patch,97,@vgvassilev sorry for this ! I was so fast in merging it. Thank you for providing the additional patch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7017:97,security,patch,patch,97,@vgvassilev sorry for this ! I was so fast in merging it. Thank you for providing the additional patch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7017
https://github.com/root-project/root/pull/7018:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,availability,error,errors,4,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:49,availability,error,error,49,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:56,deployability,fail,failed,56,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:76,deployability,configurat,configuration,76,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:96,deployability,build,build,96,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:130,deployability,build,build,130,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:76,integrability,configur,configuration,76,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:76,modifiability,configur,configuration,76,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,performance,error,errors,4,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:49,performance,error,error,49,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:153,performance,lock,lock,153,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:165,performance,perform,performance-,165,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:230,performance,time,timeout,230,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:56,reliability,fail,failed,56,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,safety,error,errors,4,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:49,safety,error,error,49,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:230,safety,timeout,timeout,230,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:76,security,configur,configuration,76,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:153,security,lock,lock,153,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,usability,error,errors,4,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:49,usability,error,error,49,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:165,usability,perform,performance-,165,The errors are unrelated. ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:. df105_WBosonAnalysis_py: timeout. roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,availability,error,errors,4,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,performance,error,errors,4,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:19,performance,perform,performance-,19,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,safety,error,errors,4,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:4,usability,error,errors,4,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7018:19,usability,perform,performance-,19,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7018
https://github.com/root-project/root/pull/7020:11,deployability,build,build,11,@phsft-bot build just on mac11.0/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,deployability,build,build,11,@phsft-bot build just on mac11arm/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,deployability,build,build,11,@phsft-bot build just on mac11arm/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:200,deployability,version,version,200,"Phew. @oshadura we have `mac11.0` and `mac11arm`. I *might* rename `mac11.0` to `mac11intel` at some point... After all, ""11"" from ""mac11"" corresponds to the ""14"" from ""mac10.14"" these days: the next version will be macOS 12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:200,integrability,version,version,200,"Phew. @oshadura we have `mac11.0` and `mac11arm`. I *might* rename `mac11.0` to `mac11intel` at some point... After all, ""11"" from ""mac11"" corresponds to the ""14"" from ""mac10.14"" these days: the next version will be macOS 12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:200,modifiability,version,version,200,"Phew. @oshadura we have `mac11.0` and `mac11arm`. I *might* rename `mac11.0` to `mac11intel` at some point... After all, ""11"" from ""mac11"" corresponds to the ""14"" from ""mac10.14"" these days: the next version will be macOS 12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,deployability,build,build,11,@phsft-bot build just on mac11arm/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,deployability,build,build,11,@phsft-bot build just on mac11arm/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,deployability,build,build,11,@phsft-bot build just on mac11arm/cxx17 with flags -DVc=Off -Dbuiltin_vc=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,availability,error,errors,11,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:43,availability,error,errors,43,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:113,deployability,build,build,113,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,performance,error,errors,11,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:43,performance,error,errors,43,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,safety,error,errors,11,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:43,safety,error,errors,43,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:11,usability,error,errors,11,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/pull/7020:43,usability,error,errors,43,"All non-M1 errors are pre-existing. All M1-errors are independent of the PR (I notified @lmoneta ). tbb seems to build, at least, so it's a step into the right direction: merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7020
https://github.com/root-project/root/issues/7021:36,deployability,instal,installation-of-root-with-macos-,36,https://root-forum.cern.ch/t/binary-installation-of-root-with-macos-11-1/43359/9,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7021
https://github.com/root-project/root/pull/7023:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7023
https://github.com/root-project/root/pull/7024:262,deployability,fail,fail,262,"> How do I do that? Sorry, I'm new to git. Normally you need to get latest ROOT master and do on your branch:. ```. git fetch upstream. git rebase upstream/master. git push --force. ```. `upstream` is typical name for remote for main ROOT repository. But it may fail while you add merge commit. In this case just do cherry-pick of all **your** commits like:. ```. git fetch upstream. git reset --hard upstream/master. git cherry-pick 28b6306. git cherry-pick 4d1369a . ... git push --force. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7024
https://github.com/root-project/root/pull/7024:239,integrability,repositor,repository,239,"> How do I do that? Sorry, I'm new to git. Normally you need to get latest ROOT master and do on your branch:. ```. git fetch upstream. git rebase upstream/master. git push --force. ```. `upstream` is typical name for remote for main ROOT repository. But it may fail while you add merge commit. In this case just do cherry-pick of all **your** commits like:. ```. git fetch upstream. git reset --hard upstream/master. git cherry-pick 28b6306. git cherry-pick 4d1369a . ... git push --force. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7024
https://github.com/root-project/root/pull/7024:239,interoperability,repositor,repository,239,"> How do I do that? Sorry, I'm new to git. Normally you need to get latest ROOT master and do on your branch:. ```. git fetch upstream. git rebase upstream/master. git push --force. ```. `upstream` is typical name for remote for main ROOT repository. But it may fail while you add merge commit. In this case just do cherry-pick of all **your** commits like:. ```. git fetch upstream. git reset --hard upstream/master. git cherry-pick 28b6306. git cherry-pick 4d1369a . ... git push --force. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7024
https://github.com/root-project/root/pull/7024:262,reliability,fail,fail,262,"> How do I do that? Sorry, I'm new to git. Normally you need to get latest ROOT master and do on your branch:. ```. git fetch upstream. git rebase upstream/master. git push --force. ```. `upstream` is typical name for remote for main ROOT repository. But it may fail while you add merge commit. In this case just do cherry-pick of all **your** commits like:. ```. git fetch upstream. git reset --hard upstream/master. git cherry-pick 28b6306. git cherry-pick 4d1369a . ... git push --force. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7024
https://github.com/root-project/root/pull/7024:22,usability,help,help,22,Thank you for all the help and patience guys. I'm learning a lot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7024
https://github.com/root-project/root/pull/7024:50,usability,learn,learning,50,Thank you for all the help and patience guys. I'm learning a lot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7024
https://github.com/root-project/root/pull/7026:57,performance,time,time,57,@Axel-Naumann can you take a look whenever you will have time? thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7026
https://github.com/root-project/root/issues/7029:184,performance,time,time,184,"Hi @alexander-held, thanks for opening this issue! Code improvements like your suggested improvement are not really a priority for us, I mean you can imagine it would take way to much time to give this treatment to all of `hist` or `math` for example :laughing:. Anyway, I opened a PR to close this issue, but please the next time you see something like this and you want to improve just do it in a PR and I'll merge it no questions asked :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7029
https://github.com/root-project/root/issues/7029:326,performance,time,time,326,"Hi @alexander-held, thanks for opening this issue! Code improvements like your suggested improvement are not really a priority for us, I mean you can imagine it would take way to much time to give this treatment to all of `hist` or `math` for example :laughing:. Anyway, I opened a PR to close this issue, but please the next time you see something like this and you want to improve just do it in a PR and I'll merge it no questions asked :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7029
https://github.com/root-project/root/issues/7029:288,usability,close,close,288,"Hi @alexander-held, thanks for opening this issue! Code improvements like your suggested improvement are not really a priority for us, I mean you can imagine it would take way to much time to give this treatment to all of `hist` or `math` for example :laughing:. Anyway, I opened a PR to close this issue, but please the next time you see something like this and you want to improve just do it in a PR and I'll merge it no questions asked :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7029
https://github.com/root-project/root/issues/7029:108,performance,time,time,108,"Thanks @guitargeek! I wasn't sure how such PRs might get handled when opened, this is good to know for next time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7029
https://github.com/root-project/root/issues/7029:52,modifiability,refact,refactoring,52,"""Not applicable"" because this is not a bugfix, just refactoring",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7029
https://github.com/root-project/root/issues/7029:52,performance,refactor,refactoring,52,"""Not applicable"" because this is not a bugfix, just refactoring",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7029
https://github.com/root-project/root/pull/7031:50,availability,consist,consistency,50,We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? cc: @bellenot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:86,deployability,patch,patch,86,We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? cc: @bellenot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:86,safety,patch,patch,86,We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? cc: @bellenot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:86,security,patch,patch,86,We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? cc: @bellenot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:22,usability,support,support,22,We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? cc: @bellenot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:50,usability,consist,consistency,50,We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? cc: @bellenot,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:52,availability,consist,consistency,52,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:88,deployability,patch,patch,88,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:128,deployability,patch,patch,128,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:292,deployability,patch,patches,292,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:338,deployability,patch,patch,338,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:120,energy efficiency,current,current,120,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:190,energy efficiency,core,core,190,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:146,reliability,doe,does,146,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:175,reliability,doe,doesn,175,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:88,safety,patch,patch,88,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:128,safety,patch,patch,128,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:274,safety,test,test,274,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:292,safety,patch,patches,292,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:338,safety,patch,patch,338,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:88,security,patch,patch,88,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:128,security,patch,patch,128,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:219,security,access,access,219,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:292,security,patch,patches,292,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:338,security,patch,patch,338,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:274,testability,test,test,274,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:24,usability,support,support,24,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:52,usability,consist,consistency,52,"> We would also need to support this on Windows for consistency. Can you make sure that patch works on Windows too? The current patch most likely does not work on Windows (it doesn't touch `core/winnt/*`). I don't have access to any Windows development machines, so I can't test any possible patches. I could draft up a _suggestion_ on a patch. Maybe we should first get to the point, what needs to be done for this to get accepted for the unix world? So that the windows implementation can take care of all that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:14,modifiability,variab,variable,14,Only the PATH variable is needed on Windows,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:16,modifiability,variab,variable,16,"> Only the PATH variable is needed on Windows. Okay, that sounds to me like Windows isn't affected by this PR. Is there anything I can do, so we get forward with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:229,deployability,updat,update,229,"@bellenot, I am confused. This PR introduces another way to express the LD_LIBRARY_PATH. IIUC, the PATH variable is the analog of LD_LIBRARY_PATH for Windows. What happens if somebody defines a variable ROOT_LIBRARY_PATH and not update the PATH? On unix it'd work just fine but fail on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:278,deployability,fail,fail,278,"@bellenot, I am confused. This PR introduces another way to express the LD_LIBRARY_PATH. IIUC, the PATH variable is the analog of LD_LIBRARY_PATH for Windows. What happens if somebody defines a variable ROOT_LIBRARY_PATH and not update the PATH? On unix it'd work just fine but fail on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:104,modifiability,variab,variable,104,"@bellenot, I am confused. This PR introduces another way to express the LD_LIBRARY_PATH. IIUC, the PATH variable is the analog of LD_LIBRARY_PATH for Windows. What happens if somebody defines a variable ROOT_LIBRARY_PATH and not update the PATH? On unix it'd work just fine but fail on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:194,modifiability,variab,variable,194,"@bellenot, I am confused. This PR introduces another way to express the LD_LIBRARY_PATH. IIUC, the PATH variable is the analog of LD_LIBRARY_PATH for Windows. What happens if somebody defines a variable ROOT_LIBRARY_PATH and not update the PATH? On unix it'd work just fine but fail on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:278,reliability,fail,fail,278,"@bellenot, I am confused. This PR introduces another way to express the LD_LIBRARY_PATH. IIUC, the PATH variable is the analog of LD_LIBRARY_PATH for Windows. What happens if somebody defines a variable ROOT_LIBRARY_PATH and not update the PATH? On unix it'd work just fine but fail on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:229,safety,updat,update,229,"@bellenot, I am confused. This PR introduces another way to express the LD_LIBRARY_PATH. IIUC, the PATH variable is the analog of LD_LIBRARY_PATH for Windows. What happens if somebody defines a variable ROOT_LIBRARY_PATH and not update the PATH? On unix it'd work just fine but fail on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:229,security,updat,update,229,"@bellenot, I am confused. This PR introduces another way to express the LD_LIBRARY_PATH. IIUC, the PATH variable is the analog of LD_LIBRARY_PATH for Windows. What happens if somebody defines a variable ROOT_LIBRARY_PATH and not update the PATH? On unix it'd work just fine but fail on Windows?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:56,usability,support,support,56,"So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:152,usability,help,help,152,"So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:72,deployability,depend,dependant,72,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:72,integrability,depend,dependant,72,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:588,interoperability,platform,platform,588,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:72,modifiability,depend,dependant,72,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:314,modifiability,variab,variable,314,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:357,reliability,doe,does,357,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:72,safety,depend,dependant,72,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:163,security,modif,modify,163,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:72,testability,depend,dependant,72,"I thought the rationale is spelled out in the original post? > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc). > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. >. > We would like to have a dedicated environment variable, that is. > - OS independant. > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:397,deployability,patch,patch,397,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:397,safety,patch,patch,397,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:441,safety,test,test,441,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:552,safety,test,test,552,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:397,security,patch,patch,397,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:441,testability,test,test,441,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:552,testability,test,test,552,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:86,usability,support,support,86,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:182,usability,help,help,182,"Thanks for revisiting this! > So I think the argument that Windows uses `%PATH` is in support of having `ROOT_LIBRARY_PATH` also for Windows. @ChristianTackeGSI would you be able to help us with that, to get this merged for 6.24? 1. So the choosing of the name `ROOT_LIBRARY_PATH` is okayed by everyone? Just to make sure, I got it. 2. So my priority (re-)ordering is also fine? 3. I can create a patch ""suggestion"" for Windows. But I can't test it in any way. If that is, what you'd like me to do, I can do that, yes. Disclaimer: I can't even compile test, so it might end up not being compile-able for Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:91,safety,test,testing,91,"OK, thanks for the explanation. And don't worry, I can take care of the implementation and testing on Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:91,testability,test,testing,91,"OK, thanks for the explanation. And don't worry, I can take care of the implementation and testing on Windows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:20,interoperability,specif,specific,20,"BTW, do we have any specific test for this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:29,safety,test,test,29,"BTW, do we have any specific test for this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:29,testability,test,test,29,"BTW, do we have any specific test for this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1052,deployability,Contain,Contains,1052,"So here is the diff for `TWinNTSystem.cxx`, if you want to include it in the same PR:. ```. diff --git a/core/winnt/src/TWinNTSystem.cxx b/core/winnt/src/TWinNTSystem.cxx. index 71cc3be3a3..7889fc9008 100644. --- a/core/winnt/src/TWinNTSystem.cxx. +++ b/core/winnt/src/TWinNTSystem.cxx. @@ -358,24 +358,26 @@ namespace {. dynpath = """";. }. if (newpath) {. -. dynpath = newpath;. -. } else if (dynpath == """") {. + dynpath = gSystem->Getenv(""ROOT_LIBRARY_PATH"");. TString rdynpath = gEnv ? gEnv->GetValue(""Root.DynamicPath"", (char*)0) : """";. rdynpath.ReplaceAll(""; "", "";""); // in case DynamicPath was extended. if (rdynpath == """") {. rdynpath = "".;""; rdynpath += TROOT::GetBinDir();. }. TString path = gSystem->Getenv(""PATH"");. - if (path == """"). - dynpath = rdynpath;. - else {. - dynpath = path; dynpath += "";""; dynpath += rdynpath;. + if (!path.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += path;. + }. + if (!rdynpath.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += rdynpath;. }. -. }. -. if (!dynpath.Contains(TROOT::GetLibDir())) {. dynpath += "";""; dynpath += TROOT::GetLibDir();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:105,energy efficiency,core,core,105,"So here is the diff for `TWinNTSystem.cxx`, if you want to include it in the same PR:. ```. diff --git a/core/winnt/src/TWinNTSystem.cxx b/core/winnt/src/TWinNTSystem.cxx. index 71cc3be3a3..7889fc9008 100644. --- a/core/winnt/src/TWinNTSystem.cxx. +++ b/core/winnt/src/TWinNTSystem.cxx. @@ -358,24 +358,26 @@ namespace {. dynpath = """";. }. if (newpath) {. -. dynpath = newpath;. -. } else if (dynpath == """") {. + dynpath = gSystem->Getenv(""ROOT_LIBRARY_PATH"");. TString rdynpath = gEnv ? gEnv->GetValue(""Root.DynamicPath"", (char*)0) : """";. rdynpath.ReplaceAll(""; "", "";""); // in case DynamicPath was extended. if (rdynpath == """") {. rdynpath = "".;""; rdynpath += TROOT::GetBinDir();. }. TString path = gSystem->Getenv(""PATH"");. - if (path == """"). - dynpath = rdynpath;. - else {. - dynpath = path; dynpath += "";""; dynpath += rdynpath;. + if (!path.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += path;. + }. + if (!rdynpath.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += rdynpath;. }. -. }. -. if (!dynpath.Contains(TROOT::GetLibDir())) {. dynpath += "";""; dynpath += TROOT::GetLibDir();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:139,energy efficiency,core,core,139,"So here is the diff for `TWinNTSystem.cxx`, if you want to include it in the same PR:. ```. diff --git a/core/winnt/src/TWinNTSystem.cxx b/core/winnt/src/TWinNTSystem.cxx. index 71cc3be3a3..7889fc9008 100644. --- a/core/winnt/src/TWinNTSystem.cxx. +++ b/core/winnt/src/TWinNTSystem.cxx. @@ -358,24 +358,26 @@ namespace {. dynpath = """";. }. if (newpath) {. -. dynpath = newpath;. -. } else if (dynpath == """") {. + dynpath = gSystem->Getenv(""ROOT_LIBRARY_PATH"");. TString rdynpath = gEnv ? gEnv->GetValue(""Root.DynamicPath"", (char*)0) : """";. rdynpath.ReplaceAll(""; "", "";""); // in case DynamicPath was extended. if (rdynpath == """") {. rdynpath = "".;""; rdynpath += TROOT::GetBinDir();. }. TString path = gSystem->Getenv(""PATH"");. - if (path == """"). - dynpath = rdynpath;. - else {. - dynpath = path; dynpath += "";""; dynpath += rdynpath;. + if (!path.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += path;. + }. + if (!rdynpath.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += rdynpath;. }. -. }. -. if (!dynpath.Contains(TROOT::GetLibDir())) {. dynpath += "";""; dynpath += TROOT::GetLibDir();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:215,energy efficiency,core,core,215,"So here is the diff for `TWinNTSystem.cxx`, if you want to include it in the same PR:. ```. diff --git a/core/winnt/src/TWinNTSystem.cxx b/core/winnt/src/TWinNTSystem.cxx. index 71cc3be3a3..7889fc9008 100644. --- a/core/winnt/src/TWinNTSystem.cxx. +++ b/core/winnt/src/TWinNTSystem.cxx. @@ -358,24 +358,26 @@ namespace {. dynpath = """";. }. if (newpath) {. -. dynpath = newpath;. -. } else if (dynpath == """") {. + dynpath = gSystem->Getenv(""ROOT_LIBRARY_PATH"");. TString rdynpath = gEnv ? gEnv->GetValue(""Root.DynamicPath"", (char*)0) : """";. rdynpath.ReplaceAll(""; "", "";""); // in case DynamicPath was extended. if (rdynpath == """") {. rdynpath = "".;""; rdynpath += TROOT::GetBinDir();. }. TString path = gSystem->Getenv(""PATH"");. - if (path == """"). - dynpath = rdynpath;. - else {. - dynpath = path; dynpath += "";""; dynpath += rdynpath;. + if (!path.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += path;. + }. + if (!rdynpath.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += rdynpath;. }. -. }. -. if (!dynpath.Contains(TROOT::GetLibDir())) {. dynpath += "";""; dynpath += TROOT::GetLibDir();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:254,energy efficiency,core,core,254,"So here is the diff for `TWinNTSystem.cxx`, if you want to include it in the same PR:. ```. diff --git a/core/winnt/src/TWinNTSystem.cxx b/core/winnt/src/TWinNTSystem.cxx. index 71cc3be3a3..7889fc9008 100644. --- a/core/winnt/src/TWinNTSystem.cxx. +++ b/core/winnt/src/TWinNTSystem.cxx. @@ -358,24 +358,26 @@ namespace {. dynpath = """";. }. if (newpath) {. -. dynpath = newpath;. -. } else if (dynpath == """") {. + dynpath = gSystem->Getenv(""ROOT_LIBRARY_PATH"");. TString rdynpath = gEnv ? gEnv->GetValue(""Root.DynamicPath"", (char*)0) : """";. rdynpath.ReplaceAll(""; "", "";""); // in case DynamicPath was extended. if (rdynpath == """") {. rdynpath = "".;""; rdynpath += TROOT::GetBinDir();. }. TString path = gSystem->Getenv(""PATH"");. - if (path == """"). - dynpath = rdynpath;. - else {. - dynpath = path; dynpath += "";""; dynpath += rdynpath;. + if (!path.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += path;. + }. + if (!rdynpath.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += rdynpath;. }. -. }. -. if (!dynpath.Contains(TROOT::GetLibDir())) {. dynpath += "";""; dynpath += TROOT::GetLibDir();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:599,modifiability,exten,extended,599,"So here is the diff for `TWinNTSystem.cxx`, if you want to include it in the same PR:. ```. diff --git a/core/winnt/src/TWinNTSystem.cxx b/core/winnt/src/TWinNTSystem.cxx. index 71cc3be3a3..7889fc9008 100644. --- a/core/winnt/src/TWinNTSystem.cxx. +++ b/core/winnt/src/TWinNTSystem.cxx. @@ -358,24 +358,26 @@ namespace {. dynpath = """";. }. if (newpath) {. -. dynpath = newpath;. -. } else if (dynpath == """") {. + dynpath = gSystem->Getenv(""ROOT_LIBRARY_PATH"");. TString rdynpath = gEnv ? gEnv->GetValue(""Root.DynamicPath"", (char*)0) : """";. rdynpath.ReplaceAll(""; "", "";""); // in case DynamicPath was extended. if (rdynpath == """") {. rdynpath = "".;""; rdynpath += TROOT::GetBinDir();. }. TString path = gSystem->Getenv(""PATH"");. - if (path == """"). - dynpath = rdynpath;. - else {. - dynpath = path; dynpath += "";""; dynpath += rdynpath;. + if (!path.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += path;. + }. + if (!rdynpath.IsNull()) {. + if (!dynpath.IsNull()). + dynpath += "";"";. + dynpath += rdynpath;. }. -. }. -. if (!dynpath.Contains(TROOT::GetLibDir())) {. dynpath += "";""; dynpath += TROOT::GetLibDir();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:222,interoperability,specif,specific,222,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:403,modifiability,exten,extend,403,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:231,safety,test,test,231,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:264,safety,test,tests,264,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:371,safety,test,test,371,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:108,security,Auth,Authored-By,108,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:231,testability,test,test,231,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:264,testability,test,tests,264,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:371,testability,test,test,371,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:337,usability,guidanc,guidance,337,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:390,usability,learn,learn,390,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this? If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:49,safety,test,test,49,@ChristianTackeGSI Thanks! And my question about test mas mostly for @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:49,testability,test,test,49,@ChristianTackeGSI Thanks! And my question about test mas mostly for @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:88,energy efficiency,core,core,88,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:129,energy efficiency,core,core,129,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:23,safety,test,test,23,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:70,safety,test,test,70,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:98,safety,test,test,98,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:23,testability,test,test,23,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:70,testability,test,test,70,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:98,testability,test,test,98,It'd be good to have a test for this. This can be done through Google test in `root.git/core/base/test` or in `roottest.git/root/core`. @ChristianTackeGSI would you be able to provide us with one?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:30,safety,test,tests,30,"I'll look into providing some tests. I have some idea. If I need more help, I'll speak up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:30,testability,test,tests,30,"I'll look into providing some tests. I have some idea. If I need more help, I'll speak up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:70,usability,help,help,70,"I'll look into providing some tests. I have some idea. If I need more help, I'll speak up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:83,deployability,configurat,configuration,83,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:83,integrability,configur,configuration,83,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:501,interoperability,semant,semantics,501,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:69,modifiability,pac,package,69,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:83,modifiability,configur,configuration,83,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:443,modifiability,pac,package,443,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:256,reliability,Doe,Does,256,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:83,security,configur,configuration,83,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:132,usability,user,user,132,"> Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. Just for my curiosity, if it would be possible (and if not would be desired to have):. Does the file-based rootrc-System already have the primitives (like an ""include/merge other rootrc file"" of sorts) to construct something like `/etc/rootrc.d/<pkgname>.rootrc` where each package could store its own rootrc file with [ap,pre]pend semantics for a search path entry like `Root.DynamicPath`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:200,energy efficiency,current,current,200,"I don't think that exists. Are you suggesting we collect everything from all these files - and what is their relative priority? Or if we don't collect everything, how do we detect which ""package"" the current process belongs to? Another option is for a library to modify the combined `rootrc` entries, by means of `gEnv->GetValue()`, `gEnv->SetValue()`, e.g. during static initialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:187,modifiability,pac,package,187,"I don't think that exists. Are you suggesting we collect everything from all these files - and what is their relative priority? Or if we don't collect everything, how do we detect which ""package"" the current process belongs to? Another option is for a library to modify the combined `rootrc` entries, by means of `gEnv->GetValue()`, `gEnv->SetValue()`, e.g. during static initialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:173,safety,detect,detect,173,"I don't think that exists. Are you suggesting we collect everything from all these files - and what is their relative priority? Or if we don't collect everything, how do we detect which ""package"" the current process belongs to? Another option is for a library to modify the combined `rootrc` entries, by means of `gEnv->GetValue()`, `gEnv->SetValue()`, e.g. during static initialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:173,security,detect,detect,173,"I don't think that exists. Are you suggesting we collect everything from all these files - and what is their relative priority? Or if we don't collect everything, how do we detect which ""package"" the current process belongs to? Another option is for a library to modify the combined `rootrc` entries, by means of `gEnv->GetValue()`, `gEnv->SetValue()`, e.g. during static initialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:263,security,modif,modify,263,"I don't think that exists. Are you suggesting we collect everything from all these files - and what is their relative priority? Or if we don't collect everything, how do we detect which ""package"" the current process belongs to? Another option is for a library to modify the combined `rootrc` entries, by means of `gEnv->GetValue()`, `gEnv->SetValue()`, e.g. during static initialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:130,deployability,contain,contain,130,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:725,deployability,log,logic,725,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:822,deployability,manag,managers,822,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:832,deployability,instal,install,832,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1031,deployability,instal,install,1031,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1068,deployability,depend,depends,1068,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:550,energy efficiency,core,core,550,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:822,energy efficiency,manag,managers,822,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1068,integrability,depend,depends,1068,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:910,interoperability,share,shared,910,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1235,interoperability,conflict,conflicts,1235,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:845,modifiability,pac,package,845,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:936,modifiability,pac,packages,936,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1055,modifiability,pac,package,1055,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1068,modifiability,depend,depends,1068,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1124,modifiability,variab,variables,1124,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1039,performance,time,time,1039,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:367,reliability,pra,practical,367,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:725,safety,log,logic,725,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:822,safety,manag,managers,822,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1068,safety,depend,depends,1068,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:593,security,modif,modify,593,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:725,security,log,logic,725,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:659,testability,hook,hooks,659,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:725,testability,log,logic,725,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1068,testability,depend,depends,1068,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:807,usability,user,user-space,807,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:1322,usability,progress,progress,1322,"> Are you suggesting we collect everything from all these files - and what is their relative priority? Yes, `system.rootrc` would contain a line like `import /etc/rootrc.d/*.rootrc` or similar. Relative priority could be resolved by sorting by filename (same as shell wildcard expansion) (e.g. can be used with xxx numeric prefix and such - not perfect, but probably practical enough). Examples:. * In autofs maps one can write `+dir:/etc/auto.master.d`, or. * in apache config [`IncludeOptional conf.d/*.conf`](https://httpd.apache.org/docs/2.4/mod/core.html#include). I mean, one could also modify the `system.rootrc` file in some postinstall/preremove pkg hooks ... but that could be tricky and require more sophisticated logic than desirable in such scripts. But then again, spack, aliBuild, and other *user-space pkg managers* install each package into their own prefix and have no or limited concepts of shared directories across packages ... In the end, I am looking for a good way to *bake-in* some default search paths at install time and from a package that depends on root, ideally without setting up environment variables at all. But having `ROOT_LIBRARY_PATH` would already go a long way for us to be able to resolve some conflicts we have when being forced to use `LD_LIBRARY_PATH`, so I don't want to stall progress on that aspect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:6,safety,test,testsuite,6,Added testsuite for the Unix part. It works on Linux. I hope it works on other Unix-like OSes. (rebased),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:6,testability,test,testsuite,6,Added testsuite for the Unix part. It works on Linux. I hope it works on other Unix-like OSes. (rebased),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:27,safety,test,tests,27,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:114,safety,test,test,114,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:185,safety,test,test,185,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:27,testability,test,tests,27,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:114,testability,test,test,114,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:185,testability,test,test,185,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:76,usability,clear,clearly,76,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:59,usability,help,helps,59,"@Axel-Naumann Okay, split into two commits. Hopefully that helps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:46,availability,failur,failures,46,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:46,deployability,fail,failures,46,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:46,performance,failur,failures,46,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:46,reliability,fail,failures,46,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:31,safety,test,test,31,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:40,safety,avoid,avoid,40,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:31,testability,test,test,31,@ChristianTackeGSI to actually test and avoid failures on Windows you will need to fork roottest.git (there is a bug in CI). Sorry for this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:40,availability,failur,failure,40,"@oshadura can you point me (us?) to the failure? @bellenot as you seem to be much more knowledgeable about the windows things, could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:40,deployability,fail,failure,40,"@oshadura can you point me (us?) to the failure? @bellenot as you seem to be much more knowledgeable about the windows things, could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:40,performance,failur,failure,40,"@oshadura can you point me (us?) to the failure? @bellenot as you seem to be much more knowledgeable about the windows things, could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:40,reliability,fail,failure,40,"@oshadura can you point me (us?) to the failure? @bellenot as you seem to be much more knowledgeable about the windows things, could you take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:42,availability,error,error,42,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:442,integrability,batch,batch,442,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:42,performance,error,error,42,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:61,performance,time,timeout,61,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:366,performance,time,timeout,366,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:442,performance,batch,batch,442,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:597,performance,time,timeout,597,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:42,safety,error,error,42,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:61,safety,timeout,timeout,61,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:366,safety,timeout,timeout,366,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:584,safety,prevent,prevent,584,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:597,safety,timeout,timeout,597,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:402,security,sign,signal,402,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:584,security,preven,prevent,584,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:516,testability,Simpl,Simply,516,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:42,usability,error,error,42,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:335,usability,Cancel,Cancelling,335,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:516,usability,Simpl,Simply,516,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:. ```. 12:24:10 * Connection #0 to host github.com left intact. 12:24:10 bash: /dev/tty: No such device or address. 16:23:23 Cancelling nested steps due to timeout. 16:23:23 Sending interrupt signal to process. 16:23:30 ^CTerminate batch job (Y/N)? . 16:23:30 ^Cscript returned exit code -1073741510. ```. Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:128,deployability,build,build,128,"> Okay, I have just pressed the ""fork"" button on roottest. > . > Is it that, that you wanted me to do? Exactly, thanks. Now the build is ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:45,deployability,patch,patches,45,Should I change the target branch to 6-24-00-patches?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:45,safety,patch,patches,45,Should I change the target branch to 6-24-00-patches?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:45,security,patch,patches,45,Should I change the target branch to 6-24-00-patches?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:41,deployability,releas,release,41,"@pcanal. I added a new subsection to the release notes, please review and let me know, if this is the right way. I also added my name to the contributors, hope that's okay / wanted too? (Bertrand Bellenot is already listed). I rebased on master, but as this seems to target 6.24, I wonder, whether I should rebase on 6-24-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:325,deployability,patch,patches,325,"@pcanal. I added a new subsection to the release notes, please review and let me know, if this is the right way. I also added my name to the contributors, hope that's okay / wanted too? (Bertrand Bellenot is already listed). I rebased on master, but as this seems to target 6.24, I wonder, whether I should rebase on 6-24-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:23,integrability,sub,subsection,23,"@pcanal. I added a new subsection to the release notes, please review and let me know, if this is the right way. I also added my name to the contributors, hope that's okay / wanted too? (Bertrand Bellenot is already listed). I rebased on master, but as this seems to target 6.24, I wonder, whether I should rebase on 6-24-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:63,safety,review,review,63,"@pcanal. I added a new subsection to the release notes, please review and let me know, if this is the right way. I also added my name to the contributors, hope that's okay / wanted too? (Bertrand Bellenot is already listed). I rebased on master, but as this seems to target 6.24, I wonder, whether I should rebase on 6-24-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:325,safety,patch,patches,325,"@pcanal. I added a new subsection to the release notes, please review and let me know, if this is the right way. I also added my name to the contributors, hope that's okay / wanted too? (Bertrand Bellenot is already listed). I rebased on master, but as this seems to target 6.24, I wonder, whether I should rebase on 6-24-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:325,security,patch,patches,325,"@pcanal. I added a new subsection to the release notes, please review and let me know, if this is the right way. I also added my name to the contributors, hope that's okay / wanted too? (Bertrand Bellenot is already listed). I rebased on master, but as this seems to target 6.24, I wonder, whether I should rebase on 6-24-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:63,testability,review,review,63,"@pcanal. I added a new subsection to the release notes, please review and let me know, if this is the right way. I also added my name to the contributors, hope that's okay / wanted too? (Bertrand Bellenot is already listed). I rebased on master, but as this seems to target 6.24, I wonder, whether I should rebase on 6-24-00-patches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:96,deployability,releas,release,96,"v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. > I also added my name to the contributors, hope that's okay / wanted too? Of course :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:30,usability,close,closed,30,"v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. > I also added my name to the contributors, hope that's okay / wanted too? Of course :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:98,deployability,releas,release,98,"> v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. I am a bit confused. The ""Milestone"" for this PR [was set to ""6.24/00""](https://github.com/root-project/root/pull/7031#event-4437244837)? * If this is going into 6.24, should I rebase on that branch and target it? * If this is going into 6.26, should I rather change the v626 release notes instead of the v624 one? (and someone should update the Milestone, I guess?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:391,deployability,releas,release,391,"> v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. I am a bit confused. The ""Milestone"" for this PR [was set to ""6.24/00""](https://github.com/root-project/root/pull/7031#event-4437244837)? * If this is going into 6.24, should I rebase on that branch and target it? * If this is going into 6.26, should I rather change the v626 release notes instead of the v624 one? (and someone should update the Milestone, I guess?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:450,deployability,updat,update,450,"> v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. I am a bit confused. The ""Milestone"" for this PR [was set to ""6.24/00""](https://github.com/root-project/root/pull/7031#event-4437244837)? * If this is going into 6.24, should I rebase on that branch and target it? * If this is going into 6.26, should I rather change the v626 release notes instead of the v624 one? (and someone should update the Milestone, I guess?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:234,integrability,event,event-,234,"> v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. I am a bit confused. The ""Milestone"" for this PR [was set to ""6.24/00""](https://github.com/root-project/root/pull/7031#event-4437244837)? * If this is going into 6.24, should I rebase on that branch and target it? * If this is going into 6.26, should I rather change the v626 release notes instead of the v624 one? (and someone should update the Milestone, I guess?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:450,safety,updat,update,450,"> v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. I am a bit confused. The ""Milestone"" for this PR [was set to ""6.24/00""](https://github.com/root-project/root/pull/7031#event-4437244837)? * If this is going into 6.24, should I rebase on that branch and target it? * If this is going into 6.26, should I rather change the v626 release notes instead of the v624 one? (and someone should update the Milestone, I guess?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:450,security,updat,update,450,"> v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. I am a bit confused. The ""Milestone"" for this PR [was set to ""6.24/00""](https://github.com/root-project/root/pull/7031#event-4437244837)? * If this is going into 6.24, should I rebase on that branch and target it? * If this is going into 6.26, should I rather change the v626 release notes instead of the v624 one? (and someone should update the Milestone, I guess?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:32,usability,close,closed,32,"> v6.24 is already branched and closed for new features; i.e. we are in the last few steps of the release process. I am a bit confused. The ""Milestone"" for this PR [was set to ""6.24/00""](https://github.com/root-project/root/pull/7031#event-4437244837)? * If this is going into 6.24, should I rebase on that branch and target it? * If this is going into 6.26, should I rather change the v626 release notes instead of the v624 one? (and someone should update the Milestone, I guess?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:118,availability,sla,slated,118,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:217,deployability,patch,patch,217,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:259,deployability,updat,update,259,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:270,deployability,releas,release,270,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:349,deployability,patch,patch,349,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:96,integrability,messag,message,96,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:96,interoperability,messag,message,96,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:118,reliability,sla,slated,118,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:217,safety,patch,patch,217,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:259,safety,updat,update,259,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:349,safety,patch,patch,349,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:217,security,patch,patch,217,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:259,security,updat,update,259,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:349,security,patch,patch,349,"> If this is going into 6.24, should I rebase on that branch and target it? I had missed Axel's message. It is indeed slated to go in 6.24. Our usual process is to first merge in master and then backport to the v6.24 patch branch. @ChristianTackeGSI Once you update the release note, I will merge in and then can you open a new PR against the v6.24 patch branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:0,deployability,Releas,Release,0,Release notes are ready from my side.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:75,safety,test,test,75,@vgvassilev thanks for the reminder. @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:75,testability,test,test,75,@vgvassilev thanks for the reminder. @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:95,usability,prefer,prefer,95,@vgvassilev thanks for the reminder. @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:50,safety,test,test,50,"@pcanal . > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it? Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest? The test suite commit is now here, for your reference:. https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test. (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:137,safety,test,test,137,"@pcanal . > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it? Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest? The test suite commit is now here, for your reference:. https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test. (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:237,safety,test,test,237,"@pcanal . > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it? Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest? The test suite commit is now here, for your reference:. https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test. (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:50,testability,test,test,50,"@pcanal . > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it? Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest? The test suite commit is now here, for your reference:. https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test. (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:137,testability,test,test,137,"@pcanal . > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it? Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest? The test suite commit is now here, for your reference:. https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test. (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:237,testability,test,test,237,"@pcanal . > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it? Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest? The test suite commit is now here, for your reference:. https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test. (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:70,usability,prefer,prefer,70,"@pcanal . > @ChristianTackeGSI Can you remove the test commit? Do you prefer that I add to roottest or can you add it? Okay, removed the test suite commit (and rebased to master). Could you please take care of adding it to roottest? The test suite commit is now here, for your reference:. https://github.com/ChristianTackeGSI/root/tree/pr/root_lib_env_test. (top single commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:12,availability,failur,failures,12,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:12,deployability,fail,failures,12,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:12,performance,failur,failures,12,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:12,reliability,fail,failures,12,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:35,safety,test,test,35,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:96,safety,test,test,96,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:35,testability,test,test,35,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:96,testability,test,test,96,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/pull/7031:73,usability,close,closed,73,The windows failures is unrelated (test output file deleted before being closed in an unrelated test),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7031
https://github.com/root-project/root/issues/7032:170,energy efficiency,optim,optimized,170,"Hi @hageboeck, thanks for opening this issue! I investigated the first item (vectorization of normalization in RooAbsPdf), and according to the compiler (`-fopt-info-vec-optimized`) it is already vectorized:. ```. roofit/roofitcore/src/RooAbsPdf.cxx:375:26: optimized: loop vectorized using 16 byte vectors. ```. Am I missing something, or can we consider this part of the issue to be solved?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:258,energy efficiency,optim,optimized,258,"Hi @hageboeck, thanks for opening this issue! I investigated the first item (vectorization of normalization in RooAbsPdf), and according to the compiler (`-fopt-info-vec-optimized`) it is already vectorized:. ```. roofit/roofitcore/src/RooAbsPdf.cxx:375:26: optimized: loop vectorized using 16 byte vectors. ```. Am I missing something, or can we consider this part of the issue to be solved?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:170,performance,optimiz,optimized,170,"Hi @hageboeck, thanks for opening this issue! I investigated the first item (vectorization of normalization in RooAbsPdf), and according to the compiler (`-fopt-info-vec-optimized`) it is already vectorized:. ```. roofit/roofitcore/src/RooAbsPdf.cxx:375:26: optimized: loop vectorized using 16 byte vectors. ```. Am I missing something, or can we consider this part of the issue to be solved?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:258,performance,optimiz,optimized,258,"Hi @hageboeck, thanks for opening this issue! I investigated the first item (vectorization of normalization in RooAbsPdf), and according to the compiler (`-fopt-info-vec-optimized`) it is already vectorized:. ```. roofit/roofitcore/src/RooAbsPdf.cxx:375:26: optimized: loop vectorized using 16 byte vectors. ```. Am I missing something, or can we consider this part of the issue to be solved?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:267,deployability,log,logarithms,267,"It is vectorised on the machine where you compile. In cvmfs, where most people get their ROOT from, it is not. That's the reason that Manos' mini library exists, which is compiled a few times for different architectures. If the computations for normalisation and the logarithms are pulled over into that library, every user gets a speed boost, and not only the ones that compiled ROOT manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:206,interoperability,architectur,architectures,206,"It is vectorised on the machine where you compile. In cvmfs, where most people get their ROOT from, it is not. That's the reason that Manos' mini library exists, which is compiled a few times for different architectures. If the computations for normalisation and the logarithms are pulled over into that library, every user gets a speed boost, and not only the ones that compiled ROOT manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:186,performance,time,times,186,"It is vectorised on the machine where you compile. In cvmfs, where most people get their ROOT from, it is not. That's the reason that Manos' mini library exists, which is compiled a few times for different architectures. If the computations for normalisation and the logarithms are pulled over into that library, every user gets a speed boost, and not only the ones that compiled ROOT manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:267,safety,log,logarithms,267,"It is vectorised on the machine where you compile. In cvmfs, where most people get their ROOT from, it is not. That's the reason that Manos' mini library exists, which is compiled a few times for different architectures. If the computations for normalisation and the logarithms are pulled over into that library, every user gets a speed boost, and not only the ones that compiled ROOT manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:267,security,log,logarithms,267,"It is vectorised on the machine where you compile. In cvmfs, where most people get their ROOT from, it is not. That's the reason that Manos' mini library exists, which is compiled a few times for different architectures. If the computations for normalisation and the logarithms are pulled over into that library, every user gets a speed boost, and not only the ones that compiled ROOT manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:267,testability,log,logarithms,267,"It is vectorised on the machine where you compile. In cvmfs, where most people get their ROOT from, it is not. That's the reason that Manos' mini library exists, which is compiled a few times for different architectures. If the computations for normalisation and the logarithms are pulled over into that library, every user gets a speed boost, and not only the ones that compiled ROOT manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:319,usability,user,user,319,"It is vectorised on the machine where you compile. In cvmfs, where most people get their ROOT from, it is not. That's the reason that Manos' mini library exists, which is compiled a few times for different architectures. If the computations for normalisation and the logarithms are pulled over into that library, every user gets a speed boost, and not only the ones that compiled ROOT manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:257,energy efficiency,adapt,adapt,257,"Thank you for the explanation! What about the loop in [`getLogProbabilities()`](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L733)? It doesn't get vectorized when I compile it. So for that part of the issue I need to adapt RooAbsPdf itself, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:257,integrability,adapt,adapt,257,"Thank you for the explanation! What about the loop in [`getLogProbabilities()`](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L733)? It doesn't get vectorized when I compile it. So for that part of the issue I need to adapt RooAbsPdf itself, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:257,interoperability,adapt,adapt,257,"Thank you for the explanation! What about the loop in [`getLogProbabilities()`](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L733)? It doesn't get vectorized when I compile it. So for that part of the issue I need to adapt RooAbsPdf itself, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:257,modifiability,adapt,adapt,257,"Thank you for the explanation! What about the loop in [`getLogProbabilities()`](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L733)? It doesn't get vectorized when I compile it. So for that part of the issue I need to adapt RooAbsPdf itself, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:175,reliability,doe,doesn,175,"Thank you for the explanation! What about the loop in [`getLogProbabilities()`](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L733)? It doesn't get vectorized when I compile it. So for that part of the issue I need to adapt RooAbsPdf itself, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:198,deployability,log,log,198,"> What about the loop in getLogProbabilities()? It used to work. Either your compiler is too anxious about it or this commit d72f241f792 broke it or you don't have VDT activated such that the `std::log` is used. If this is moved over to the mini library, it's not so critical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:198,safety,log,log,198,"> What about the loop in getLogProbabilities()? It used to work. Either your compiler is too anxious about it or this commit d72f241f792 broke it or you don't have VDT activated such that the `std::log` is used. If this is moved over to the mini library, it's not so critical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:198,security,log,log,198,"> What about the loop in getLogProbabilities()? It used to work. Either your compiler is too anxious about it or this commit d72f241f792 broke it or you don't have VDT activated such that the `std::log` is used. If this is moved over to the mini library, it's not so critical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:198,testability,log,log,198,"> What about the loop in getLogProbabilities()? It used to work. Either your compiler is too anxious about it or this commit d72f241f792 broke it or you don't have VDT activated such that the `std::log` is used. If this is moved over to the mini library, it's not so critical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:142,deployability,log,logarithm,142,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:23,integrability,Batch,BatchCompute,23,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:97,integrability,batch,batch,97,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:23,performance,Batch,BatchCompute,23,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:97,performance,batch,batch,97,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:73,reliability,doe,doesn,73,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:142,safety,log,logarithm,142,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:142,security,log,logarithm,142,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:142,testability,log,logarithm,142,"I actually think that `BatchCompute::fast_log` is a misnomer, because it doesn't have to do with batch computing. It's just a fast, inlinable logarithm provided by VDT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:0,energy efficiency,Cool,Cool,0,"Cool, I didn't know that vdt can vectorize! If there is no VDT, `BatchCompute::fast_log` will do the exponential by the way: https://github.com/root-project/root/blob/master/roofit/batchcompute/inc/RooVDTHeaders.h#L56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:65,integrability,Batch,BatchCompute,65,"Cool, I didn't know that vdt can vectorize! If there is no VDT, `BatchCompute::fast_log` will do the exponential by the way: https://github.com/root-project/root/blob/master/roofit/batchcompute/inc/RooVDTHeaders.h#L56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:181,integrability,batch,batchcompute,181,"Cool, I didn't know that vdt can vectorize! If there is no VDT, `BatchCompute::fast_log` will do the exponential by the way: https://github.com/root-project/root/blob/master/roofit/batchcompute/inc/RooVDTHeaders.h#L56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:65,performance,Batch,BatchCompute,65,"Cool, I didn't know that vdt can vectorize! If there is no VDT, `BatchCompute::fast_log` will do the exponential by the way: https://github.com/root-project/root/blob/master/roofit/batchcompute/inc/RooVDTHeaders.h#L56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:181,performance,batch,batchcompute,181,"Cool, I didn't know that vdt can vectorize! If there is no VDT, `BatchCompute::fast_log` will do the exponential by the way: https://github.com/root-project/root/blob/master/roofit/batchcompute/inc/RooVDTHeaders.h#L56",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:7,integrability,topic,topic,7,"On the topic of vectorisation, maybe you want to pull in this commit (and maybe do something analogous for Manos' new libraries):. https://github.com/hageboeck/root/commit/ad514958b76533f577948bf29817aedde86bd6db. I was running with this since months, but never merged it to master. Nobody needs the stupid side effects of the `std::` functions, and the experiments were happy with us disabling it for RooFit. Once the side effects are gone, clang happily vectorises a lot more things (Edit: standard math things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:492,interoperability,standard,standard,492,"On the topic of vectorisation, maybe you want to pull in this commit (and maybe do something analogous for Manos' new libraries):. https://github.com/hageboeck/root/commit/ad514958b76533f577948bf29817aedde86bd6db. I was running with this since months, but never merged it to master. Nobody needs the stupid side effects of the `std::` functions, and the experiments were happy with us disabling it for RooFit. Once the side effects are gone, clang happily vectorises a lot more things (Edit: standard math things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:405,integrability,batch,batchcompute,405,@hageboeck @guitargeek The important flags for facilitating auto-vectorization are `-fno-signaling-nans` and `-fno-trapping-math`. Clang has this on by default (that's why it's better than gcc in vectorizing) while gcc has this off by default. That's the reason why I have this flag in my computing libraries here: https://github.com/root-project/root/blob/447affc3323b6abacc97b56935a2ad3335aaa6c9/roofit/batchcompute/CMakeLists.txt#L38,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:405,performance,batch,batchcompute,405,@hageboeck @guitargeek The important flags for facilitating auto-vectorization are `-fno-signaling-nans` and `-fno-trapping-math`. Clang has this on by default (that's why it's better than gcc in vectorizing) while gcc has this off by default. That's the reason why I have this flag in my computing libraries here: https://github.com/root-project/root/blob/447affc3323b6abacc97b56935a2ad3335aaa6c9/roofit/batchcompute/CMakeLists.txt#L38,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:89,security,sign,signaling-nans,89,@hageboeck @guitargeek The important flags for facilitating auto-vectorization are `-fno-signaling-nans` and `-fno-trapping-math`. Clang has this on by default (that's why it's better than gcc in vectorizing) while gcc has this off by default. That's the reason why I have this flag in my computing libraries here: https://github.com/root-project/root/blob/447affc3323b6abacc97b56935a2ad3335aaa6c9/roofit/batchcompute/CMakeLists.txt#L38,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:87,deployability,version,version,87,"That's for gcc, I assume? For clang, I needed the no errno, but I don't know for which version. I guess it's fine to `PRIVATE`ly set many of those for RooFit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:87,integrability,version,version,87,"That's for gcc, I assume? For clang, I needed the no errno, but I don't know for which version. I guess it's fine to `PRIVATE`ly set many of those for RooFit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:87,modifiability,version,version,87,"That's for gcc, I assume? For clang, I needed the no errno, but I don't know for which version. I guess it's fine to `PRIVATE`ly set many of those for RooFit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:55,integrability,batch,batch,55,"hello, reviving a bit the discussion here. Did the new batch evaluation improve the situation? Can this item be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:55,performance,batch,batch,55,"hello, reviving a bit the discussion here. Did the new batch evaluation improve the situation? Can this item be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:112,usability,close,closed,112,"hello, reviving a bit the discussion here. Did the new batch evaluation improve the situation? Can this item be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:27,energy efficiency,optim,optimization,27,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:93,integrability,event,events,93,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:275,integrability,batch,batch,275,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:281,integrability,interfac,interface,281,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:335,integrability,event,events,335,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:394,integrability,event,events,394,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:281,interoperability,interfac,interface,281,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:281,modifiability,interfac,interface,281,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:27,performance,optimiz,optimization,27,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:236,performance,time,times,236,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:275,performance,batch,batch,275,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/issues/7032:562,usability,close,closed,562,"There is still the a final optimization proposal here, in the initial post:. > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:. https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7032
https://github.com/root-project/root/pull/7033:621,availability,error,error,621,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:627,integrability,messag,messages,627,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:627,interoperability,messag,messages,627,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:621,performance,error,error,621,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:621,safety,error,error,621,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:437,usability,intuit,intuitive,437,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:566,usability,user,user,566,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:621,usability,error,error,621,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226. ```c++. #ifdef R__USE_IMT. std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;. #else. #define fThreadExecutor fSequentialExecutor. #endif. #ifndef R__WIN32. std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;. #else. #define fProcessExecutor fSequentialExecutor. #endif. ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:114,testability,understand,understand,114,"> The inline keyword is/was missing here. This might be the only change needed. Yes, maybe. To be honest, I don't understand why not inlining this method is a problem. Is that something related to Cling? Additionally the compiler may ignore the inline keyword (and also the implicit inline by having the method in the class definition) and we'll run into the same problem again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:777,availability,error,error,777,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:381,integrability,pub,public,381,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1308,integrability,interfac,interface,1308,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1308,interoperability,interfac,interface,1308,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:786,modifiability,concern,concerned,786,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1076,modifiability,inherit,inherits,1076,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1308,modifiability,interfac,interface,1308,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:696,performance,time,time,696,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:777,performance,error,error,777,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:717,safety,compl,complained,717,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:777,safety,error,error,777,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:717,security,compl,complained,717,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:786,testability,concern,concerned,786,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:777,usability,error,error,777,"> Is that something related to Cling? . No this is C++ and this is a real issue. . > and also the implicit inline by having the method in the class definition). Indeed there is an implicit inline keyword *if and only if* the implementation is inside the class definition (i.e. the result of this PR for example). In the original code we have a header with:. ```. class SomeName {. public:. void somefunction();. };. void SomeName::somefunction() { ... };. ```. In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. As far as the original error is concerned:. ```. IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'! You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const. ```. It was indeed an accurate report (TThreadExecutor inherits from TExecutorCRTP and the `= delete` meant to require GetPoolSize implementation in the derived class ... but it was implement only in TExecutor and not in TThreadExecutor). If GetPoolSize is not part of the TExecutorCRTP interface then this PR's commit removing it from there is correct, if it is part then it probably should have been declared with:. ```. virtual unsigned GetPoolSize() const = 0;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:323,availability,error,error,323,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:578,deployability,depend,dependency,578,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:467,energy efficiency,core,core,467,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:578,integrability,depend,dependency,578,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:578,modifiability,depend,dependency,578,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:237,performance,time,time,237,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:323,performance,error,error,323,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:258,safety,compl,complained,258,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:323,safety,error,error,323,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:345,safety,compl,complaining,345,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:578,safety,depend,dependency,578,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:655,safety,except,except,655,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:936,safety,avoid,avoiding,936,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:258,security,compl,complained,258,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:345,security,compl,complaining,345,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:578,testability,depend,dependency,578,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:323,usability,error,error,323,"> In this case, without the inline keyword, the compiler is ask (and has to) generate this function in every .o files that correspond to a source file that includes (directly or indirectly) this header file. I.e. it was only a matter of time until something complained about duplicated symbols. Ok, but that's not what the error is saying: it's complaining about a (different) unresolved symbol. Moreover there is a definition of `TThreadExecutor::GetPoolSize()` in `core/imt/src/TThreadExecutor.cxx` which is compiled into `libImt.so`. I also don't see how it can be a missing dependency because there is no include of `TExecutor.hxx` in ROOT right now, except for the dict generation. The removal of `TExecutorCRTP::GetPoolSize()` is just a cleanup, unrelated to actually fixing the problem. I don't think the function is needed because nothing directly receives an object of type `TExecutorCRTP` and the CRT pattern is exactly about avoiding `virtual` functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:30,availability,error,error,30,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:91,availability,error,error,91,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:377,availability,sli,slightly,377,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:30,performance,error,error,30,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:91,performance,error,error,91,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:377,reliability,sli,slightly,377,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:396,reliability,Doe,Does,396,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:30,safety,error,error,30,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:91,safety,error,error,91,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:30,usability,error,error,30,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:91,usability,error,error,91,"> Ok, but that's not what the error is saying: ... I agree. The ""missing inline"" is a real error that is unlikely to be causing the missing symbol report. > . Moreover there is a definition of TThreadExecutor::GetPoolSize(). Indeed. I somehow missed it. > The removal of TExecutorCRTP::GetPoolSize() is just a cleanup, unrelated to actually fixing the problem. . humm ... I am slightly confused. Does this PR solve the missing symbol or not? If this change and the inline change are both unrelated, what is fixing it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:16,availability,sli,slightly,16,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:99,availability,error,error,99,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:181,availability,failur,failures,181,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:325,availability,error,error,325,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:181,deployability,fail,failures,181,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:308,deployability,observ,observe,308,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:99,performance,error,error,99,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:181,performance,failur,failures,181,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:325,performance,error,error,325,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:16,reliability,sli,slightly,16,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:35,reliability,Doe,Does,35,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:181,reliability,fail,failures,181,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:99,safety,error,error,99,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:176,safety,test,test,176,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:325,safety,error,error,325,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:176,testability,test,test,176,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:308,testability,observ,observe,308,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:99,usability,error,error,99,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:325,usability,error,error,325,"> humm ... I am slightly confused. Does this PR solve the missing symbol or not? This PR fixes the error locally and `ROOT-ubuntu16/nortcxxmod` seems to be happy (had some 450 test failures before). > If this change and the inline change are both unrelated, what is fixing it? I have no idea, really, I only observe that the error is gone with the second commit. Maybe @bellenot can provide some insights? I think he had some ideas, based on comments on Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1362,availability,error,error,1362,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:61,deployability,modul,module,61,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:503,deployability,contain,contains,503,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1124,deployability,contain,contains,1124,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1647,deployability,Modul,Module,1647,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1924,deployability,Modul,Module,1924,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:261,energy efficiency,load,loaded,261,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1633,energy efficiency,load,loaded,1633,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1368,integrability,messag,message,1368,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1368,interoperability,messag,message,1368,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1853,interoperability,semant,semantics,1853,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:61,modifiability,modul,module,61,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1647,modifiability,Modul,Module,1647,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1924,modifiability,Modul,Module,1924,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:261,performance,load,loaded,261,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1362,performance,error,error,1362,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1633,performance,load,loaded,1633,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:61,safety,modul,module,61,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1362,safety,error,error,1362,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1647,safety,Modul,Module,1647,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1924,safety,Modul,Module,1924,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1573,security,intrus,intrusive,1573,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:204,testability,understand,understanding,204,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7033:1362,usability,error,error,1362,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:. ```llvm. ; Function Attrs: noinline uwtable. define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {. ; contains calls to. %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9). %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13). %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17). }. ; Function Attrs: noinline nounwind uwtable. define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {. ; ... }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2. ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7033
https://github.com/root-project/root/pull/7035:174,safety,hot,hot,174,Instead of exposing `TF1FunctorPointer` and `TMethodCall` you can also outline all constructors and the destructor of `TF1`. Given that construction and destructions isn't a hot call that would be my preferred solution - especially as it also avoids having to expose `TF1FunctorPointer` to the dictionary. Did / can you try that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:243,safety,avoid,avoids,243,Instead of exposing `TF1FunctorPointer` and `TMethodCall` you can also outline all constructors and the destructor of `TF1`. Given that construction and destructions isn't a hot call that would be my preferred solution - especially as it also avoids having to expose `TF1FunctorPointer` to the dictionary. Did / can you try that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:11,security,expos,exposing,11,Instead of exposing `TF1FunctorPointer` and `TMethodCall` you can also outline all constructors and the destructor of `TF1`. Given that construction and destructions isn't a hot call that would be my preferred solution - especially as it also avoids having to expose `TF1FunctorPointer` to the dictionary. Did / can you try that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:260,security,expos,expose,260,Instead of exposing `TF1FunctorPointer` and `TMethodCall` you can also outline all constructors and the destructor of `TF1`. Given that construction and destructions isn't a hot call that would be my preferred solution - especially as it also avoids having to expose `TF1FunctorPointer` to the dictionary. Did / can you try that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:200,usability,prefer,preferred,200,Instead of exposing `TF1FunctorPointer` and `TMethodCall` you can also outline all constructors and the destructor of `TF1`. Given that construction and destructions isn't a hot call that would be my preferred solution - especially as it also avoids having to expose `TF1FunctorPointer` to the dictionary. Did / can you try that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:116,integrability,pub,public,116,O wait - I think I understand that there is *also* a different issue: `unique_ptr` cannot delete an object of a non-public type. In that case forget my comment - including TMethodCall is not that relevant. ~~But why do we need to expose `TF1FunctorPointer` to the dictionary?~~ understood!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:230,security,expos,expose,230,O wait - I think I understand that there is *also* a different issue: `unique_ptr` cannot delete an object of a non-public type. In that case forget my comment - including TMethodCall is not that relevant. ~~But why do we need to expose `TF1FunctorPointer` to the dictionary?~~ understood!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:19,testability,understand,understand,19,O wait - I think I understand that there is *also* a different issue: `unique_ptr` cannot delete an object of a non-public type. In that case forget my comment - including TMethodCall is not that relevant. ~~But why do we need to expose `TF1FunctorPointer` to the dictionary?~~ understood!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7035:108,testability,understand,understand,108,"Hi, . I think there were some issues if TF1FunctorPointer was not in the dictionary, although I don't fully understand why, since it is not a transient data member",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7035
https://github.com/root-project/root/pull/7037:35,reliability,doe,does,35,I still don't understand this: How does moving the symbol help with resolving it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/pull/7037:14,testability,understand,understand,14,I still don't understand this: How does moving the symbol help with resolving it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/pull/7037:58,usability,help,help,58,I still don't understand this: How does moving the symbol help with resolving it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/pull/7037:24,deployability,fail,fail,24,Plus this will probably fail for `noimt` due to https://github.com/root-project/root/pull/7033#issuecomment-759494622,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/pull/7037:24,reliability,fail,fail,24,Plus this will probably fail for `noimt` due to https://github.com/root-project/root/pull/7033#issuecomment-759494622,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/pull/7037:37,reliability,doe,does,37,"> I still don't understand this: How does moving the symbol help with resolving it? On Windows, inline methods are not properly exported",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/pull/7037:16,testability,understand,understand,16,"> I still don't understand this: How does moving the symbol help with resolving it? On Windows, inline methods are not properly exported",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/pull/7037:60,usability,help,help,60,"> I still don't understand this: How does moving the symbol help with resolving it? On Windows, inline methods are not properly exported",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7037
https://github.com/root-project/root/issues/7039:540,energy efficiency,current,current,540,"> A possibility might be:. ```c++. #ifdef R__USE_IMT. # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. #else. # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. #endif. #ifndef R__WIN32. # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. #else. # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. #endif. std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. ```. Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:778,deployability,depend,depend,778,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:792,deployability,configurat,configuration,792,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:818,deployability,build,build,818,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:580,energy efficiency,current,current,580,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:778,integrability,depend,depend,778,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:792,integrability,configur,configuration,792,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:778,modifiability,depend,depend,778,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:792,modifiability,configur,configuration,792,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:778,safety,depend,depend,778,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:792,security,configur,configuration,792,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:778,testability,depend,depend,778,"> > A possibility might be:. > . > ```c++. > #ifdef R__USE_IMT. > # define R__EXECUTOR_THREAD ROOT::TThreadExecutor. > #else. > # define R__EXECUTOR_THREAD ROOT::TSequentialExecutor. > #endif. > #ifndef R__WIN32. > # define R__EXECUTOR_PROCESS ROOT::TProcessExecutor. > #else. > # define R__EXECUTOR_PROCESS ROOT::TSequentialExecutor. > #endif. > std::unique_ptr<R__EXECUTOR_THREAD> fThreadExecutor;. > std::unique_ptr<R__EXECUTOR_PROCESS> fProcessExecutor;. > ```. > . > Hm, but you cannot have multiple `std::unique_ptr` reference the same object on the heap, which is what the current `define`s do. Maybe that's fine though, I didn't look into the code... In this solution we would only have a single `std::unique_ptr` reference. The ifdef conditions are on definitions that depend on the configuration of the root build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:409,deployability,configurat,configuration,409,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:551,deployability,depend,depending,551,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:571,deployability,configurat,configuration,571,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:409,integrability,configur,configuration,409,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:551,integrability,depend,depending,551,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:571,integrability,configur,configuration,571,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:409,modifiability,configur,configuration,409,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:551,modifiability,depend,depending,551,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:571,modifiability,configur,configuration,571,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:680,reliability,doe,doesn,680,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:551,safety,depend,depending,551,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:409,security,configur,configuration,409,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:571,security,configur,configuration,571,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:551,testability,depend,depending,551,"@hahnjo . > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? @xvallspl . > In this solution we would only have a single std::unique_ptr reference. I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:221,energy efficiency,current,current,221,"@Axel-Naumann . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? The current `define`s make `fThreadExecutor` and `fProcessExecutor` aliases of `fSequentialExecutor`, ie they access the very same (sequential) executor. You cannot do this with three `std::unique_ptr`s, but maybe that's not needed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:327,security,access,access,327,"@Axel-Naumann . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? The current `define`s make `fThreadExecutor` and `fProcessExecutor` aliases of `fSequentialExecutor`, ie they access the very same (sequential) executor. You cannot do this with three `std::unique_ptr`s, but maybe that's not needed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:857,availability,avail,available,857,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:439,deployability,configurat,configuration,439,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:581,deployability,depend,depending,581,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:601,deployability,configurat,configuration,601,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:439,integrability,configur,configuration,439,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:581,integrability,depend,depending,581,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:601,integrability,configur,configuration,601,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:876,interoperability,specif,specific,876,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:439,modifiability,configur,configuration,439,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:581,modifiability,depend,depending,581,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:601,modifiability,configur,configuration,601,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:710,reliability,doe,doesn,710,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:857,reliability,availab,available,857,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:581,safety,depend,depending,581,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:857,safety,avail,available,857,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:439,security,configur,configuration,439,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:601,security,configur,configuration,601,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:848,security,polic,policies,848,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:857,security,availab,available,857,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:581,testability,depend,depending,581,"> @hahnjo. > . > > Hm, but you cannot have multiple std::unique_ptr reference the same object on the heap. > . > I don't see that being the case, neither for master nor for my proposed change. What am I overlooking? > . > @xvallspl. > . > > In this solution we would only have a single std::unique_ptr reference. > . > I don't know what you mean by ""reference"", I don't have lvalue references anywhere here. With my proposal, for all ROOT configuration cases we'd have a definition of three members, `fSequentialExecutor`, `fThreadExecutor`, `fProcessExecutor`. Their types differ depending on ROOT's configuration. Note that I'm using the (assumed) feature that having one or many `ROOT::TSequentialExecutor` doesn't make any difference; that might be wrong. Shouldn't make any difference. These ifdefs are for compilation purposes. The execution policies available in these specific cases will ensure we never call a method from the fallbacks to TSequentialExecutor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:284,deployability,modul,modulo,284,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:291,deployability,modul,modules,291,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:342,deployability,modul,modules,342,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:247,energy efficiency,current,current,247,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:284,modifiability,modul,modulo,284,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:291,modifiability,modul,modules,291,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:342,modifiability,modul,modules,342,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:284,safety,modul,modulo,284,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:291,safety,modul,modules,291,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:342,safety,modul,modules,342,"@hahnjo the master's `define`s (for non-IMT or Windows) do not declare one of the `unique_ptr`s. Instead, all usages of the now undeclared member get rewritten to usages of the `fSequentialExecutor` member. Agreed? :-) So while not beautiful, the current `#define` setup should work (modulo modules, which dislike leaks of CPP defines our of modules). OK and anyway, there seems to be no counter-argument against what I propose, or am I missing something? If yous think it's fine: please open a PR, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/issues/7039:19,usability,close,close,19,@xvallspl shall we close this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7039
https://github.com/root-project/root/pull/7040:63,energy efficiency,core,core,63,FYI multiproc is not supported on Windows. See [these lines in core/CMakeLists.txt](https://github.com/root-project/root/blob/master/core/CMakeLists.txt#L73-L75),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:133,energy efficiency,core,core,133,FYI multiproc is not supported on Windows. See [these lines in core/CMakeLists.txt](https://github.com/root-project/root/blob/master/core/CMakeLists.txt#L73-L75),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:21,usability,support,supported,21,FYI multiproc is not supported on Windows. See [these lines in core/CMakeLists.txt](https://github.com/root-project/root/blob/master/core/CMakeLists.txt#L73-L75),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:65,energy efficiency,core,core,65,> FYI multiproc is not supported on Windows. See [these lines in core/CMakeLists.txt](https://github.com/root-project/root/blob/master/core/CMakeLists.txt#L73-L75). Forgot about that :upside_down_face:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:135,energy efficiency,core,core,135,> FYI multiproc is not supported on Windows. See [these lines in core/CMakeLists.txt](https://github.com/root-project/root/blob/master/core/CMakeLists.txt#L73-L75). Forgot about that :upside_down_face:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:23,usability,support,supported,23,> FYI multiproc is not supported on Windows. See [these lines in core/CMakeLists.txt](https://github.com/root-project/root/blob/master/core/CMakeLists.txt#L73-L75). Forgot about that :upside_down_face:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:70,availability,failur,failures,70,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:45,deployability,build,builds,45,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:70,deployability,fail,failures,70,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:242,deployability,updat,update,242,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:109,energy efficiency,load,load-libs,109,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:70,performance,failur,failures,70,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:109,performance,load,load-libs,109,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:70,reliability,fail,failures,70,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:242,safety,updat,update,242,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:242,security,updat,update,242,"@xvallspl as reported by Jenkins in multiple builds, this PR leads to failures in `pyunittests-pyroot-import-load-libs` and `roottest-root-tree-fastcloning-execCheckClusterRange` (can reproduce locally). The first looks like it just needs an update to the whitelist, not sure about the second one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:4,deployability,build,building,4,"I'm building locally my patch to the first one already, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:24,deployability,patch,patch,24,"I'm building locally my patch to the first one already, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:24,safety,patch,patch,24,"I'm building locally my patch to the first one already, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7040:24,security,patch,patch,24,"I'm building locally my patch to the first one already, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7040
https://github.com/root-project/root/pull/7041:24,integrability,messag,message,24,"Just a change of commit message, should not change the outcome of the tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7041
https://github.com/root-project/root/pull/7041:24,interoperability,messag,message,24,"Just a change of commit message, should not change the outcome of the tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7041
https://github.com/root-project/root/pull/7041:70,safety,test,tests,70,"Just a change of commit message, should not change the outcome of the tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7041
https://github.com/root-project/root/pull/7041:70,testability,test,tests,70,"Just a change of commit message, should not change the outcome of the tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7041
https://github.com/root-project/root/pull/7041:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7041
https://github.com/root-project/root/pull/7042:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7042
https://github.com/root-project/root/pull/7042:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7042
https://github.com/root-project/root/pull/7042:13,usability,close,close,13,I'm going to close this PR and make a new one cause this one is a bit messy,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7042
https://github.com/root-project/root/pull/7044:231,deployability,integr,integration,231,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,integrability,integr,integration,231,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,interoperability,integr,integration,231,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,modifiability,integr,integration,231,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,reliability,integr,integration,231,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,security,integr,integration,231,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,testability,integr,integration,231,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:221,usability,help,help,221,"@lmoneta Hi, happy to see this moving forward! FYI libcmaes recently went under the same umbrella as the other CMA-ES reference implementations, https://github.com/CMA-ES/libcmaes. Don't hesitate to file issues if we can help with integration from the libcmaes side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:85,safety,review,reviewer,85,this is awesome @lmoneta and @beniz. I am so happy to see this code and glad to be a reviewer. Let's see my comments in the files :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:85,testability,review,reviewer,85,this is awesome @lmoneta and @beniz. I am so happy to see this code and glad to be a reviewer. Let's see my comments in the files :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:126,performance,time,time,126,"I leave some comments about some small details in the code. I am still running some tests and tutorials, which is taking some time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:84,safety,test,tests,84,"I leave some comments about some small details in the code. I am still running some tests and tutorials, which is taking some time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:84,testability,test,tests,84,"I leave some comments about some small details in the code. I am still running some tests and tutorials, which is taking some time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:198,availability,down,download,198,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:95,deployability,integr,integrated,95,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:144,deployability,build,build,144,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:211,deployability,instal,install,211,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,deployability,automat,automatically,231,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:95,integrability,integr,integrated,95,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:95,interoperability,integr,integrated,95,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:95,modifiability,integr,integrated,95,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:45,performance,time,time,45,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:95,reliability,integr,integrated,95,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:95,security,integr,integrated,95,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:95,testability,integr,integrated,95,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7044:231,testability,automat,automatically,231,"@beniz, sorry for starting this after a long time, but I think it is good to have this library integrated in ROOT. . I see now cameos can early build with cmake and this will make it easier to also download and install the library automatically. . I will try to fix issues from the ROOT side myself, but feel free to comment and correct me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7044
https://github.com/root-project/root/pull/7046:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7046
https://github.com/root-project/root/issues/7047:1320,availability,consist,consistent,1320,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:749,deployability,releas,release,749,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:800,deployability,Releas,Release,800,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:880,deployability,releas,release,880,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1002,deployability,Releas,Release,1002,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1083,deployability,releas,release,1083,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1269,deployability,Releas,Release,1269,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1351,deployability,log,logic,1351,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:717,energy efficiency,current,currently,717,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1364,energy efficiency,current,current,1364,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:58,integrability,interfac,interface,58,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:329,integrability,wrap,wrapped,329,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:606,integrability,interfac,interface,606,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:58,interoperability,interfac,interface,58,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:606,interoperability,interfac,interface,606,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:620,interoperability,semant,semantics,620,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:849,interoperability,semant,semantics,849,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:58,modifiability,interfac,interface,58,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:606,modifiability,interfac,interface,606,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:526,performance,content,contents,526,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:693,performance,memor,memory,693,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:774,performance,content,contents,774,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1168,safety,test,tests,1168,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1209,safety,test,test,1209,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1351,safety,log,logic,1351,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1414,safety,except,exception,1414,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:513,security,access,accesses,513,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1351,security,log,logic,1351,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:814,testability,simpl,simple,814,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1168,testability,test,tests,1168,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1209,testability,test,test,1209,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1351,testability,log,logic,1351,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:508,usability,user,user,508,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:693,usability,memor,memory,693,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:814,usability,simpl,simple,814,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1320,usability,consist,consistent,1320,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:1331,usability,behavi,behavior,1331,"Hi @Harshalzzzzzzz ,. ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null. - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior. - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:49,deployability,Releas,Release,49,@eguiraud If possible can you indicate any other Release methods I can refer to in other modules or files so that I can follow proper conventions and methods for adding the same for RResultPtr while creating the PR .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:89,deployability,modul,modules,89,@eguiraud If possible can you indicate any other Release methods I can refer to in other modules or files so that I can follow proper conventions and methods for adding the same for RResultPtr while creating the PR .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:89,modifiability,modul,modules,89,@eguiraud If possible can you indicate any other Release methods I can refer to in other modules or files so that I can follow proper conventions and methods for adding the same for RResultPtr while creating the PR .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:89,safety,modul,modules,89,@eguiraud If possible can you indicate any other Release methods I can refer to in other modules or files so that I can follow proper conventions and methods for adding the same for RResultPtr while creating the PR .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:30,usability,indicat,indicate,30,@eguiraud If possible can you indicate any other Release methods I can refer to in other modules or files so that I can follow proper conventions and methods for adding the same for RResultPtr while creating the PR .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:30,deployability,Releas,Release,30,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:122,deployability,Releas,Release,122,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:137,deployability,releas,release,137,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:549,deployability,automat,automatically,549,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:430,interoperability,format,format,430,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:458,interoperability,format,format,458,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:503,interoperability,format,format,503,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:583,interoperability,format,format,583,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:549,testability,automat,automatically,549,"I don't think there are other Release methods in ROOT. RResultPtr behaves similarly to a std::shared_ptr, and RResultPtr::Release should release its ownership of `fObjPtr`, something like:. ```c++. fActionPtr = nullptr;. fLoopManager = nullptr;. auto ptr = fObjPtr.get();. fObjPtr.reset();. return ptr;. ```. For the coding conventions: you can probably figure out the naming conventions from the surrounding code, and you should format the code with `clang-format` before committing (if you run `clang-format` from inside the root sources, it will automatically pick up our `.clang-format` style file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:101,deployability,API,API,101,"#7142 is merged, thank you @Harshalzzzzzzz ! Before closing the issue I'll go through `RResultPtr`'s API one last time because I think there are a couple more places where we should check for a null `fActionPtr` before dereferencing it, but this is an issue we already had.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:101,integrability,API,API,101,"#7142 is merged, thank you @Harshalzzzzzzz ! Before closing the issue I'll go through `RResultPtr`'s API one last time because I think there are a couple more places where we should check for a null `fActionPtr` before dereferencing it, but this is an issue we already had.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:147,integrability,coupl,couple,147,"#7142 is merged, thank you @Harshalzzzzzzz ! Before closing the issue I'll go through `RResultPtr`'s API one last time because I think there are a couple more places where we should check for a null `fActionPtr` before dereferencing it, but this is an issue we already had.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:101,interoperability,API,API,101,"#7142 is merged, thank you @Harshalzzzzzzz ! Before closing the issue I'll go through `RResultPtr`'s API one last time because I think there are a couple more places where we should check for a null `fActionPtr` before dereferencing it, but this is an issue we already had.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:147,modifiability,coupl,couple,147,"#7142 is merged, thank you @Harshalzzzzzzz ! Before closing the issue I'll go through `RResultPtr`'s API one last time because I think there are a couple more places where we should check for a null `fActionPtr` before dereferencing it, but this is an issue we already had.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:114,performance,time,time,114,"#7142 is merged, thank you @Harshalzzzzzzz ! Before closing the issue I'll go through `RResultPtr`'s API one last time because I think there are a couple more places where we should check for a null `fActionPtr` before dereferencing it, but this is an issue we already had.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:147,testability,coupl,couple,147,"#7142 is merged, thank you @Harshalzzzzzzz ! Before closing the issue I'll go through `RResultPtr`'s API one last time because I think there are a couple more places where we should check for a null `fActionPtr` before dereferencing it, but this is an issue we already had.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7047:19,usability,behavi,behavior,19,#7267 improved the behavior or null RResultPtrs a bit. Closing this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7047
https://github.com/root-project/root/issues/7053:734,availability,backup,backup,734,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:885,availability,backup,backup,885,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1002,availability,backup,backup,1002,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1133,availability,backup,backup,1133,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:249,energy efficiency,Profil,Profile,249,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:630,energy efficiency,Profil,Profile,630,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:656,energy efficiency,current,current,656,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:708,energy efficiency,Profil,Profile,708,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:809,energy efficiency,current,current,809,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:943,energy efficiency,current,current,943,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1067,energy efficiency,current,current,1067,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:320,interoperability,distribut,distribution,320,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:794,interoperability,distribut,distribution,794,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:870,interoperability,distribut,distribution,870,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:249,performance,Profil,Profile,249,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:630,performance,Profil,Profile,630,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:708,performance,Profil,Profile,708,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:734,reliability,backup,backup,734,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:885,reliability,backup,backup,885,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1002,reliability,backup,backup,1002,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1133,reliability,backup,backup,1133,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:734,safety,backup,backup,734,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:885,safety,backup,backup,885,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1002,safety,backup,backup,1002,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1133,safety,backup,backup,1133,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1216,safety,test,tests,1216,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1216,testability,test,tests,1216,"I tried to address this in the linked draft PR. The output with the original `hsimple.root` is. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l tutorials/hsimple.root. TProfile Mar 16 01:34 2021 hprof;1 ""Profile of pz versus px"". TH1F Mar 16 01:34 2021 hpx;1 ""This is the px distribution"". TH2F Mar 16 01:34 2021 hpxpy;1 ""py vs px"". TNtuple Mar 16 01:34 2021 ntuple;1 ""Demo ntuple"". ```. And with the copied hsimple.root with 2 cycles per key. ```. vpadulan@fedorathinkpad-T550 [~/Programs/rootproject/rootinstall/devrelease]: rootls -l copy.root . TProfile Apr 14 16:21 2021 hprof;2 ""Profile of pz versus px"" [current cycle]. TProfile Apr 14 16:20 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 14 16:21 2021 hpx;2 ""This is the px distribution"" [current cycle]. TH1F Apr 14 16:20 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 14 16:21 2021 hpxpy;2 ""py vs px"" [current cycle]. TH2F Apr 14 16:20 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 14 16:21 2021 ntuple;2 ""Demo ntuple"" [current cycle]. TNtuple Apr 14 16:20 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```. I'm not sure I addressed all possible cases, I'll do some more tests with other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:921,availability,backup,backup,921,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:998,availability,backup,backup,998,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1149,availability,backup,backup,1149,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1224,availability,backup,backup,1224,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1341,availability,backup,backup,1341,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1399,availability,backup,backup,1399,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1530,availability,backup,backup,1530,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1595,availability,backup,backup,1595,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:40,deployability,patch,patched,40,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:209,energy efficiency,Profil,Profile,209,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:817,energy efficiency,Profil,Profile,817,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:843,energy efficiency,current,current,843,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:895,energy efficiency,Profil,Profile,895,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:972,energy efficiency,Profil,Profile,972,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1073,energy efficiency,current,current,1073,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1282,energy efficiency,current,current,1282,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1464,energy efficiency,current,current,1464,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:281,interoperability,distribut,distribution,281,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1058,interoperability,distribut,distribution,1058,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1134,interoperability,distribut,distribution,1134,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1209,interoperability,distribut,distribution,1209,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:209,performance,Profil,Profile,209,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:817,performance,Profil,Profile,817,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:895,performance,Profil,Profile,895,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:972,performance,Profil,Profile,972,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:921,reliability,backup,backup,921,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:998,reliability,backup,backup,998,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1149,reliability,backup,backup,1149,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1224,reliability,backup,backup,1224,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1341,reliability,backup,backup,1341,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1399,reliability,backup,backup,1399,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1530,reliability,backup,backup,1530,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1595,reliability,backup,backup,1595,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:40,safety,patch,patched,40,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:921,safety,backup,backup,921,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:998,safety,backup,backup,998,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1149,safety,backup,backup,1149,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1224,safety,backup,backup,1224,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1341,safety,backup,backup,1341,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1399,safety,backup,backup,1399,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1530,safety,backup,backup,1530,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:1595,safety,backup,backup,1595,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7053:40,security,patch,patched,40,"Let me add here another output from the patched `rootls` of the linked PR:. ```. vpadulan@fedorathinkpad-T550 [~]: rootls -l https://root.cern/files/tutorials/hsimple.root. TProfile Apr 14 17:47 2021 hprof;1 ""Profile of pz versus px"" . TH1F Apr 14 17:47 2021 hpx;1 ""This is the px distribution"" . TH2F Apr 14 17:47 2021 hpxpy;1 ""py vs px"" . TNtuple Apr 14 17:47 2021 ntuple;1 ""Demo ntuple"" . vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootcp -r https://root.cern/files/tutorials/hsimple.root hsimplecopy.root. vpadulan@fedorathinkpad-T550 [~]: rootls -l hsimplecopy.root. TProfile Apr 17 10:00 2021 hprof;3 ""Profile of pz versus px"" [current cycle]. TProfile Apr 17 10:00 2021 hprof;2 ""Profile of pz versus px"" [backup cycle]. TProfile Apr 17 10:00 2021 hprof;1 ""Profile of pz versus px"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;3 ""This is the px distribution"" [current cycle]. TH1F Apr 17 10:00 2021 hpx;2 ""This is the px distribution"" [backup cycle]. TH1F Apr 17 10:00 2021 hpx;1 ""This is the px distribution"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;3 ""py vs px"" [current cycle]. TH2F Apr 17 10:00 2021 hpxpy;2 ""py vs px"" [backup cycle]. TH2F Apr 17 10:00 2021 hpxpy;1 ""py vs px"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;3 ""Demo ntuple"" [current cycle]. TNtuple Apr 17 10:00 2021 ntuple;2 ""Demo ntuple"" [backup cycle]. TNtuple Apr 17 10:00 2021 ntuple;1 ""Demo ntuple"" [backup cycle]. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7053
https://github.com/root-project/root/issues/7054:28,safety,input,input,28,"This is due to the way the ""input"" file is prepared (see roottest PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7054
https://github.com/root-project/root/issues/7054:28,usability,input,input,28,"This is due to the way the ""input"" file is prepared (see roottest PR).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7054
https://github.com/root-project/root/issues/7055:50,deployability,version,version,50,Thanks for the report. Should be fixed in the new version of the #6385,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7055
https://github.com/root-project/root/issues/7055:50,integrability,version,version,50,Thanks for the report. Should be fixed in the new version of the #6385,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7055
https://github.com/root-project/root/issues/7055:50,modifiability,version,version,50,Thanks for the report. Should be fixed in the new version of the #6385,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7055
https://github.com/root-project/root/pull/7056:87,usability,statu,status,87,Just lets try to see reaction of Jenkins. May be other solution - fully excluded these status bits which sometime appears (as it already happens on Windows) but sometime not.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7056
https://github.com/root-project/root/pull/7056:25,interoperability,platform,platforms,25,As expected - on several platforms these status bits does not appear. Therefore I rebase and just fully exclude these bits from testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7056
https://github.com/root-project/root/pull/7056:53,reliability,doe,does,53,As expected - on several platforms these status bits does not appear. Therefore I rebase and just fully exclude these bits from testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7056
https://github.com/root-project/root/pull/7056:128,safety,test,testing,128,As expected - on several platforms these status bits does not appear. Therefore I rebase and just fully exclude these bits from testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7056
https://github.com/root-project/root/pull/7056:128,testability,test,testing,128,As expected - on several platforms these status bits does not appear. Therefore I rebase and just fully exclude these bits from testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7056
https://github.com/root-project/root/pull/7056:41,usability,statu,status,41,As expected - on several platforms these status bits does not appear. Therefore I rebase and just fully exclude these bits from testing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7056
https://github.com/root-project/root/pull/7057:6,deployability,fail,fails,6,Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:24,energy efficiency,core,core,24,Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:6,reliability,fail,fails,6,Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:33,safety,test,test,33,Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:38,safety,test,testTBBGlobalControl,38,Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:33,testability,test,test,33,Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:38,testability,test,testTBBGlobalControl,38,Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:8,deployability,fail,fails,8,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:26,energy efficiency,core,core,26,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:8,reliability,fail,fails,8,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:35,safety,test,test,35,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:40,safety,test,testTBBGlobalControl,40,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:35,testability,test,test,35,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7057:40,testability,test,testTBBGlobalControl,40,"> Still fails to compile `core/imt/test/testTBBGlobalControl.cxx` on my CentOS 8. Missed that, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7057
https://github.com/root-project/root/pull/7060:66,modifiability,paramet,parameter,66,Merging as I don't think we can do anything about the string_view parameter (EDIT: otherwise I can tackle that in another PR),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7060:68,modifiability,paramet,parameter,68,> Merging as I don't think we can do anything about the string_view parameter (EDIT: otherwise I can tackle that in another PR). What about another overload taking an std::string?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7060:167,energy efficiency,optim,optimizations,167,"> What about another overload taking an std::string? The performance gains of skipping a string construction would be almost non-existing (both STLs have small-string optimizations so this is not even a heap allocation in most cases), and this function is not called in a hot loop and it might even invoke the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7060:208,energy efficiency,alloc,allocation,208,"> What about another overload taking an std::string? The performance gains of skipping a string construction would be almost non-existing (both STLs have small-string optimizations so this is not even a heap allocation in most cases), and this function is not called in a hot loop and it might even invoke the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7060:57,performance,perform,performance,57,"> What about another overload taking an std::string? The performance gains of skipping a string construction would be almost non-existing (both STLs have small-string optimizations so this is not even a heap allocation in most cases), and this function is not called in a hot loop and it might even invoke the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7060:167,performance,optimiz,optimizations,167,"> What about another overload taking an std::string? The performance gains of skipping a string construction would be almost non-existing (both STLs have small-string optimizations so this is not even a heap allocation in most cases), and this function is not called in a hot loop and it might even invoke the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7060:272,safety,hot,hot,272,"> What about another overload taking an std::string? The performance gains of skipping a string construction would be almost non-existing (both STLs have small-string optimizations so this is not even a heap allocation in most cases), and this function is not called in a hot loop and it might even invoke the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7060:57,usability,perform,performance,57,"> What about another overload taking an std::string? The performance gains of skipping a string construction would be almost non-existing (both STLs have small-string optimizations so this is not even a heap allocation in most cases), and this function is not called in a hot loop and it might even invoke the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7060
https://github.com/root-project/root/pull/7062:3439,availability,operat,operator,3439,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3819,availability,error,error,3819,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4046,availability,Error,Error,4046,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4128,availability,Error,Error,4128,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4166,availability,Error,Error,4166,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:338,deployability,build,build,338,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:719,deployability,build,build,719,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:815,deployability,VERSION,VERSION,815,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:860,deployability,VERSION,VERSION,860,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:935,deployability,Build,Build,935,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1106,deployability,Build,Build,1106,"n you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1252,deployability,build,build,1252,"hat GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1532,deployability,build,build,1532,"znaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1933,deployability,build,build,1933,"uild the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2148,deployability,build,build,2148,"skArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included fr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2303,deployability,build,build,2303,". #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2695,deployability,Build,Build,2695,"ation(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/developmen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2773,deployability,build,build,2773,"nstructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2796,deployability,build,build,2796,";. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2819,deployability,depend,dependencies,2819,"a object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2863,deployability,Build,Building,2863,"> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3026,deployability,depend,dependencies,3026,"nclude ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.di",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3071,deployability,Build,Building,3071,"RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3990,deployability,build,build,3990,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4191,deployability,build,build,4191,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:815,integrability,VERSION,VERSION,815,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:860,integrability,VERSION,VERSION,860,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1085,integrability,PUB,PUBLIC,1085," a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena().",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1451,integrability,pub,public,1451,"-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for work",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1753,integrability,pub,public,1753,"eLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2654,integrability,Configur,Configuring,2654,". #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2819,integrability,depend,dependencies,2819,"a object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3026,integrability,depend,dependencies,3026,"nclude ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.di",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:945,interoperability,share,shared,945,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:987,interoperability,SHARE,SHARED,987,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2948,interoperability,share,shared,2948,"paqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:815,modifiability,VERSION,VERSION,815,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:860,modifiability,VERSION,VERSION,860,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2654,modifiability,Configur,Configuring,2654,". #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2819,modifiability,depend,dependencies,2819,"a object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3026,modifiability,depend,dependencies,3026,"nclude ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.di",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1672,performance,memor,memory,1672,"a 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3173,performance,memor,memory,3173,"rena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3819,performance,error,error,3819,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4046,performance,Error,Error,4046,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4128,performance,Error,Error,4128,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4166,performance,Error,Error,4166,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:304,reliability,doe,doesn,304,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1869,reliability,fTa,fTaskArena,1869,"LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CX",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2091,reliability,fTa,fTaskArena,2091,":tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:693,safety,test,test,693,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1116,safety,test,test,1116,"ust** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTask",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1163,safety,test,test,1163,"... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2181,safety,test,test,2181,"ink_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2498,safety,Detect,Detecting,2498,"SKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/inc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2534,safety,Detect,Detecting,2534," more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2577,safety,Detect,Detecting,2577,"#ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2612,safety,Detect,Detecting,2612,"e TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2819,safety,depend,dependencies,2819,"a object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3026,safety,depend,dependencies,3026,"nclude ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.di",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3120,safety,test,test,3120,"a() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3336,safety,test,test,3336,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3819,safety,error,error,3819,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4034,safety,test,test,4034,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4046,safety,Error,Error,4046,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4128,safety,Error,Error,4128,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4166,safety,Error,Error,4166,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2359,security,ident,identification,2359,"KARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2498,security,Detect,Detecting,2498,"SKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/inc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2534,security,Detect,Detecting,2534," more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2577,security,Detect,Detecting,2577,"#ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2612,security,Detect,Detecting,2612,"e TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2654,security,Configur,Configuring,2654,". #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:693,testability,test,test,693,"Unfortunately I don't think such a design works. Not with an `std::unique_ptr`. For such a forward declaration you **must** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1116,testability,test,test,1116,"ust** use `new` and `delete` in the source file... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTask",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1163,testability,test,test,1163,"... (Of `ROOT::RTaskArena`.). I just tried it myself with the following, just to be sure that GCC would not allow this. (I know that Clang doesn't...). ```. [bash][Legolas]:build > ls -l ../ROpaqueTaskArena/. total 20. -rw-rw-r-- 1 krasznaa krasznaa 466 Jan 19 14:38 CMakeLists.txt. -rw-rw-r-- 1 krasznaa krasznaa 206 Jan 19 14:31 ROpaqueTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 148 Jan 19 14:35 RTaskArena.cxx. -rw-rw-r-- 1 krasznaa krasznaa 339 Jan 19 14:34 RTaskArena.hxx. -rw-rw-r-- 1 krasznaa krasznaa 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2181,testability,test,test,2181,"ink_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:2819,testability,depend,dependencies,2819,"a object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3026,testability,depend,dependencies,3026,"nclude ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.di",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3120,testability,test,test,3120,"a() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3336,testability,test,test,3336,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4034,testability,test,test,4034,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:1672,usability,memor,memory,1672,"a 99 Jan 19 14:35 test.cxx. [bash][Legolas]:build > more ../ROpaqueTaskArena/CMakeLists.txt . # Set up the project. cmake_minimum_required( VERSION 3.1 ). project( ROpaqueTaskArenaTest VERSION 1.0.0 LANGUAGES CXX ). # Find TBB. find_package( TBB REQUIRED ). # Build the shared library. add_library( TaskArenaLib SHARED RTaskArena.hxx RTaskArena.cxx. ROpaqueTaskArena.hxx ). target_link_libraries( TaskArenaLib PUBLIC TBB::tbb ). # Build the test executable. add_executable( TaskArenaTest test.cxx ). target_link_libraries( TaskArenaTest PRIVATE TaskArenaLib ). [bash][Legolas]:build > more ../ROpaqueTaskArena/ROpaqueTaskArena.hxx . #ifndef TEST_ROPAQUETASKARENA_HXX. #define TEST_ROPAQUETASKARENA_HXX. // TBB include(s). #include <tbb/task_arena.h>. class ROpaqueTaskArena : public tbb::task_arena {};. #endif // TEST_ROPAQUETASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.hxx . #ifndef TEST_RTASKARENA_HXX. #define TEST_RTASKARENA_HXX. // System include(s). #include <memory>. // Forward declaration(s). class ROpaqueTaskArena;. class RTaskArena {. public:. /// Default constructor. RTaskArena();. private:. /// Task arena object. std::unique_ptr<ROpaqueTaskArena> fTaskArena;. };. #endif // TEST_RTASKARENA_HXX. [bash][Legolas]:build > more ../ROpaqueTaskArena/RTaskArena.cxx. // Local include(s). #include ""RTaskArena.hxx"". #include ""ROpaqueTaskArena.hxx"". RTaskArena::RTaskArena(). : fTaskArena( new ROpaqueTaskArena() ) {}. [bash][Legolas]:build > more ../ROpaqueTaskArena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3173,usability,memor,memory,3173,"rena/test.cxx . // Local include(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:3819,usability,error,error,3819,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4046,usability,Error,Error,4046,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4128,usability,Error,Error,4128,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:4166,usability,Error,Error,4166,"clude(s). #include ""RTaskArena.hxx"". int main() {. RTaskArena arena;. return 0;. }. [bash][Legolas]:build > cmake ../ROpaqueTaskArena/. -- The CXX compiler identification is GNU 9.3.0. -- Check for working CXX compiler: /usr/bin/c++. -- Check for working CXX compiler: /usr/bin/c++ -- works. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Configuring done. -- Generating done. -- Build files have been written to: /home/krasznaa/development/ropaquetaskarena/build. [bash][Legolas]:build > make. Scanning dependencies of target TaskArenaLib. [ 25%] Building CXX object CMakeFiles/TaskArenaLib.dir/RTaskArena.cxx.o. [ 50%] Linking CXX shared library libTaskArenaLib.so. [ 50%] Built target TaskArenaLib. Scanning dependencies of target TaskArenaTest. [ 75%] Building CXX object CMakeFiles/TaskArenaTest.dir/test.cxx.o. In file included from /usr/include/c++/9/memory:80,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:5,. from /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/test.cxx:3:. /usr/include/c++/9/bits/unique_ptr.h: In instantiation of ‘void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = ROpaqueTaskArena]’:. /usr/include/c++/9/bits/unique_ptr.h:292:17: required from ‘std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = ROpaqueTaskArena; _Dp = std::default_delete<ROpaqueTaskArena>]’. /home/krasznaa/development/ropaquetaskarena/ROpaqueTaskArena/RTaskArena.hxx:10:7: required from here. /usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘ROpaqueTaskArena’. 79 | static_assert(sizeof(_Tp)>0,. | ^~~~~~~~~~~. make[2]: *** [CMakeFiles/TaskArenaTest.dir/build.make:63: CMakeFiles/TaskArenaTest.dir/test.cxx.o] Error 1. make[1]: *** [CMakeFiles/Makefile2:78: CMakeFiles/TaskArenaTest.dir/all] Error 2. make: *** [Makefile:84: all] Error 2. [bash][Legolas]:build >. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:126,availability,avail,available,126,"One just needs to move the places where `unique_ptr` needs to have the definitions (c'tors, d'tor) to where the definition is available. As as you can guess by looking at the *fwd* decl of `task_arena` that was already the case before. Have more trust in us, @krasznaa ! ;-). (Your example is missing the move ctors and dtor: they need to be defined in the source, too.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:126,reliability,availab,available,126,"One just needs to move the places where `unique_ptr` needs to have the definitions (c'tors, d'tor) to where the definition is available. As as you can guess by looking at the *fwd* decl of `task_arena` that was already the case before. Have more trust in us, @krasznaa ! ;-). (Your example is missing the move ctors and dtor: they need to be defined in the source, too.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:126,safety,avail,available,126,"One just needs to move the places where `unique_ptr` needs to have the definitions (c'tors, d'tor) to where the definition is available. As as you can guess by looking at the *fwd* decl of `task_arena` that was already the case before. Have more trust in us, @krasznaa ! ;-). (Your example is missing the move ctors and dtor: they need to be defined in the source, too.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:126,security,availab,available,126,"One just needs to move the places where `unique_ptr` needs to have the definitions (c'tors, d'tor) to where the definition is available. As as you can guess by looking at the *fwd* decl of `task_arena` that was already the case before. Have more trust in us, @krasznaa ! ;-). (Your example is missing the move ctors and dtor: they need to be defined in the source, too.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:246,security,trust,trust,246,"One just needs to move the places where `unique_ptr` needs to have the definitions (c'tors, d'tor) to where the definition is available. As as you can guess by looking at the *fwd* decl of `task_arena` that was already the case before. Have more trust in us, @krasznaa ! ;-). (Your example is missing the move ctors and dtor: they need to be defined in the source, too.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:171,integrability,pub,public,171,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:475,modifiability,maintain,maintain,475,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:156,reliability,doe,doesn,156,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:435,safety,avoid,avoid,435,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:475,safety,maintain,maintain,475,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:213,usability,custom,custom,213,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:341,usability,custom,custom,341,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:369,deployability,continu,continues,369,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:401,deployability,manag,management,401,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:401,energy efficiency,manag,management,401,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:382,integrability,encapsulat,encapsulate,382,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:382,modifiability,encapsul,encapsulate,382,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:394,performance,memor,memory,394,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:505,performance,time,time,505,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:124,safety,avoid,avoid,124,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:401,safety,manag,management,401,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:30,usability,custom,custom,30,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:394,usability,memor,memory,394,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/pull/7062:493,usability,person,person,493,"> If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. That needs some more arguments to become convincing; the mere requirement of putting `MyClass::~MyClass() = default` into the source file is not convincing me yet that the use of `unique_ptr` is ""not a good fit"". It continues to encapsulate memory management just fine, which is what `unique_ptr` was invented for. Happy to discuss that in person next time we meet at a coffee break ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7062
https://github.com/root-project/root/issues/7063:1063,availability,sli,slightly,1063,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:234,deployability,build,build,234,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:263,deployability,integr,integration,263,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:334,deployability,integr,integration,334,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:441,deployability,integr,integration,441,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:600,deployability,version,versions,600,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:790,deployability,integr,integration-of-binary-packages,790,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:854,deployability,integr,integration,854,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1031,deployability,integr,integration,1031,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:263,integrability,integr,integration,263,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:334,integrability,integr,integration,334,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:441,integrability,integr,integration,441,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:600,integrability,version,versions,600,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:790,integrability,integr,integration-of-binary-packages,790,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:854,integrability,integr,integration,854,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1031,integrability,integr,integration,1031,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:263,interoperability,integr,integration,263,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:334,interoperability,integr,integration,334,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:441,interoperability,integr,integration,441,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:586,interoperability,distribut,distributions,586,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:790,interoperability,integr,integration-of-binary-packages,790,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:854,interoperability,integr,integration,854,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1031,interoperability,integr,integration,1031,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:263,modifiability,integr,integration,263,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:334,modifiability,integr,integration,334,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:441,modifiability,integr,integration,441,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:567,modifiability,pac,packages,567,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:600,modifiability,version,versions,600,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:685,modifiability,variab,variable,685,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:790,modifiability,integr,integration-of-binary-packages,790,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:854,modifiability,integr,integration,854,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1023,modifiability,pac,package-integration,1023,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:263,reliability,integr,integration,263,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:334,reliability,integr,integration,334,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:441,reliability,integr,integration,441,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:790,reliability,integr,integration-of-binary-packages,790,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:854,reliability,integr,integration,854,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1031,reliability,integr,integration,1031,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1063,reliability,sli,slightly,1063,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:263,security,integr,integration,263,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:334,security,integr,integration,334,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:441,security,integr,integration,441,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:790,security,integr,integration-of-binary-packages,790,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:854,security,integr,integration,854,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1031,security,integr,integration,1031,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:263,testability,integr,integration,263,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:334,testability,integr,integration,334,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:441,testability,integr,integration,441,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:790,testability,integr,integration-of-binary-packages,790,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:854,testability,integr,integration,854,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1031,testability,integr,integration,1031,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:138,usability,help,help,138,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:179,usability,confirm,confirm,179,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:417,usability,user,user,417,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:472,usability,user,user,472,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:519,usability,support,supported,519,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:882,usability,support,supported,882,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:1108,usability,prefer,preferable,1108,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation. I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:. 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project. 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:5,energy efficiency,current,current,5,"BTW, current FindTBB can't handle oneTBB under spack: https://github.com/spack/spack/issues/22616#issuecomment-811374256",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:212,deployability,build,build,212,"> I ... can help with it from TBB side. Awesome, thanks, much appreciated! We need to offer `find_package`, and - if no external package is found or if configured to use builtin tbb - pull tbb from somewhere and build it as part of ROOT (""builtin""). @oshadura will correct me / add to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:152,integrability,configur,configured,152,"> I ... can help with it from TBB side. Awesome, thanks, much appreciated! We need to offer `find_package`, and - if no external package is found or if configured to use builtin tbb - pull tbb from somewhere and build it as part of ROOT (""builtin""). @oshadura will correct me / add to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:129,modifiability,pac,package,129,"> I ... can help with it from TBB side. Awesome, thanks, much appreciated! We need to offer `find_package`, and - if no external package is found or if configured to use builtin tbb - pull tbb from somewhere and build it as part of ROOT (""builtin""). @oshadura will correct me / add to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:152,modifiability,configur,configured,152,"> I ... can help with it from TBB side. Awesome, thanks, much appreciated! We need to offer `find_package`, and - if no external package is found or if configured to use builtin tbb - pull tbb from somewhere and build it as part of ROOT (""builtin""). @oshadura will correct me / add to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:152,security,configur,configured,152,"> I ... can help with it from TBB side. Awesome, thanks, much appreciated! We need to offer `find_package`, and - if no external package is found or if configured to use builtin tbb - pull tbb from somewhere and build it as part of ROOT (""builtin""). @oshadura will correct me / add to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:12,usability,help,help,12,"> I ... can help with it from TBB side. Awesome, thanks, much appreciated! We need to offer `find_package`, and - if no external package is found or if configured to use builtin tbb - pull tbb from somewhere and build it as part of ROOT (""builtin""). @oshadura will correct me / add to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/issues/7063:56,deployability,build,build,56,"Thanks to @dpiparo, we are not using the Makefile-based build anymore in the tbb builtin! * https://github.com/root-project/root/pull/13724. Danilo also backported this to 6.28, so I also added the `Fixed in 6.28/08`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7063
https://github.com/root-project/root/pull/7064:0,availability,Failur,Failures,0,"Failures are pre-existing and I'd love to get the M1 build green - so: merging! Thanks, @amadio !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7064
https://github.com/root-project/root/pull/7064:0,deployability,Fail,Failures,0,"Failures are pre-existing and I'd love to get the M1 build green - so: merging! Thanks, @amadio !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7064
https://github.com/root-project/root/pull/7064:53,deployability,build,build,53,"Failures are pre-existing and I'd love to get the M1 build green - so: merging! Thanks, @amadio !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7064
https://github.com/root-project/root/pull/7064:59,energy efficiency,green,green,59,"Failures are pre-existing and I'd love to get the M1 build green - so: merging! Thanks, @amadio !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7064
https://github.com/root-project/root/pull/7064:0,performance,Failur,Failures,0,"Failures are pre-existing and I'd love to get the M1 build green - so: merging! Thanks, @amadio !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7064
https://github.com/root-project/root/pull/7064:0,reliability,Fail,Failures,0,"Failures are pre-existing and I'd love to get the M1 build green - so: merging! Thanks, @amadio !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7064
https://github.com/root-project/root/pull/7068:13,deployability,updat,update,13,Can you also update the release and include there a summary of the specification?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:24,deployability,releas,release,24,Can you also update the release and include there a summary of the specification?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:67,interoperability,specif,specification,67,Can you also update the release and include there a summary of the specification?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:13,safety,updat,update,13,Can you also update the release and include there a summary of the specification?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:13,security,updat,update,13,Can you also update the release and include there a summary of the specification?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:94,availability,ping,ping,94,> Can you also update the release and include there a summary of the specification? @oshadura ping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:15,deployability,updat,update,15,> Can you also update the release and include there a summary of the specification? @oshadura ping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:26,deployability,releas,release,26,> Can you also update the release and include there a summary of the specification? @oshadura ping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:69,interoperability,specif,specification,69,> Can you also update the release and include there a summary of the specification? @oshadura ping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:15,safety,updat,update,15,> Can you also update the release and include there a summary of the specification? @oshadura ping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:15,security,updat,update,15,> Can you also update the release and include there a summary of the specification? @oshadura ping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:26,availability,failur,failures,26,@oshadura - are the build failures above related to the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:20,deployability,build,build,20,@oshadura - are the build failures above related to the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:26,deployability,fail,failures,26,@oshadura - are the build failures above related to the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:26,performance,failur,failures,26,@oshadura - are the build failures above related to the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:26,reliability,fail,failures,26,@oshadura - are the build failures above related to the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7068:8,availability,ping,ping,8,@pcanal ping.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7068
https://github.com/root-project/root/pull/7069:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7069
https://github.com/root-project/root/pull/7069:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7069
https://github.com/root-project/root/pull/7069:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7069
https://github.com/root-project/root/pull/7069:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7069
https://github.com/root-project/root/pull/7070:157,availability,servic,services,157,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:355,availability,servic,services,355,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:605,availability,servic,services,605,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:2,deployability,Build,Build,2,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:8,deployability,fail,failed,8,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:78,deployability,build,build,78,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:112,deployability,build,build,112,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:157,deployability,servic,services,157,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:209,deployability,build,build,209,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:238,deployability,Fail,Failing,238,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:355,deployability,servic,services,355,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:407,deployability,build,build,407,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:605,deployability,servic,services,605,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:657,deployability,build,build,657,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:157,integrability,servic,services,157,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:355,integrability,servic,services,355,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:605,integrability,servic,services,605,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:157,modifiability,servic,services,157,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:355,modifiability,servic,services,355,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:605,modifiability,servic,services,605,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:8,reliability,fail,failed,8,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:238,reliability,Fail,Failing,238,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:246,safety,test,tests,246,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:420,safety,test,testReport,420,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:670,safety,test,testReport,670,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:246,testability,test,tests,246,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:420,testability,test,testReport,420,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:670,testability,test,testReport,670,> Build failed on ROOT-fedora31/noimt. > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > ### Failing tests:. > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > . > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). Maybe `src/TExecutor.cxx` should be added also in the noimt case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:163,availability,servic,services,163,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:367,availability,servic,services,367,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:621,availability,servic,services,621,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:4,deployability,Build,Build,4,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:10,deployability,fail,failed,10,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:82,deployability,build,build,82,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:116,deployability,build,build,116,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:163,deployability,servic,services,163,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:215,deployability,build,build,215,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:246,deployability,Fail,Failing,246,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:367,deployability,servic,services,367,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:419,deployability,build,build,419,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:621,deployability,servic,services,621,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:673,deployability,build,build,673,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:163,integrability,servic,services,163,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:367,integrability,servic,services,367,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:621,integrability,servic,services,621,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:163,modifiability,servic,services,163,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:367,modifiability,servic,services,367,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:621,modifiability,servic,services,621,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:10,reliability,fail,failed,10,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:246,reliability,Fail,Failing,246,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:254,safety,test,tests,254,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:432,safety,test,testReport,432,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:686,safety,test,testReport,686,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:254,testability,test,tests,254,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:432,testability,test,testReport,432,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7070:686,testability,test,testReport,686,"> > Build failed on ROOT-fedora31/noimt. > > Running on root-fedora-31-1.cern.ch:/build/workspace/root-pullrequests-build. > > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/console). > > ### Failing tests:. > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor_build/). > > . > > * [projectroot.roottest.root.multicore.roottest_root_multicore_tExecutor](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/105087/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tExecutor/). > . > Maybe `src/TExecutor.cxx` should be added also in the noimt case? You are correct, sir",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7070
https://github.com/root-project/root/pull/7071:29,safety,test,tests,29,"Thanks @stwunsch ! About the tests, yes, I will add tests for this and https://github.com/root-project/root/pull/7072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7071
https://github.com/root-project/root/pull/7071:52,safety,test,tests,52,"Thanks @stwunsch ! About the tests, yes, I will add tests for this and https://github.com/root-project/root/pull/7072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7071
https://github.com/root-project/root/pull/7071:29,testability,test,tests,29,"Thanks @stwunsch ! About the tests, yes, I will add tests for this and https://github.com/root-project/root/pull/7072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7071
https://github.com/root-project/root/pull/7071:52,testability,test,tests,52,"Thanks @stwunsch ! About the tests, yes, I will add tests for this and https://github.com/root-project/root/pull/7072",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7071
https://github.com/root-project/root/pull/7073:11,deployability,build,build,11,@phsft-bot build just on mac11.0/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7073
https://github.com/root-project/root/pull/7073:14,availability,error,error,14,"Note that the error on ""mac11.0/cxx17"" is unrelated but reproducible (1 out 10 runs).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7073
https://github.com/root-project/root/pull/7073:14,performance,error,error,14,"Note that the error on ""mac11.0/cxx17"" is unrelated but reproducible (1 out 10 runs).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7073
https://github.com/root-project/root/pull/7073:14,safety,error,error,14,"Note that the error on ""mac11.0/cxx17"" is unrelated but reproducible (1 out 10 runs).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7073
https://github.com/root-project/root/pull/7073:14,usability,error,error,14,"Note that the error on ""mac11.0/cxx17"" is unrelated but reproducible (1 out 10 runs).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7073
https://github.com/root-project/root/pull/7075:55,integrability,rout,routine,55,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:98,integrability,inject,injected,98,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:98,security,inject,injected,98,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:207,testability,simpl,simple,207,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:144,usability,close,closed,144,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:207,usability,simpl,simple,207,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:57,integrability,rout,routine,57,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:100,integrability,inject,injected,100,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:310,modifiability,paramet,parameter,310,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:100,security,inject,injected,100,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:209,testability,simpl,simple,209,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:146,usability,close,closed,146,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:209,usability,simpl,simple,209,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:339,usability,effectiv,effectively,339,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:351,usability,undo,undocumented,351,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:458,usability,close,close,458,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:323,availability,consist,consistent,323,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:334,availability,state,state,334,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:758,availability,state,state,758,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:773,availability,restor,restored,773,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:787,availability,consist,consistent,787,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:798,availability,state,state,798,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:334,integrability,state,state,334,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:758,integrability,state,state,758,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:798,integrability,state,state,798,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:361,performance,time,time,361,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:413,performance,lock,locked,413,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:463,performance,memor,memory,463,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:567,performance,lock,locks,567,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:1034,performance,time,time,1034,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:773,reliability,restor,restored,773,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:808,reliability,pra,practice,808,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:861,reliability,pra,practicable,861,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:985,safety,safe,safe,985,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:1012,safety,safe,safety,1012,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:413,security,lock,locked,413,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:567,security,lock,locks,567,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:978,security,sign,signal-safe,978,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:1005,security,sign,signal-safety,1005,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:323,usability,consist,consistent,323,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:452,usability,user,user-space,452,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:463,usability,memor,memory,463,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:787,usability,consist,consistent,787,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable. > . > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:64,availability,failur,failure,64,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:152,availability,down,down,152,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:64,deployability,fail,failure,64,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:200,deployability,resourc,resources,200,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:200,energy efficiency,resourc,resources,200,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:64,performance,failur,failure,64,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:96,performance,lock,locks,96,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:195,performance,lock,lock,195,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:200,performance,resourc,resources,200,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:64,reliability,fail,failure,64,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:200,safety,resourc,resources,200,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:460,safety,compl,complete,460,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:96,security,lock,locks,96,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:195,security,lock,lock,195,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:460,security,compl,complete,460,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:469,security,control,control,469,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:200,testability,resourc,resources,200,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:469,testability,control,control,469,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:399,usability,close,close,399,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:523,usability,user,user,523,"So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > However, I'm not sure if we need to close TFiles because the workers don't open them. Do we have complete control over what the child process executes (i.e. no user code whatsoever?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:66,availability,failur,failure,66,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:154,availability,down,down,154,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:66,deployability,fail,failure,66,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:202,deployability,resourc,resources,202,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:202,energy efficiency,resourc,resources,202,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:822,energy efficiency,Reduc,Reduce,822,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:66,performance,failur,failure,66,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:98,performance,lock,locks,98,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:197,performance,lock,lock,197,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:202,performance,resourc,resources,202,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:66,reliability,fail,failure,66,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:202,safety,resourc,resources,202,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:650,safety,compl,complete,650,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:98,security,lock,locks,98,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:197,security,lock,lock,197,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:650,security,compl,complete,650,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:659,security,control,control,659,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:202,testability,resourc,resources,202,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:290,testability,understand,understanding,290,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:659,testability,control,control,659,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:843,testability,understand,understand,843,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:583,usability,close,close,583,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:713,usability,user,user,713,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:754,usability,user,user,754,"> So we do have a real problem but where I am confused is ""if our failure case is due to unlocked locks in the child process"" why is it seen only at tear down? I.e. would the very first use of the lock resources be already held back. Yes, any of the libraries might block if called. And my understanding is (see below) that it's only their `atexit` handlers that get us into trouble, at least for sane code. > If using `_exit` is the workaround (solution?) then this means that no cleanup can be executed (even-though it might be needed). > . > > However, I'm not sure if we need to close TFiles because the workers don't open them. > . > Do we have complete control over what the child process executes (i.e. no user code whatsoever?). We are executing user code, but only what was passed in for `Map`, `MapReduce`, and `Reduce` (as far as I understand). Now they could do nasty things in there like opening more files... That said, I can give `gSystem->Exit(0, kFALSE)` a try to shutdown ROOT cleanly and then call `_exit(0)`, but I don't see a way to run `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:143,interoperability,specif,specific,143,What are I still trying to understand is whether it is really a property of the atexit (for that to be true it would need to be a lock that is specific to the atexit mechanism itself and/or of *only* the atexit callback used) or a more generic case that just happens to not happen *by chance* in our examples.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:130,performance,lock,lock,130,What are I still trying to understand is whether it is really a property of the atexit (for that to be true it would need to be a lock that is specific to the atexit mechanism itself and/or of *only* the atexit callback used) or a more generic case that just happens to not happen *by chance* in our examples.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:130,security,lock,lock,130,What are I still trying to understand is whether it is really a property of the atexit (for that to be true it would need to be a lock that is specific to the atexit mechanism itself and/or of *only* the atexit callback used) or a more generic case that just happens to not happen *by chance* in our examples.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:27,testability,understand,understand,27,What are I still trying to understand is whether it is really a property of the atexit (for that to be true it would need to be a lock that is specific to the atexit mechanism itself and/or of *only* the atexit callback used) or a more generic case that just happens to not happen *by chance* in our examples.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:47,deployability,fail,fails,47,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:39,performance,lock,locking,39,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:67,performance,lock,lock,67,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:109,performance,deadlock,deadlock,109,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:1097,performance,lock,lock,1097,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:47,reliability,fail,fails,47,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:39,security,lock,locking,39,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:67,security,lock,lock,67,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:1097,security,lock,lock,1097,"With the example below, I see that the locking fails *also* if the lock is taken outside of the atexit. The ""deadlock"" child is stuck at:. ```. (gdb) bt. #0 __lll_lock_wait (futex=futex@entry=0x55b728655040 <mutex>, private=0) at lowlevellock.c:52. #1 0x00007fe1a3a540a3 in __GI___pthread_mutex_lock (mutex=0x55b728655040 <mutex>) at ../nptl/pthread_mutex_lock.c:80. #2 0x000055b7286523ae in main () at fail02.cxx:41. ```. with the source file. ```. #include <pthread.h>. #include <stdio.h>. #include <stdlib.h>. #include <sys/wait.h>. #include <unistd.h>. static pthread_mutex_t mutex;. void *thread_start(void *arg) {. pthread_mutex_lock(&mutex);. // work... sleep(2);. pthread_mutex_unlock(&mutex);. return NULL;. }. void shutdown() {. pthread_mutex_lock(&mutex);. // shutdown... pthread_mutex_unlock(&mutex);. }. int main() {. pthread_mutex_init(&mutex, NULL);. atexit(&shutdown);. pthread_t thread;. pthread_create(&thread, NULL, &thread_start, NULL);. sleep(1);. pid_t pid = fork();. if (pid == -1) {. fputs(""could not fork!\n"", stderr);. exit(1);. }. if (pid == 0) {. // child. // Take the lock before doing anything. pthread_mutex_lock(&mutex);. // work... //sleep(2);. pthread_mutex_unlock(&mutex);. exit(0);. } else {. // parent. waitpid(pid, NULL, 0);. }. pthread_join(thread, NULL);. return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:133,performance,lock,locks,133,"I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:133,security,lock,locks,133,"I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:135,performance,lock,locks,135,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:373,performance,time,time,373,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:433,performance,lock,locks,433,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:582,performance,perform,performed,582,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:643,performance,lock,locks,643,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:324,safety,safe,safe,324,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:351,safety,safe,safety,351,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:626,safety,safe,safe,626,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:135,security,lock,locks,135,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:317,security,sign,signal-safe,317,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:344,security,sign,signal-safety,344,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:433,security,lock,locks,433,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:643,security,lock,locks,643,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:525,usability,interact,interacting,525,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:582,usability,perform,performed,582,"> I.e. it seems that we can not fork if any thread is doing anything else (because that something else might be taking any fundamental locks (malloc, ROOT, dlopen, etc...). Yep, which is why (as you quoted earlier):. > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program. ie, no locks and things like that. Now, we can guarantee for ROOT's own source code that we're not interacting with threads, in particular that the actions performed in the workers after `fork()` are safe, require no locks and don't result in calls to an external library. What we cannot guarantee is what libraries did before / during the `fork()` and what consequences this has for their `atexit` handlers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:367,availability,reliab,reliably,367,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:13,performance,lock,locks,13,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:88,performance,lock,locks,88,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:367,reliability,reliab,reliably,367,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:65,safety,safe,safety,65,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:225,safety,avoid,avoid,225,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:13,security,lock,locks,13,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:88,security,lock,locks,88,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:270,usability,user,user,270,"> require no locks and . For ROOT we can (try to) disable thread safety. > , require no locks and don't result in calls to an external library. . but that also technically (maybe) include malloc ... that one might be hard to avoid ... And it also preclude executing any user code in the workers .... > What we cannot guarantee .... Yes and because of that it can not reliably work (unless there is no active thread when we fork).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:453,availability,reliab,reliably,453,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:17,performance,lock,locks,17,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:284,reliability,doe,doesn,284,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:453,reliability,reliab,reliably,453,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:158,safety,avoid,avoid,158,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:203,safety,safe,safe,203,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:530,safety,safe,safe,530,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:689,safety,input,input,689,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:17,security,lock,locks,17,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:196,security,sign,signal-safe,196,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:344,usability,user,user,344,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:689,usability,input,input,689,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:708,usability,user,user-provided,708,"> > , require no locks and don't result in calls to an external library. > . > but that also technically (maybe) include malloc ... that one might be hard to avoid ... True, `malloc` is not async-signal-safe. I haven't been able to race calls of `malloc()` against `fork()`, but that doesn't mean anything. > And it also preclude executing any user code in the workers .... > . > > What we cannot guarantee .... > . > Yes and because of that it can not reliably work (unless there is no active thread when we fork). So to play it safe, we would need to remove `TProcessExecutor` or come up with a scheme that calls `exec`. However that one replaces the entire process image, including the input data and the user-provided function...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:258,energy efficiency,charg,charge,258,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:92,performance,multi-thread,multi-thread,92,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:200,performance,multi-thread,multi-thread,200,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:293,performance,multi-thread,multi-threaded,293,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:371,performance,multi-thread,multi-thread,371,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:493,performance,memor,memory-cloning,493,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:324,testability,understand,understand,324,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:245,usability,user,users,245,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:493,usability,memor,memory-cloning,493,"> we would need to remove TProcessExecutor. It has always been the case that forking from a multi-thread program is dangerous/broken. Usage of `TProcessExecutor` is fine as long as the program is not multi-thread. On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. I don't understand whether Mac makes your applications multi-thread with no warning or not. (We don't want to call `exec`, we really want to take advantage of the copy-on-write memory-cloning of `fork`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:46,energy efficiency,charg,charge,46,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:81,performance,multi-thread,multi-threaded,81,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:269,performance,multi-thread,multi-thread,269,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:148,safety,test,test,148,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:148,testability,test,test,148,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:222,testability,understand,understand,222,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:309,testability,understand,understanding,309,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:33,usability,user,users,33,"> On Linux, that's totally fine, users are in charge of whether their program is multi-threaded or not. Okay, then we should change the `tExecutor` test to make sure that all threads are joined before `fork`ing. > I don't understand whether Mac makes your applications multi-thread with no warning or not. My understanding is that yes, `com.apple.NSEventThread` is always started. Who's our Mac expert, @Axel-Naumann ? If that's the case, should we disable `TProcessExecutor` on Mac?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:53,availability,failur,failures,53,Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:53,deployability,fail,failures,53,Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:53,performance,failur,failures,53,Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:53,reliability,fail,failures,53,Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:127,usability,prefer,prefer,127,Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:55,availability,failur,failures,55,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:55,deployability,fail,failures,55,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:257,deployability,fail,fails,257,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:293,deployability,resourc,resource,293,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:346,deployability,fail,failing,346,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:293,energy efficiency,resourc,resource,293,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:55,performance,failur,failures,55,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:293,performance,resourc,resource,293,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:302,performance,content,contention,302,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:369,performance,time,time,369,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:55,reliability,fail,failures,55,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:257,reliability,fail,fails,257,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:346,reliability,fail,failing,346,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:293,safety,resourc,resource,293,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:293,testability,resourc,resource,293,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:129,usability,prefer,prefer,129,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:225,usability,help,help,225,"> Can we first try with joining? We only see multiproc failures on Macs since very recently - before disabling it altogether I'd prefer to give your fix a try. Ok, I'll prepare a PR for `roottest`. However, joining will only help for `tExecutor` which also fails on Linux (esp. `i386`, due to resource contention I suppose). `processExecutor` is failing since a longer time, https://github.com/root-project/root/pull/6800#issuecomment-726714882 is also on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:192,energy efficiency,current,current,192,"> Ok, I'll prepare a PR for `roottest`. No, doesn't work as I had hoped: When the global `RTaskArenaWrapper` gets destroyed, taking `fTBBArena` with it, the worker threads stay around. In the current implementation, there seems no way to go back to single-threaded after using `TThreadExecutor` once. It's possible that TBB has functions to join the threads, but I'm no expert here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:44,reliability,doe,doesn,44,"> Ok, I'll prepare a PR for `roottest`. No, doesn't work as I had hoped: When the global `RTaskArenaWrapper` gets destroyed, taking `fTBBArena` with it, the worker threads stay around. In the current implementation, there seems no way to go back to single-threaded after using `TThreadExecutor` once. It's possible that TBB has functions to join the threads, but I'm no expert here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:24,safety,test,test,24,"We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. The issue remains with MacOS spawning threads on its own...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:24,testability,test,test,24,"We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. The issue remains with MacOS spawning threads on its own...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:307,availability,sli,slightest,307,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:394,integrability,sub,subtle,394,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:307,reliability,sli,slightest,307,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:402,reliability,doe,doesn,402,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:26,safety,test,test,26,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:216,safety,test,tests,216,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:26,testability,test,test,26,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:216,testability,test,tests,216,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:249,usability,user,users,249,"> We can always split the test in two, one part that runs multiple threads, the other that runs multiple processes. > The issue remains with MacOS spawning threads on its own... Sure, that solves the problem for our tests. But how likely is it that users will attempt something similar? If there's only the slightest chance, that's not a trap that we should leave around IMHO. The issue is too subtle, doesn't happen on every execution and this makes it very hard to debug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:64,performance,multi-thread,multi-threaded,64,"Talking about Linux, where the OS doesn't make your application multi-threaded under your feet: `fork`ing a multi-thread program is bad, that's always been the case. We can and should warn users in the docs, but apart from that I'm not sure what we can do?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:108,performance,multi-thread,multi-thread,108,"Talking about Linux, where the OS doesn't make your application multi-threaded under your feet: `fork`ing a multi-thread program is bad, that's always been the case. We can and should warn users in the docs, but apart from that I'm not sure what we can do?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:34,reliability,doe,doesn,34,"Talking about Linux, where the OS doesn't make your application multi-threaded under your feet: `fork`ing a multi-thread program is bad, that's always been the case. We can and should warn users in the docs, but apart from that I'm not sure what we can do?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:189,usability,user,users,189,"Talking about Linux, where the OS doesn't make your application multi-threaded under your feet: `fork`ing a multi-thread program is bad, that's always been the case. We can and should warn users in the docs, but apart from that I'm not sure what we can do?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/pull/7075:86,performance,multi-thread,multi-threaded,86,"As discussed, this is still not enough to fully protect against all possible cases in multi-threaded programs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7075
https://github.com/root-project/root/issues/7076:15,reliability,fTa,fTaskScheduler,15,It seems that `fTaskScheduler` is set to nullptr only at:. ```. ROOT::Experimental::RNTupleReader::~RNTupleReader(). ```. and thus it seems that the solution is either. * Wait for the unzip thread to finish before setting the pointer to `nullptr`. or. * Check for `nullptr` at `RPageStorageFile.cxx:652:`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7076
https://github.com/root-project/root/pull/7078:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7078:24,deployability,fail,failed,24,"```. 18:32:26 Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 71. ```. Looks like it's still broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7078:100,deployability,build,build,100,"```. 18:32:26 Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 71. ```. Looks like it's still broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7078:134,deployability,build,build,134,"```. 18:32:26 Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 71. ```. Looks like it's still broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7078:24,reliability,fail,failed,24,"```. 18:32:26 Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 71. ```. Looks like it's still broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7078:14,testability,Assert,Assertion,14,"```. 18:32:26 Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 71. ```. Looks like it's still broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7078:166,usability,tool,tools,166,"```. 18:32:26 Assertion failed: !CurTokenLexer && ""Cannot #include a file inside a macro!"", file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Lex\PPLexerChange.cpp, line 71. ```. Looks like it's still broken.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7078:6,usability,close,close,6,Let's close this now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7078
https://github.com/root-project/root/pull/7079:267,energy efficiency,reduc,reduction,267,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:210,modifiability,paramet,parameter,210,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:292,modifiability,interm,intermediate,292,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:165,safety,input,inputs,165,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:407,safety,input,input,407,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:330,security,polic,policy,330,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:165,usability,input,inputs,165,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:228,usability,document,documented,228,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:407,usability,input,input,407,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7079:450,usability,document,documentation,450,"It fixes a missing friendship with TThreadExecutor, the one with TExecutorCRTP is still necessary. On the chunking. Yes, you are correct. It is convenient for large inputs. The functions that take nChunks as a parameter have it documented with ""Benefits from partial reduction into `nChunks` intermediate results if the execution policy is multithreaded."" and "" \param nChunks Number of chunks to split the input data for processing."". I can improve documentation in another PR if you think it's necessary. I'm merging this one to advance on the other one :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7079
https://github.com/root-project/root/pull/7080:35,safety,test,test,35,The last commits include the whole test suite.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7080
https://github.com/root-project/root/pull/7080:35,testability,test,test,35,The last commits include the whole test suite.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7080
https://github.com/root-project/root/issues/7081:39,deployability,build,build,39,@Axel-Naumann you source `. /home/axel/build/root/master/deb/bin/thisroot.sh` and `ROOTSYS:INTERNAL=/home/axel/build/root/master/deb` in roottest is as expected. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:111,deployability,build,build,111,@Axel-Naumann you source `. /home/axel/build/root/master/deb/bin/thisroot.sh` and `ROOTSYS:INTERNAL=/home/axel/build/root/master/deb` in roottest is as expected. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:16,deployability,build,build,16,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:56,deployability,build,build,56,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:103,deployability,build,build,103,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:162,deployability,build,build,162,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:264,deployability,build,build,264,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:93,safety,test,test,93,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:178,safety,test,tests,178,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:235,safety,test,test,235,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:297,safety,test,tests,297,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:93,testability,test,test,93,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:178,testability,test,tests,178,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:235,testability,test,test,235,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:297,testability,test,tests,297,"Well yes - if I build `1/` and enable roottest for that build I'd expect that roottest would test that build, no? I think that's a fairly common thing to ""have a build of X with tests enabled"" - and if I do that I don't expect that to test something else than the build for which I'm enabling the tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:164,deployability,build,build,164,"I was hit by this two more times since I opened this (as I now know I have to check for this). My teminal sessions are long-lived; I debug an issue (with some ROOT build), then I need to build ROOT from scratch - and now that ROOT build is not testing itself. That's really really terrible :-/ Can we *please* have this fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:187,deployability,build,build,187,"I was hit by this two more times since I opened this (as I now know I have to check for this). My teminal sessions are long-lived; I debug an issue (with some ROOT build), then I need to build ROOT from scratch - and now that ROOT build is not testing itself. That's really really terrible :-/ Can we *please* have this fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:231,deployability,build,build,231,"I was hit by this two more times since I opened this (as I now know I have to check for this). My teminal sessions are long-lived; I debug an issue (with some ROOT build), then I need to build ROOT from scratch - and now that ROOT build is not testing itself. That's really really terrible :-/ Can we *please* have this fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:27,performance,time,times,27,"I was hit by this two more times since I opened this (as I now know I have to check for this). My teminal sessions are long-lived; I debug an issue (with some ROOT build), then I need to build ROOT from scratch - and now that ROOT build is not testing itself. That's really really terrible :-/ Can we *please* have this fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:244,safety,test,testing,244,"I was hit by this two more times since I opened this (as I now know I have to check for this). My teminal sessions are long-lived; I debug an issue (with some ROOT build), then I need to build ROOT from scratch - and now that ROOT build is not testing itself. That's really really terrible :-/ Can we *please* have this fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:106,security,session,sessions,106,"I was hit by this two more times since I opened this (as I now know I have to check for this). My teminal sessions are long-lived; I debug an issue (with some ROOT build), then I need to build ROOT from scratch - and now that ROOT build is not testing itself. That's really really terrible :-/ Can we *please* have this fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/issues/7081:244,testability,test,testing,244,"I was hit by this two more times since I opened this (as I now know I have to check for this). My teminal sessions are long-lived; I debug an issue (with some ROOT build), then I need to build ROOT from scratch - and now that ROOT build is not testing itself. That's really really terrible :-/ Can we *please* have this fixed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7081
https://github.com/root-project/root/pull/7082:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora31/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7082
https://github.com/root-project/root/pull/7082:4,availability,error,error,4,"The error in ""ROOT-fedora31/noimt."" as transient (likely full disk or similar).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7082
https://github.com/root-project/root/pull/7082:4,performance,error,error,4,"The error in ""ROOT-fedora31/noimt."" as transient (likely full disk or similar).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7082
https://github.com/root-project/root/pull/7082:62,performance,disk,disk,62,"The error in ""ROOT-fedora31/noimt."" as transient (likely full disk or similar).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7082
https://github.com/root-project/root/pull/7082:4,safety,error,error,4,"The error in ""ROOT-fedora31/noimt."" as transient (likely full disk or similar).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7082
https://github.com/root-project/root/pull/7082:4,usability,error,error,4,"The error in ""ROOT-fedora31/noimt."" as transient (likely full disk or similar).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7082
https://github.com/root-project/root/pull/7083:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/pull/7083:4,availability,failur,failure,4,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/pull/7083:4,deployability,fail,failure,4,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/pull/7083:41,deployability,fail,failing,41,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/pull/7083:52,deployability,build,build,52,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/pull/7083:4,performance,failur,failure,4,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/pull/7083:4,reliability,fail,failure,4,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/pull/7083:41,reliability,fail,failing,41,The failure is unrelated (builtin xrootd failing to build).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7083
https://github.com/root-project/root/issues/7084:33,availability,error,error,33,"Hi Andrzej,. I think throwing an error is ok, we don't want to create an output where some branches have less entries than others or something like that. In the future we would like to introduce the possibility to specify something like ""if this branch is not there, use this default value instead"" but it's a bit tricky, `TChain` and `TTreeReader` (which RDF uses under the hood) are not really built for this case. A workaround of course is to do a first pass over the files and use `df.GetColumnNames()` to separate the files with all branches from the ones where some branches are missing, and process the ""weird"" files separately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7084
https://github.com/root-project/root/issues/7084:214,interoperability,specif,specify,214,"Hi Andrzej,. I think throwing an error is ok, we don't want to create an output where some branches have less entries than others or something like that. In the future we would like to introduce the possibility to specify something like ""if this branch is not there, use this default value instead"" but it's a bit tricky, `TChain` and `TTreeReader` (which RDF uses under the hood) are not really built for this case. A workaround of course is to do a first pass over the files and use `df.GetColumnNames()` to separate the files with all branches from the ones where some branches are missing, and process the ""weird"" files separately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7084
https://github.com/root-project/root/issues/7084:33,performance,error,error,33,"Hi Andrzej,. I think throwing an error is ok, we don't want to create an output where some branches have less entries than others or something like that. In the future we would like to introduce the possibility to specify something like ""if this branch is not there, use this default value instead"" but it's a bit tricky, `TChain` and `TTreeReader` (which RDF uses under the hood) are not really built for this case. A workaround of course is to do a first pass over the files and use `df.GetColumnNames()` to separate the files with all branches from the ones where some branches are missing, and process the ""weird"" files separately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7084
https://github.com/root-project/root/issues/7084:33,safety,error,error,33,"Hi Andrzej,. I think throwing an error is ok, we don't want to create an output where some branches have less entries than others or something like that. In the future we would like to introduce the possibility to specify something like ""if this branch is not there, use this default value instead"" but it's a bit tricky, `TChain` and `TTreeReader` (which RDF uses under the hood) are not really built for this case. A workaround of course is to do a first pass over the files and use `df.GetColumnNames()` to separate the files with all branches from the ones where some branches are missing, and process the ""weird"" files separately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7084
https://github.com/root-project/root/issues/7084:33,usability,error,error,33,"Hi Andrzej,. I think throwing an error is ok, we don't want to create an output where some branches have less entries than others or something like that. In the future we would like to introduce the possibility to specify something like ""if this branch is not there, use this default value instead"" but it's a bit tricky, `TChain` and `TTreeReader` (which RDF uses under the hood) are not really built for this case. A workaround of course is to do a first pass over the files and use `df.GetColumnNames()` to separate the files with all branches from the ones where some branches are missing, and process the ""weird"" files separately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7084
https://github.com/root-project/root/pull/7085:57,deployability,fail,failing,57,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:180,performance,time,time,180,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:57,reliability,fail,failing,57,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:42,safety,test,tests,42,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:225,safety,compl,completly,225,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:225,security,compl,completly,225,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:42,testability,test,tests,42,"@HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. . Without ae9f8ae I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:59,deployability,fail,failing,59,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:274,performance,time,time,274,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:59,reliability,fail,failing,59,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:44,safety,test,tests,44,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:319,safety,compl,completly,319,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:658,safety,test,tests,658,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:773,safety,test,tests,773,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:319,security,compl,completly,319,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:44,testability,test,tests,44,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:658,testability,test,tests,658,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:773,testability,test,tests,773,"> @HDembinski : can you provide some of the tests that are failing. I 'll be happy to include them in ROOT. > . > Without [ae9f8ae](https://github.com/root-project/root/commit/ae9f8ae62553f9150fdee1f8739be6996d539694) I see instead many fit not converging or talking a long time to converge because the initial seed is completly off when not using the numerical gradient. With analytical gradient only the first derivatives are provided, and the seed is computed using only step sizes that oftern are not correct. By using the numerical gradient at the beginning one can compute second derivatives and correct step sizes. Right, I also noticed that this. My tests are in Python, we would have to rewrite these in C++ to add them, but it would certainly be good to add more tests upstream in ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:134,availability,fault,faulty,134,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:33,deployability,patch,patch,33,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:81,deployability,fail,failed,81,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:186,deployability,fail,failed,186,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:134,energy efficiency,fault,faulty,134,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:134,performance,fault,faulty,134,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:81,reliability,fail,failed,81,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:134,reliability,fault,faulty,134,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:186,reliability,fail,failed,186,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:33,safety,patch,patch,33,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:70,safety,test,tests,70,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:134,safety,fault,faulty,134,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:141,safety,test,test,141,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:151,safety,accid,accidentally,151,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:271,safety,test,tests,271,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:33,security,patch,patch,33,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:70,testability,test,tests,70,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:141,testability,test,test,141,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:271,testability,test,tests,271,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7085:293,usability,minim,minimum,293,"@lmoneta I am closing this, your patch is perfectly fine. The iminuit tests that failed were all spurious. One of them was actually a faulty test that accidentally passed so far. Others failed merely because the gradient function is now called only later. I started some tests directly at the minimum of a function and then the fit converged on the seed already so that the gradient was never called at all. That is not a problem with the Minuit2 C++ code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7085
https://github.com/root-project/root/pull/7087:79,usability,progress,progress,79,"Hi, I guess this should also be implemented in VectorUtil -- this is a work-in-progress until I push another commit. Sorry for not sending it all at once! MLB",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:116,modifiability,pac,package,116,"Hi Matt. Than you for your contribution! If you have time, it would be nice to add also this also for the Genvector package for the `ROOT::Math::LorentzVector` classes. This can be added as a new function in the VectorUtil file, something like `DeltaRapidityPhi`. . I am not sure if it is better just having just the new function, `DeltaRapidityPhi` instead of `DeltaR` with a boolean parameter. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:385,modifiability,paramet,parameter,385,"Hi Matt. Than you for your contribution! If you have time, it would be nice to add also this also for the Genvector package for the `ROOT::Math::LorentzVector` classes. This can be added as a new function in the VectorUtil file, something like `DeltaRapidityPhi`. . I am not sure if it is better just having just the new function, `DeltaRapidityPhi` instead of `DeltaR` with a boolean parameter. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:53,performance,time,time,53,"Hi Matt. Than you for your contribution! If you have time, it would be nice to add also this also for the Genvector package for the `ROOT::Math::LorentzVector` classes. This can be added as a new function in the VectorUtil file, something like `DeltaRapidityPhi`. . I am not sure if it is better just having just the new function, `DeltaRapidityPhi` instead of `DeltaR` with a boolean parameter. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:293,availability,consist,consistent,293,"I've added this functionality now also to ROOT::Math::GenVector, it gives the same results as the other implementation and fastjet::pseudojet. I'm not sure if this is exactly how you wanted it implemented, so please let me know if you have further comments -- I've tried to keep everything as consistent as possible between the two sets of changes. I have un-marked the PR as a work-in-progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:293,usability,consist,consistent,293,"I've added this functionality now also to ROOT::Math::GenVector, it gives the same results as the other implementation and fastjet::pseudojet. I'm not sure if this is exactly how you wanted it implemented, so please let me know if you have further comments -- I've tried to keep everything as consistent as possible between the two sets of changes. I have un-marked the PR as a work-in-progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:386,usability,progress,progress,386,"I've added this functionality now also to ROOT::Math::GenVector, it gives the same results as the other implementation and fastjet::pseudojet. I'm not sure if this is exactly how you wanted it implemented, so please let me know if you have further comments -- I've tried to keep everything as consistent as possible between the two sets of changes. I have un-marked the PR as a work-in-progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:28,availability,ping,ping,28,"Hi @lmoneta, this is just a ping in case you didn't see the other message -- there is obviously no rush, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:66,integrability,messag,message,66,"Hi @lmoneta, this is just a ping in case you didn't see the other message -- there is obviously no rush, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:66,interoperability,messag,message,66,"Hi @lmoneta, this is just a ping in case you didn't see the other message -- there is obviously no rush, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:86,safety,review,review,86,"Hi @lmoneta, that makes sense -- I have just pushed some more changes. Thanks for the review! MLB",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:86,testability,review,review,86,"Hi @lmoneta, that makes sense -- I have just pushed some more changes. Thanks for the review! MLB",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:274,performance,time,time,274,"Thank you for the changes. They look good now. . It would be nice to add also a test for the new DeltaRapidityPhi function, for example adding few lines of code in . https://github.com/root-project/root/blob/master/tutorials/math/mathcoreGenVector.C#L424. If you don't have time doing this, I can do it later, after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:80,safety,test,test,80,"Thank you for the changes. They look good now. . It would be nice to add also a test for the new DeltaRapidityPhi function, for example adding few lines of code in . https://github.com/root-project/root/blob/master/tutorials/math/mathcoreGenVector.C#L424. If you don't have time doing this, I can do it later, after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:80,testability,test,test,80,"Thank you for the changes. They look good now. . It would be nice to add also a test for the new DeltaRapidityPhi function, for example adding few lines of code in . https://github.com/root-project/root/blob/master/tutorials/math/mathcoreGenVector.C#L424. If you don't have time doing this, I can do it later, after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:26,performance,time,time,26,"Hi @lmoneta, I don't have time to implement this test at the moment, but I will add it to my list to revisit in the future, in case I get there before you do. Thanks once again for reviewing this PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:49,safety,test,test,49,"Hi @lmoneta, I don't have time to implement this test at the moment, but I will add it to my list to revisit in the future, in case I get there before you do. Thanks once again for reviewing this PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:181,safety,review,reviewing,181,"Hi @lmoneta, I don't have time to implement this test at the moment, but I will add it to my list to revisit in the future, in case I get there before you do. Thanks once again for reviewing this PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:49,testability,test,test,49,"Hi @lmoneta, I don't have time to implement this test at the moment, but I will add it to my list to revisit in the future, in case I get there before you do. Thanks once again for reviewing this PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7087:181,testability,review,reviewing,181,"Hi @lmoneta, I don't have time to implement this test at the moment, but I will add it to my list to revisit in the future, in case I get there before you do. Thanks once again for reviewing this PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7087
https://github.com/root-project/root/pull/7089:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7089
https://github.com/root-project/root/pull/7089:12,deployability,infrastructur,infrastructure,12,Our jenkins infrastructure is no longer ready for v5.34 testing. I ran a local test which was successful so I am merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7089
https://github.com/root-project/root/pull/7089:56,safety,test,testing,56,Our jenkins infrastructure is no longer ready for v5.34 testing. I ran a local test which was successful so I am merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7089
https://github.com/root-project/root/pull/7089:79,safety,test,test,79,Our jenkins infrastructure is no longer ready for v5.34 testing. I ran a local test which was successful so I am merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7089
https://github.com/root-project/root/pull/7089:56,testability,test,testing,56,Our jenkins infrastructure is no longer ready for v5.34 testing. I ran a local test which was successful so I am merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7089
https://github.com/root-project/root/pull/7089:79,testability,test,test,79,Our jenkins infrastructure is no longer ready for v5.34 testing. I ran a local test which was successful so I am merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/7089
https://github.com/root-project/root/issues/7090:30,deployability,fail,fail,30,This bug makes stressGraphics fail on Apple M1 machines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:30,reliability,fail,fail,30,This bug makes stressGraphics fail on Apple M1 machines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:174,interoperability,specif,specific,174,"65535 is the ones-complement representation of `-1`. It seems that, in some contexts, a `short` is internally converted to some `unsigned` type internally. This issue is not specific to functions with arguments using default values, e.g., one could reproduce with. ```. root [0] std::cout << (short)-1 << std::endl;. 65535. ```. Taking a deeper look into it now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:18,safety,compl,complement,18,"65535 is the ones-complement representation of `-1`. It seems that, in some contexts, a `short` is internally converted to some `unsigned` type internally. This issue is not specific to functions with arguments using default values, e.g., one could reproduce with. ```. root [0] std::cout << (short)-1 << std::endl;. 65535. ```. Taking a deeper look into it now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:18,security,compl,complement,18,"65535 is the ones-complement representation of `-1`. It seems that, in some contexts, a `short` is internally converted to some `unsigned` type internally. This issue is not specific to functions with arguments using default values, e.g., one could reproduce with. ```. root [0] std::cout << (short)-1 << std::endl;. 65535. ```. Taking a deeper look into it now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:76,testability,context,contexts,76,"65535 is the ones-complement representation of `-1`. It seems that, in some contexts, a `short` is internally converted to some `unsigned` type internally. This issue is not specific to functions with arguments using default values, e.g., one could reproduce with. ```. root [0] std::cout << (short)-1 << std::endl;. 65535. ```. Taking a deeper look into it now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:42,deployability,build,build,42,"Want to see something funny? I had a ROOT build in `Debug` mode laying around on `macphsft25`, added a `std::cout` to print the color value in `TPad::TPad` - and was very surprised to see `-1`. Rebuilt in `Release` mode and now it's `65535` :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:206,deployability,Releas,Release,206,"Want to see something funny? I had a ROOT build in `Debug` mode laying around on `macphsft25`, added a `std::cout` to print the color value in `TPad::TPad` - and was very surprised to see `-1`. Rebuilt in `Release` mode and now it's `65535` :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:214,energy efficiency,load,load,214,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:243,energy efficiency,load,load,243,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:157,interoperability,incompatib,incompatibility,157,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:214,performance,load,load,214,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:243,performance,load,load,243,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:142,security,expos,expose,142,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:15,usability,hint,hint,15,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:458,deployability,log,logic,458,"Yep, it's an ABI issue: On AArch64, integers with less than 32 bits (including `short`s) are promoted to 32 bits - so far, so good, everybody agrees on that. Where things start to differ is *how* to do that, Darwin expects extension whereas the generic method is ""direct"". I suppose the latter means filling with zeros in practice, so `(short)-1 = 0xffff -> 0x0000ffff = 65535`. Setting up the target triple in a different way in #7787 allows Clang's Driver logic to compute the ABI correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:223,modifiability,extens,extension,223,"Yep, it's an ABI issue: On AArch64, integers with less than 32 bits (including `short`s) are promoted to 32 bits - so far, so good, everybody agrees on that. Where things start to differ is *how* to do that, Darwin expects extension whereas the generic method is ""direct"". I suppose the latter means filling with zeros in practice, so `(short)-1 = 0xffff -> 0x0000ffff = 65535`. Setting up the target triple in a different way in #7787 allows Clang's Driver logic to compute the ABI correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:322,reliability,pra,practice,322,"Yep, it's an ABI issue: On AArch64, integers with less than 32 bits (including `short`s) are promoted to 32 bits - so far, so good, everybody agrees on that. Where things start to differ is *how* to do that, Darwin expects extension whereas the generic method is ""direct"". I suppose the latter means filling with zeros in practice, so `(short)-1 = 0xffff -> 0x0000ffff = 65535`. Setting up the target triple in a different way in #7787 allows Clang's Driver logic to compute the ABI correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:458,safety,log,logic,458,"Yep, it's an ABI issue: On AArch64, integers with less than 32 bits (including `short`s) are promoted to 32 bits - so far, so good, everybody agrees on that. Where things start to differ is *how* to do that, Darwin expects extension whereas the generic method is ""direct"". I suppose the latter means filling with zeros in practice, so `(short)-1 = 0xffff -> 0x0000ffff = 65535`. Setting up the target triple in a different way in #7787 allows Clang's Driver logic to compute the ABI correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:458,security,log,logic,458,"Yep, it's an ABI issue: On AArch64, integers with less than 32 bits (including `short`s) are promoted to 32 bits - so far, so good, everybody agrees on that. Where things start to differ is *how* to do that, Darwin expects extension whereas the generic method is ""direct"". I suppose the latter means filling with zeros in practice, so `(short)-1 = 0xffff -> 0x0000ffff = 65535`. Setting up the target triple in a different way in #7787 allows Clang's Driver logic to compute the ABI correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7090:458,testability,log,logic,458,"Yep, it's an ABI issue: On AArch64, integers with less than 32 bits (including `short`s) are promoted to 32 bits - so far, so good, everybody agrees on that. Where things start to differ is *how* to do that, Darwin expects extension whereas the generic method is ""direct"". I suppose the latter means filling with zeros in practice, so `(short)-1 = 0xffff -> 0x0000ffff = 65535`. Setting up the target triple in a different way in #7787 allows Clang's Driver logic to compute the ABI correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7090
https://github.com/root-project/root/issues/7092:185,availability,state,state,185,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:332,availability,sli,slide,332,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:451,deployability,depend,dependencies,451,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:185,integrability,state,state,185,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:237,integrability,event,event,237,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:451,integrability,depend,dependencies,451,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:451,modifiability,depend,dependencies,451,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:332,reliability,sli,slide,332,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:451,safety,depend,dependencies,451,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:451,testability,depend,dependencies,451,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:152,usability,feedback,feedback,152,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:355,usability,support,support,355,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7092:513,usability,tool,tools,513,"Thanks for opening this issue! The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:. > We want to support experiments inference (C++) for cases that are difficult to. implement or require heavy dependencies. We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7092
https://github.com/root-project/root/issues/7093:195,availability,state,state,195,"The assert is in TCling::AutoLoad:. ```. if (!IsClassAutoLoadingEnabled()) {. ... }. assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");. ```. which does indicate that the state changed between the `if statement` and the `assert`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7093
https://github.com/root-project/root/issues/7093:225,availability,state,statement,225,"The assert is in TCling::AutoLoad:. ```. if (!IsClassAutoLoadingEnabled()) {. ... }. assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");. ```. which does indicate that the state changed between the `if statement` and the `assert`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7093
https://github.com/root-project/root/issues/7093:195,integrability,state,state,195,"The assert is in TCling::AutoLoad:. ```. if (!IsClassAutoLoadingEnabled()) {. ... }. assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");. ```. which does indicate that the state changed between the `if statement` and the `assert`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7093
https://github.com/root-project/root/issues/7093:225,integrability,state,statement,225,"The assert is in TCling::AutoLoad:. ```. if (!IsClassAutoLoadingEnabled()) {. ... }. assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");. ```. which does indicate that the state changed between the `if statement` and the `assert`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7093
https://github.com/root-project/root/issues/7093:172,reliability,doe,does,172,"The assert is in TCling::AutoLoad:. ```. if (!IsClassAutoLoadingEnabled()) {. ... }. assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");. ```. which does indicate that the state changed between the `if statement` and the `assert`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7093
https://github.com/root-project/root/issues/7093:4,testability,assert,assert,4,"The assert is in TCling::AutoLoad:. ```. if (!IsClassAutoLoadingEnabled()) {. ... }. assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");. ```. which does indicate that the state changed between the `if statement` and the `assert`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/7093
