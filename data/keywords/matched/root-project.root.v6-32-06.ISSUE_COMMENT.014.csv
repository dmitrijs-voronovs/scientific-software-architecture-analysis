id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/2983:156,testability,integr,integration,156,"Hmm, this is fishy. It was my impression that the PrintMatrix macro actually wasn't used in active code anywhere (maybe only true for master at the time of integration and not for the snapshot at 6.14?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:39,availability,error,error,39,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:57,availability,error,error,57,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:98,availability,error,error,98,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:239,availability,error,error-,239,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:63,deployability,log,log,63,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:72,deployability,log,log,72,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:84,deployability,fail,failing,84,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:202,deployability,stack,stackoverflow,202,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:326,deployability,depend,dependencies,326,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:326,integrability,depend,dependencies,326,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:326,modifiability,depend,dependencies,326,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:39,performance,error,error,39,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:57,performance,error,error,57,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:98,performance,error,error,98,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:239,performance,error,error-,239,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:84,reliability,fail,failing,84,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:39,safety,error,error,39,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:57,safety,error,error,57,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:63,safety,log,log,63,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:72,safety,log,log,72,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:98,safety,error,error,98,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:239,safety,error,error-,239,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:326,safety,depend,dependencies,326,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:63,security,log,log,63,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:72,security,log,log,72,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:63,testability,log,log,63,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:72,testability,log,log,72,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:326,testability,depend,dependencies,326,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:39,usability,error,error,39,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:57,usability,error,error,57,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:98,usability,error,error,98,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:152,usability,help,help,152,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:239,usability,error,error-,239,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:281,usability,indicat,indicates,281,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight? (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:65,deployability,build,builds,65,@ashlaban is this already in master and 6.16? Let's see what the builds say.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:60,deployability,patch,patches,60,IIUC this is as good as it gets with our CI infra and v6-14-patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:60,safety,patch,patches,60,IIUC this is as good as it gets with our CI infra and v6-14-patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2983:60,security,patch,patches,60,IIUC this is as good as it gets with our CI infra and v6-14-patches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2983
https://github.com/root-project/root/pull/2985:81,deployability,build,build,81,"@bellenot can you please take a look, this funny Jenkins guy says the windows 10 build has failed ... and I don't really understand why from the console output, looks like some infrastructure thing has failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:91,deployability,fail,failed,91,"@bellenot can you please take a look, this funny Jenkins guy says the windows 10 build has failed ... and I don't really understand why from the console output, looks like some infrastructure thing has failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:177,deployability,infrastructur,infrastructure,177,"@bellenot can you please take a look, this funny Jenkins guy says the windows 10 build has failed ... and I don't really understand why from the console output, looks like some infrastructure thing has failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:202,deployability,fail,failed,202,"@bellenot can you please take a look, this funny Jenkins guy says the windows 10 build has failed ... and I don't really understand why from the console output, looks like some infrastructure thing has failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:91,reliability,fail,failed,91,"@bellenot can you please take a look, this funny Jenkins guy says the windows 10 build has failed ... and I don't really understand why from the console output, looks like some infrastructure thing has failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:202,reliability,fail,failed,202,"@bellenot can you please take a look, this funny Jenkins guy says the windows 10 build has failed ... and I don't really understand why from the console output, looks like some infrastructure thing has failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:121,testability,understand,understand,121,"@bellenot can you please take a look, this funny Jenkins guy says the windows 10 build has failed ... and I don't really understand why from the console output, looks like some infrastructure thing has failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:47,availability,error,errors,47,@Axel-Naumann what's the hold up here? All the errors seem to be due to something else failing ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:87,deployability,fail,failing,87,@Axel-Naumann what's the hold up here? All the errors seem to be due to something else failing ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:47,performance,error,errors,47,@Axel-Naumann what's the hold up here? All the errors seem to be due to something else failing ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:87,reliability,fail,failing,87,@Axel-Naumann what's the hold up here? All the errors seem to be due to something else failing ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:47,safety,error,errors,47,@Axel-Naumann what's the hold up here? All the errors seem to be due to something else failing ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2985:47,usability,error,errors,47,@Axel-Naumann what's the hold up here? All the errors seem to be due to something else failing ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2985
https://github.com/root-project/root/pull/2986:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:24,deployability,modul,modules,24,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:65,deployability,configurat,configuration,65,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:65,integrability,configur,configuration,65,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:24,modifiability,modul,modules,24,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:65,modifiability,configur,configuration,65,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:32,reliability,doe,does,32,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:24,safety,modul,modules,24,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:65,security,configur,configuration,65,"@vgvassilev, looks like modules does not stuck any more with new configuration (Ubuntu 16 + gcc5.4), should we merge this anyway?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2986:10,usability,close,close,10,Should we close this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2986
https://github.com/root-project/root/pull/2989:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2989
https://github.com/root-project/root/pull/2989:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2989
https://github.com/root-project/root/pull/2989:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2989
https://github.com/root-project/root/pull/2989:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2989
https://github.com/root-project/root/pull/2989:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2989
https://github.com/root-project/root/pull/2990:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2990
https://github.com/root-project/root/pull/2990:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2990
https://github.com/root-project/root/pull/2990:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2990
https://github.com/root-project/root/pull/2991:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:29,availability,Error,Error,29,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:135,integrability,sub,sub-command,135,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:62,interoperability,plug,plugins,62,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:29,performance,Error,Error,29,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:116,reliability,doe,does,116,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:29,safety,Error,Error,29,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:29,usability,Error,Error,29,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:56,usability,tool,tools,56,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:139,usability,command,command,139,We get:. ```. 10:31:27 CMake Error at interpreter/cling/tools/plugins/clad/CMakeLists.txt:15 (list):. 10:31:27 list does not recognize sub-command JOIN. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:4,deployability,build,builds,4,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:15,deployability,fail,failing,15,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:30,deployability,version,version,30,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:30,integrability,version,version,30,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:30,modifiability,version,version,30,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:15,reliability,fail,failing,15,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:47,reliability,doe,doesn,47,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:55,usability,support,support,55,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:90,usability,prefer,preferred,90,The builds are failing as the version of cmake doesn't support `list(JOIN`. Do you have a preferred workaround or alternate way of fixing this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:6,availability,error,errors,6,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:69,availability,error,errors,69,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:83,energy efficiency,current,current,83,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:6,performance,error,errors,6,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:69,performance,error,errors,69,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:6,safety,error,errors,6,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:69,safety,error,errors,69,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:6,usability,error,errors,6,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2991:69,usability,error,errors,69,These errors seem genuine? @amadio might this be? (I don't see these errors in the current master.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2991
https://github.com/root-project/root/pull/2992:11,deployability,build,build,11,@phsft-bot build just on fedora29/python3 with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2992
https://github.com/root-project/root/pull/2992:11,deployability,build,build,11,@phsft-bot build just on fedora29/python3 with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2992
https://github.com/root-project/root/pull/2993:11,availability,failur,failure,11,The fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2993
https://github.com/root-project/root/pull/2993:11,deployability,fail,failure,11,The fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2993
https://github.com/root-project/root/pull/2993:29,deployability,infrastructur,infrastructure,29,The fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2993
https://github.com/root-project/root/pull/2993:11,performance,failur,failure,11,The fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2993
https://github.com/root-project/root/pull/2993:11,reliability,fail,failure,11,The fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2993
https://github.com/root-project/root/pull/2995:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2995
https://github.com/root-project/root/pull/2995:7,availability,failur,failure,7,Fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2995
https://github.com/root-project/root/pull/2995:7,deployability,fail,failure,7,Fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2995
https://github.com/root-project/root/pull/2995:25,deployability,infrastructur,infrastructure,25,Fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2995
https://github.com/root-project/root/pull/2995:7,performance,failur,failure,7,Fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2995
https://github.com/root-project/root/pull/2995:7,reliability,fail,failure,7,Fedora failure is due to infrastructure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2995
https://github.com/root-project/root/pull/2997:15,usability,confirm,confirm,15,@bluehood I do confirm this PR removes the differences reported in [jira/ROOT-9802](https://sft.its.cern.ch/jira/browse/ROOT-9802),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2997
https://github.com/root-project/root/pull/2997:193,availability,cluster,cluster,193,"As per @pcanal 's comment, the second change can't go in, so closing this PR, will open another with only the first change, will have to fix TTreeReader to have each RDF TBB task read only one cluster.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2997
https://github.com/root-project/root/pull/2997:193,deployability,cluster,cluster,193,"As per @pcanal 's comment, the second change can't go in, so closing this PR, will open another with only the first change, will have to fix TTreeReader to have each RDF TBB task read only one cluster.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2997
https://github.com/root-project/root/pull/2999:184,availability,error,error,184,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:506,availability,Error,Error,506,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1135,availability,error,error,1135,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1493,availability,error,error,1493,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:0,deployability,Depend,Depends,0,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:63,deployability,modul,module,63,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:272,deployability,build,builds,272,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:338,deployability,build,building,338,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:347,deployability,modul,module,347,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:399,deployability,build,builds,399,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:460,deployability,build,build,460,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:520,deployability,build,build,520,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:537,deployability,modul,module,537,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:645,deployability,modul,module,645,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:665,deployability,modul,module,665,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:704,deployability,modul,modulemap,704,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:759,deployability,Build,Building,759,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:835,deployability,build,building,835,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:844,deployability,modul,module,844,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:866,deployability,build,building,866,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:875,deployability,modul,module,875,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:937,deployability,build,builds,937,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1016,deployability,modul,module-includes,1016,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1063,deployability,build,builds,1063,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1149,deployability,depend,dependency,1149,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1163,deployability,modul,module,1163,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1251,deployability,depend,dependencies,1251,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1292,deployability,Build,Building,1292,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1429,deployability,build,builds,1429,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1510,deployability,build,build,1510,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1516,deployability,modul,module,1516,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:0,integrability,Depend,Depends,0,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:190,integrability,messag,message,190,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1149,integrability,depend,dependency,1149,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1251,integrability,depend,dependencies,1251,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:190,interoperability,messag,message,190,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:0,modifiability,Depend,Depends,0,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:63,modifiability,modul,module,63,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:347,modifiability,modul,module,347,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:537,modifiability,modul,module,537,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:645,modifiability,modul,module,645,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:665,modifiability,modul,module,665,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:704,modifiability,modul,modulemap,704,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:844,modifiability,modul,module,844,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:875,modifiability,modul,module,875,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1016,modifiability,modul,module-includes,1016,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1149,modifiability,depend,dependency,1149,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1163,modifiability,modul,module,1163,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1251,modifiability,depend,dependencies,1251,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1516,modifiability,modul,module,1516,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:184,performance,error,error,184,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:506,performance,Error,Error,506,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1135,performance,error,error,1135,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1493,performance,error,error,1493,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:0,safety,Depend,Depends,0,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:63,safety,modul,module,63,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:184,safety,error,error,184,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:347,safety,modul,module,347,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:506,safety,Error,Error,506,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:537,safety,modul,module,537,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:645,safety,modul,module,645,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:665,safety,modul,module,665,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:704,safety,modul,modulemap,704,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:844,safety,modul,module,844,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:875,safety,modul,module,875,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1016,safety,modul,module-includes,1016,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1135,safety,error,error,1135,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1149,safety,depend,dependency,1149,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1163,safety,modul,module,1163,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1251,safety,depend,dependencies,1251,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1493,safety,error,error,1493,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1516,safety,modul,module,1516,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:0,testability,Depend,Depends,0,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1149,testability,depend,dependency,1149,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1251,testability,depend,dependencies,1251,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:184,usability,error,error,184,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:506,usability,Error,Error,506,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1135,usability,error,error,1135,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:1493,usability,error,error,1493,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it? PS: Original error message:. ```. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'. [-Rmodule-build]. #include ""ROOT/RHistDrawable.hxx"". ^. Error: Had to build non-system module ROOTHistDraw implicitly. You first need to. generate the dictionary for ROOTHistDraw or mark the C++ module as a system. module if you provided your own system modulemap file:. ROOTHistDraw [system] { ... }. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o. While building module 'Hist':. While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:. In file included from <module-includes>:1:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist. #include ""ROOT/RHistImpl.hxx"". ^. Scanning dependencies of target GenVector. [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o. In file included from input_line_13:85:. /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'. #include ""ROOT/RHistDrawable.hxx"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:106,deployability,DEPEND,DEPENDENCIES,106,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:190,deployability,depend,dependency,190,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:106,integrability,DEPEND,DEPENDENCIES,106,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:190,integrability,depend,dependency,190,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:106,modifiability,DEPEND,DEPENDENCIES,106,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:190,modifiability,depend,dependency,190,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:106,safety,DEPEND,DEPENDENCIES,106,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:190,safety,depend,dependency,190,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:106,testability,DEPEND,DEPENDENCIES,106,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:190,testability,depend,dependency,190,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/2999:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_STANDARD=14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2999
https://github.com/root-project/root/pull/3001:16,safety,test,tests,16,"After rerunning tests, I confirm RDF and TTreeReader read the same amount of bytes with this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3001
https://github.com/root-project/root/pull/3001:16,testability,test,tests,16,"After rerunning tests, I confirm RDF and TTreeReader read the same amount of bytes with this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3001
https://github.com/root-project/root/pull/3001:25,usability,confirm,confirm,25,"After rerunning tests, I confirm RDF and TTreeReader read the same amount of bytes with this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3001
https://github.com/root-project/root/pull/3002:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3002
https://github.com/root-project/root/pull/3005:39,safety,test,tests,39,"@pcanal & @Axel-Naumann, I left in all tests ROOT::kZLIB, ROOT::LZMA and etc, to show that user code will not be broken...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:39,testability,test,tests,39,"@pcanal & @Axel-Naumann, I left in all tests ROOT::kZLIB, ROOT::LZMA and etc, to show that user code will not be broken...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:91,usability,user,user,91,"@pcanal & @Axel-Naumann, I left in all tests ROOT::kZLIB, ROOT::LZMA and etc, to show that user code will not be broken...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:53,availability,failur,failures,53,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:158,availability,error,error,158,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:445,availability,error,error,445,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:722,availability,error,error,722,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1000,availability,error,error,1000,"ave still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kU",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1278,availability,error,error,1278,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1554,availability,error,error,1554,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1831,availability,error,error,1831,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1993,availability,error,error,1993,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:53,deployability,fail,failures,53,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:53,performance,failur,failures,53,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:158,performance,error,error,158,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:445,performance,error,error,445,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:722,performance,error,error,722,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1000,performance,error,error,1000,"ave still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kU",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1278,performance,error,error,1278,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1554,performance,error,error,1554,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1831,performance,error,error,1831,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1993,performance,error,error,1993,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:53,reliability,fail,failures,53,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:41,safety,test,test,41,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:158,safety,error,error,158,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:445,safety,error,error,445,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:722,safety,error,error,722,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1000,safety,error,error,1000,"ave still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kU",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1278,safety,error,error,1278,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1554,safety,error,error,1554,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1831,safety,error,error,1831,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1993,safety,error,error,1993,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:41,testability,test,test,41,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:158,usability,error,error,158,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:445,usability,error,error,445,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:722,usability,error,error,722,"I have still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1000,usability,error,error,1000,"ave still problems in the compression test (other failures are not mine):. ```. MainEvent.cxx: In function ‘int main(int, char**)’:. MainEvent.cxx:445:63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kU",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1278,usability,error,error,1278,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1554,usability,error,error,1554,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1831,usability,error,error,1831,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:1993,usability,error,error,1993,"63: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kUseGlobalSetting, 5) != 5) exit(31);. ^. MainEvent.cxx:446:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, 0) != 100) exit(32);. ^. MainEvent.cxx:447:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kZLIB, -1) != 100) exit(36);. ^. MainEvent.cxx:448:52: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZMA, 99) != 299) exit(33);. ^. MainEvent.cxx:449:50: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, 0) != 400) exit(37);. ^. MainEvent.cxx:450:51: error: cannot convert ‘ROOT::<anonymous enum>’ to ‘ROOT::RCompressionSetting::EAlgorithm’ for argument ‘1’ to ‘int ROOT::CompressionSettings(ROOT::RCompressionSetting::EAlgorithm, int)’. if (ROOT::CompressionSettings(ROOT::kLZ4, -1) != 400) exit(38);. ^. MainEvent.cxx:451:37: error: ‘kOldCompressionAlgo’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kOldCompressionAlgo, 100) != 399) exit(34);. ^. MainEvent.cxx:452:37: error: ‘kUndefinedCompressionAlgorithm’ is not a member of ‘ROOT’. if (ROOT::CompressionSettings(ROOT::kUndefinedCompressionAlgorithm, 7) != 7) exit(35);. ^. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:45,safety,review,review,45,@pcanal I think I am ready for next round of review :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:45,testability,review,review,45,@pcanal I think I am ready for next round of review :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:153,availability,down,downside,153,">> I thought we agreed not to make it a enum class in order to be backward compatible with old user code. > it didn't work out, . @oshadura What was the downside?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:75,interoperability,compatib,compatible,75,">> I thought we agreed not to make it a enum class in order to be backward compatible with old user code. > it didn't work out, . @oshadura What was the downside?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:95,usability,user,user,95,">> I thought we agreed not to make it a enum class in order to be backward compatible with old user code. > it didn't work out, . @oshadura What was the downside?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:293,safety,prevent,prevent,293,"@Axel-Naumann @oshadura the static_cast in the header files are a bit distracting. Would replacing:. ```. struct RCompressionSetting {. enum class EDefaults {. kUseGlobal = 0,. ```. with. ```. struct RCompressionSetting {. struct EDefaults {. enum EDefaults {. kUseGlobal = 0,. ```. work (and prevent the static_cast for now)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:293,security,preven,prevent,293,"@Axel-Naumann @oshadura the static_cast in the header files are a bit distracting. Would replacing:. ```. struct RCompressionSetting {. enum class EDefaults {. kUseGlobal = 0,. ```. with. ```. struct RCompressionSetting {. struct EDefaults {. enum EDefaults {. kUseGlobal = 0,. ```. work (and prevent the static_cast for now)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:156,availability,error,errors,156,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:167,availability,error,error,167,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:188,availability,operat,operator,188,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:145,interoperability,convers,conversion,145,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:156,performance,error,errors,156,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:167,performance,error,error,167,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:156,safety,error,errors,156,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:167,safety,error,error,167,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:156,usability,error,errors,156,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:167,usability,error,error,167,"@pcanal sadly we can't have the same name for struct and enum in struct where is was declared. If to try with unnamed enum, then I have multiple conversion errors ``` error: no match for ‘operator==’ (operand types are ‘ROOT::RCompressionSetting::EAlgorithm’ and ‘ROOT::RCompressionSetting::EAlgorithm::<unnamed enum>’) ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:75,availability,error,errors,75,Build on ROOT-fedora27/noimt looks like is false positive. . ```0 Compiler errors 0 Compiler warnings ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:0,deployability,Build,Build,0,Build on ROOT-fedora27/noimt looks like is false positive. . ```0 Compiler errors 0 Compiler warnings ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:75,performance,error,errors,75,Build on ROOT-fedora27/noimt looks like is false positive. . ```0 Compiler errors 0 Compiler warnings ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:75,safety,error,errors,75,Build on ROOT-fedora27/noimt looks like is false positive. . ```0 Compiler errors 0 Compiler warnings ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:75,usability,error,errors,75,Build on ROOT-fedora27/noimt looks like is false positive. . ```0 Compiler errors 0 Compiler warnings ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:112,safety,test,testing,112,"looks good. @oshadura if ready, please remove the WIP prefix in the title :). Waiting on the result of the full testing to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:112,testability,test,testing,112,"looks good. @oshadura if ready, please remove the WIP prefix in the title :). Waiting on the result of the full testing to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:39,usability,statu,status,39,"@pcanal thanks! I forgot to remove WIP status, now it is done!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:4,availability,failur,failures,4,The failures are pre-existing. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:4,deployability,fail,failures,4,The failures are pre-existing. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:4,performance,failur,failures,4,The failures are pre-existing. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3005:4,reliability,fail,failures,4,The failures are pre-existing. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3005
https://github.com/root-project/root/pull/3007:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3007
https://github.com/root-project/root/pull/3007:0,availability,Failur,Failure,0,Failure in ROOT-centos7/noimt is pre-exisiting.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3007
https://github.com/root-project/root/pull/3007:0,deployability,Fail,Failure,0,Failure in ROOT-centos7/noimt is pre-exisiting.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3007
https://github.com/root-project/root/pull/3007:0,performance,Failur,Failure,0,Failure in ROOT-centos7/noimt is pre-exisiting.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3007
https://github.com/root-project/root/pull/3007:0,reliability,Fail,Failure,0,Failure in ROOT-centos7/noimt is pre-exisiting.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3007
https://github.com/root-project/root/pull/3009:40,deployability,build,build,40,"Glancing over it, that look fine. Let's build it. @phsft-bot build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:61,deployability,build,build,61,"Glancing over it, that look fine. Let's build it. @phsft-bot build",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:10,availability,failur,failure,10,The build failure on windows ultimately relates to roottest not being found on Maarten's GitHub.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:4,deployability,build,build,4,The build failure on windows ultimately relates to roottest not being found on Maarten's GitHub.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:10,deployability,fail,failure,10,The build failure on windows ultimately relates to roottest not being found on Maarten's GitHub.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:10,performance,failur,failure,10,The build failure on windows ultimately relates to roottest not being found on Maarten's GitHub.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3009:10,reliability,fail,failure,10,The build failure on windows ultimately relates to roottest not being found on Maarten's GitHub.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3009
https://github.com/root-project/root/pull/3010:11,deployability,build,build,11,@phsft-bot build just on ROOT-centos7/noimt with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3010
https://github.com/root-project/root/pull/3012:0,deployability,Continu,Continuation,0,Continuation of PR #2912.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:100,deployability,modul,module,100,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:100,modifiability,modul,module,100,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:125,modifiability,scenario,scenario,125,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:240,modifiability,scenario,scenarios,240,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:31,performance,perform,performance,31,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:195,performance,perform,performance,195,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:266,performance,perform,performance,266,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:306,performance,Memor,Memory,306,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:321,performance,time,time,321,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:17,reliability,doe,does,17,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:100,safety,modul,module,100,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:141,safety,test,test,141,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:141,testability,test,test,141,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:31,usability,perform,performance,31,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:195,usability,perform,performance,195,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:266,usability,perform,performance,266,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:306,usability,Memor,Memory,306,> The rdict file does not show performance benefits anymore and we are as good as having only a C++ module. @vgvassilev What scenario did we test it with to come to this conclusion? What was the performance gains in the old system on those scenarios and what is the performance difference in the new one? (Memory and run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:37,safety,test,test,37,@pcanal . Could you tell us which io test you have in mind which can benefit ROOT from having rdict?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:37,testability,test,test,37,@pcanal . Could you tell us which io test you have in mind which can benefit ROOT from having rdict?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:32,safety,test,tests,32,"@vgvassilev yes I have lists of tests from @pcanal, I will check numbers..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:32,testability,test,tests,32,"@vgvassilev yes I have lists of tests from @pcanal, I will check numbers..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:250,energy efficiency,Load,Load,250,"@yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). For example after doing ```ctest -R MakeProject```, you could test:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. Or other similar large user libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:462,integrability,Event,Events,462,"@yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). For example after doing ```ctest -R MakeProject```, you could test:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. Or other similar large user libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:250,performance,Load,Load,250,"@yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). For example after doing ```ctest -R MakeProject```, you could test:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. Or other similar large user libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:226,safety,test,test,226,"@yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). For example after doing ```ctest -R MakeProject```, you could test:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. Or other similar large user libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:226,testability,test,test,226,"@yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). For example after doing ```ctest -R MakeProject```, you could test:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. Or other similar large user libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:583,usability,user,user,583,"@yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). For example after doing ```ctest -R MakeProject```, you could test:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. Or other similar large user libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:199,availability,consist,consistent,199,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:111,deployability,updat,update,111,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:154,deployability,Updat,Update,154,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:30,safety,test,tests,30,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:111,safety,updat,update,111,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:154,safety,Updat,Update,154,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:111,security,updat,update,111,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:154,security,Updat,Update,154,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:30,testability,test,tests,30,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:199,usability,consist,consistent,199,"@pcanal, we have some initial tests. Please take a look at the PR description. We will run the MakeProject and update the PR description correspondingly. Update: we have done it and the results seem consistent to the results produced by roottest/io.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:264,energy efficiency,Load,Load,264,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:817,energy efficiency,load,load,817,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:480,integrability,Event,Events,480,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:748,integrability,repositor,repository,748,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:748,interoperability,repositor,repository,748,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:766,modifiability,exten,extent,766,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:264,performance,Load,Load,264,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:817,performance,load,load,817,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:801,reliability,doe,does,801,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:230,safety,test,test,230,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:727,safety,test,test,727,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:773,safety,test,test,773,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:230,testability,test,test,230,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:727,testability,test,test,727,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:773,testability,test,test,773,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:613,usability,user,user,613,"> @yamaguchi1024 You will need an example that has a large fraction of libraries with rdicts (eg. hsimple is almost only using libraries that do not have any rdict). > . > For example after doing `ctest -R MakeProject`, you could test:. > . > ```. > {. > gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. > auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. > TTree *tree = nullptr; f->GetObject(""Events"", tree);. > for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. > }. > ```. > . > Or other similar large user libraries. @vgvassilev @yamaguchi1024 When mentioning the MakeProject in the PR description. Do you mean the test as it is in the repository or the extent test I proposed (the former does *not* even load the root-pcm file, i.e. it just generates it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:404,availability,consist,consistent,404,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:428,availability,state,stated,428,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:83,energy efficiency,Load,Load,83,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:295,integrability,Event,Events,295,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:428,integrability,state,stated,428,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:83,performance,Load,Load,83,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:404,usability,consist,consistent,404,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:. ```. {. gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");. auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");. TTree *tree = nullptr; f->GetObject(""Events"", tree);. for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);. }. ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:297,deployability,modul,modules,297,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:238,modifiability,scenario,scenario,238,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:297,modifiability,modul,modules,297,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:265,safety,test,test,265,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:297,safety,modul,modules,297,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:265,testability,test,test,265,"@vgvassilev Looks great. I need one more point of references (that you already run but I can't tell where it is in the spreadsheet), namely the same number for running just runcms310.C [This should apriori be equivalent to the worse case scenario, i.e. running the test above without root-pcm nor modules]. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:194,deployability,modul,modules,194,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:194,modifiability,modul,modules,194,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:44,performance,memor,memory,44,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:114,performance,memor,memory,114,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:194,safety,modul,modules,194,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:227,safety,test,test,227,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:227,testability,test,test,227,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:44,usability,memor,memory,44,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:114,usability,memor,memory,114,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:263,usability,confirm,confirm,263,"Fair enough, then reading all the header in memory (and creating all the corresponding TClass) takes 1,649,228 of memory compared to 307,076 for reading one entry with rdict and to 305,576 with modules. We should run the above test with (master + pch - rdict) to confirm my assumptions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:8,security,modif,modified,8,[cms310.modified.tar.gz](https://github.com/root-project/root/files/2967051/cms310.modified.tar.gz). [cms310.read.tar.gz](https://github.com/root-project/root/files/2967052/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:83,security,modif,modified,83,[cms310.modified.tar.gz](https://github.com/root-project/root/files/2967051/cms310.modified.tar.gz). [cms310.read.tar.gz](https://github.com/root-project/root/files/2967052/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:299,availability,operat,operator,299,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:24,energy efficiency,load,loading,24,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:24,performance,load,loading,24,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:181,reliability,pra,pragma,181,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:12,safety,prevent,prevent,12,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:12,security,preven,prevent,12,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:89,security,sign,significantly,89,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:129,safety,compl,complete,129,See my result at https://docs.google.com/spreadsheets/d/1cKDb99gaNNr9MdSYi1_QQL0gHXhy9m7zmI5voyOK8K8/edit?usp=sharing. where the complete result are in the last worksheet (RDICT numbers).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:129,security,compl,complete,129,See my result at https://docs.google.com/spreadsheets/d/1cKDb99gaNNr9MdSYi1_QQL0gHXhy9m7zmI5voyOK8K8/edit?usp=sharing. where the complete result are in the last worksheet (RDICT numbers).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:67,deployability,modul,module,67,"post-widthdrawn as the numbers were inaccurate. In the case master+module, the module for the cms310 library was not being generated (and thus not beeing used). I will re-run some number and repost accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:79,deployability,modul,module,79,"post-widthdrawn as the numbers were inaccurate. In the case master+module, the module for the cms310 library was not being generated (and thus not beeing used). I will re-run some number and repost accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:67,modifiability,modul,module,67,"post-widthdrawn as the numbers were inaccurate. In the case master+module, the module for the cms310 library was not being generated (and thus not beeing used). I will re-run some number and repost accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:79,modifiability,modul,module,79,"post-widthdrawn as the numbers were inaccurate. In the case master+module, the module for the cms310 library was not being generated (and thus not beeing used). I will re-run some number and repost accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:67,safety,modul,module,67,"post-widthdrawn as the numbers were inaccurate. In the case master+module, the module for the cms310 library was not being generated (and thus not beeing used). I will re-run some number and repost accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:79,safety,modul,module,79,"post-widthdrawn as the numbers were inaccurate. In the case master+module, the module for the cms310 library was not being generated (and thus not beeing used). I will re-run some number and repost accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:4,deployability,version,version,4,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:59,deployability,modul,module,59,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:4,integrability,version,version,4,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:4,modifiability,version,version,4,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:59,modifiability,modul,module,59,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:19,safety,test,test,19,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:46,safety,test,testing,46,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:59,safety,modul,module,59,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:19,testability,test,test,19,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:46,testability,test,testing,46,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:38,usability,support,support,38,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:75,usability,user,user,75,New version of the test with actually support testing with module for the 'user' library. [cms310.read.tar.gz](https://github.com/root-project/root/files/2972133/cms310.read.tar.gz).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:107,deployability,build,build,107,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:164,deployability,build,build,164,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:302,deployability,modul,module,302,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:351,deployability,modul,module-rdict,351,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:614,deployability,modul,module,614,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:773,deployability,modul,module,773,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:788,deployability,modul,module-rdict,788,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1059,deployability,modul,modules,1059,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1160,deployability,modul,modules,1160,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1217,deployability,modul,modules,1217,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1323,deployability,modul,modules,1323,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1424,deployability,modul,modules,1424,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1481,deployability,modul,modules,1481,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1747,deployability,modul,module,1747,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1786,deployability,modul,module-rdict,1786,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:68,energy efficiency,current,current,68,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1080,energy efficiency,load,load,1080,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1238,energy efficiency,load,load,1238,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1344,energy efficiency,load,load,1344,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1502,energy efficiency,load,load,1502,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:148,integrability,sub,subdirectory,148,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:411,integrability,configur,configure,411,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:302,modifiability,modul,module,302,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:351,modifiability,modul,module-rdict,351,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:411,modifiability,configur,configure,411,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:614,modifiability,modul,module,614,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:773,modifiability,modul,module,773,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:788,modifiability,modul,module-rdict,788,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1059,modifiability,modul,modules,1059,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1160,modifiability,modul,modules,1160,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1217,modifiability,modul,modules,1217,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1323,modifiability,modul,modules,1323,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1424,modifiability,modul,modules,1424,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1481,modifiability,modul,modules,1481,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1747,modifiability,modul,module,1747,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1786,modifiability,modul,module-rdict,1786,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1080,performance,load,load,1080,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1238,performance,load,load,1238,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1247,performance,content,content,1247,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1344,performance,load,load,1344,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1502,performance,load,load,1502,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1511,performance,content,content,1511,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1711,performance,time,time,1711,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:10,safety,compl,complete,10,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:116,safety,test,test,116,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:302,safety,modul,module,302,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:351,safety,modul,module-rdict,351,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:614,safety,modul,module,614,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:773,safety,modul,module,773,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:788,safety,modul,module-rdict,788,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1059,safety,modul,modules,1059,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1068,safety,avoid,avoiding,1068,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1160,safety,modul,modules,1160,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1217,safety,modul,modules,1217,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1226,safety,avoid,avoiding,1226,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1323,safety,modul,modules,1323,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1332,safety,avoid,avoiding,1332,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1424,safety,modul,modules,1424,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1481,safety,modul,modules,1481,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1490,safety,avoid,avoiding,1490,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1747,safety,modul,module,1747,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1786,safety,modul,module-rdict,1786,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:10,security,compl,complete,10,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:411,security,configur,configure,411,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:116,testability,test,test,116,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:720,usability,statu,status,720,"After the complete run of readcms310.C we get (this is all with the current master). pch+rdict: master and build of test as is (run MAKEP in cms310 subdirectory to build it. pch-rdict: use previous but mv the rdict: ```mv cms310/cms310ProjectDict_rdict.pcm cms310/cms310ProjectDict_rdict.pcm.moved```. module+rdict: use ```runtime_cxxmodules=""ON""```. module-rdict: use previous but mv the rdict out of the way. configure line:. ```. cmake -DLLVM_BUILD_TYPE=""RelWithDebInfo"" -Dcxx17=""ON"" -Droottest=""ON"" [-Druntime_cxxmodules=""ON""] -Dtest=""ON"" -Dtmva=""OFF"" -Dxrootd=""OFF"" /local2/pcanal/cint_working/rootcling/root-module -G Ninja. ```. In the following table, the numbers are kB. They are as reported by ```/proc/${pid}/status```. phase | counter | pch+rdict | pch-rdict | module+rdict | module-rdict . ------------ | ---------- | ------------ | ------------- | ------------ | ------------- . after reading the entries | VmPeak | 413604 | 454132 | 490748 | 513176 . after reading the entries | VmRSS | 140204 | 186148 | 169448 | 195008. For VmRSS. So without modules, avoiding to load the headers (i.e using the rdict) saves **46** MB . Replacing the pch with modules add (as expected as the moment) **30** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **25** MB. For VmPeak. So without modules, avoiding to load the headers (i.e using the rdict) saves **40** MB.  Replacing the pch with modules add (as expected as the moment) **77** MB . With modules, avoiding to load pcm content (i.e using the rdict) still saves **22** MB. So it seems to be me that the rdict are still as useful as they were, isn't it? (or am I still missing something?). Thanks,.  Philippe. PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:49,deployability,modul,module,49,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:88,deployability,modul,module-rdict,88,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:49,modifiability,modul,module,49,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:88,modifiability,modul,module-rdict,88,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:13,performance,time,time,13,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:49,safety,modul,module,49,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:88,safety,modul,module-rdict,88,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:441,safety,detect,detect,441,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:441,security,detect,detect,441,"> PS. In run-time, I see an average of 1.20s for module+rdict vs an average of 1.3s for module-rdict (for a 'root.exe -b -l -q' average of .2s) ; and expected this is just an 'initialization' cost when increasing the number of entries read the difference stays around .1s. @pcanal, I'd like to get back to this. Rather than not generating the rdict file we could use it only in the cases when it will improve things. What is the best way to detect if we are in `MakeProject` mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:375,deployability,build,build,375,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:574,modifiability,inherit,inheritance,574,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:137,reliability,doe,doesn,137,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:314,reliability,doe,does,314,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:172,safety,detect,detect,172,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:286,safety,detect,detect,286,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:389,safety,Except,Except,389,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:764,safety,detect,detect,764,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:172,security,detect,detect,172,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:286,security,detect,detect,286,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:764,security,detect,detect,764,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:507,usability,user,user,507,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:604,usability,user,user,604,"> Rather than not generating the rdict file we could use it only in the cases when it will improve things. . What are the cases where it doesn't? > What is the best way to detect if we are in MakeProject mode? What is special about the ""MakeProject mode""? I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:265,availability,slo,slowdown,265,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:709,deployability,build,build,709,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1181,deployability,patch,patched,1181,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1190,deployability,version,version,1190,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1190,integrability,version,version,1190,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:908,modifiability,inherit,inheritance,908,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1190,modifiability,version,version,1190,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:160,performance,perform,performance,160,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:143,reliability,doe,doesn,143,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:181,reliability,doe,doesn,181,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:265,reliability,slo,slowdown,265,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:648,reliability,doe,does,648,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:307,safety,detect,detect,307,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:620,safety,detect,detect,620,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:723,safety,Except,Except,723,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1098,safety,detect,detect,1098,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1181,safety,patch,patched,1181,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:307,security,detect,detect,307,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:620,security,detect,detect,620,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1098,security,detect,detect,1098,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1181,security,patch,patched,1181,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1291,security,sign,significantly,1291,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:160,usability,perform,performance,160,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:841,usability,user,user,841,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:938,usability,user,user,938,"> > Rather than not generating the rdict file we could use it only in the cases when it will improve things. > . > What are the cases where it doesn't? See the performance data. It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. > . > > What is the best way to detect if we are in MakeProject mode? > . > What is special about the ""MakeProject mode""? I was hoping you to be able to tell. You crafted an example on top of roottest's MakeProject which was able to demonstrate the usefulness of rdicts. None of that so far is obvious to me. > . > I don't think we can (really) detect it. What MakeProject does is generate a set of header files, a linkdef file and a build script. Except for the fact that there no function besides the constructor and destructor, it is distinguishable from regular user code. The struct are not even guaranteed to be POD because of inheritance. In addition, the user could take the initial generation and start developing a full library based on it. So even heuristic bases on the way MakeProject generates the code would detect that you are ""really"" in MakeProject mode. Sigh... Are you saying that the 'patched' version of MakeProject had many more headers thus read data beyond some threshold which makes rdicts significantly improve the situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:89,availability,slo,slowdown,89,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:780,availability,slo,slowdown,780,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:516,deployability,modul,module,516,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:837,deployability,modul,module,837,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:499,energy efficiency,load,loading,499,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:622,energy efficiency,load,loading,622,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:516,modifiability,modul,module,516,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:837,modifiability,modul,module,837,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:499,performance,load,loading,499,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:622,performance,load,loading,622,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:701,performance,I/O,I/O,701,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:766,performance,I/O,I/O,766,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:906,performance,I/O,I/O,906,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:5,reliability,doe,doesn,5,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:89,reliability,slo,slowdown,89,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:685,reliability,doe,does,685,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:780,reliability,slo,slowdown,780,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:410,safety,avoid,avoiding,410,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:516,safety,modul,module,516,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:837,safety,modul,module,837,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:203,testability,understand,understand,203,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:234,usability,user,user,234,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1019,usability,user,user,1019,"> It doesn't improve things basically for entire roottest -- on the contrary it shows 2% slowdown. I think that if we want to harvest this 2% (by skipping the root-pcm sometimes) we are going to have to understand better what in the ""user"" code (i.e. the set of headers and functionality) and what in our code makes the difference. For example, if in the large example, the gain from the root-pcm is thanks to avoiding a large number of data-member offset calculations and large number of AST nodes loading from the module to get the information, and (still for example), if the cost in the other cases (the 2%) is due to loading the TProtoClass but not using them because the example does not do any I/O, then the conclusion would be that the ""cost of doing faster I/O is the 2% slowdown and that their would be 2 options (speed-up the module case even more than now or speed-up the root-pcm case when no I/O is done). [Of course in either we would have the challenge of doing so without costing (more?) for the other user cases]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:188,availability,degrad,degradation,188,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:265,energy efficiency,load,loading,265,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:85,performance,I/O,I/O,85,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:176,performance,perform,performance,176,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:265,performance,load,loading,265,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:188,reliability,degrad,degradation,188,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:248,reliability,doe,does,248,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:44,security,sign,significant,44,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:26,usability,help,help,26,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:176,usability,perform,performance,176,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:34,deployability,modul,modules,34,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:156,energy efficiency,optim,optimizing,156,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:34,modifiability,modul,modules,34,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:54,performance,time,time,54,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:156,performance,optimiz,optimizing,156,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:34,safety,modul,modules,34,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:229,testability,understand,understand,229,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:360,usability,user,users,360,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:440,availability,slo,slows,440,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:64,deployability,modul,module,64,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:307,deployability,depend,depends,307,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:419,energy efficiency,load,load,419,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:307,integrability,depend,depends,307,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:252,interoperability,specif,specific,252,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:64,modifiability,modul,module,64,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:307,modifiability,depend,depends,307,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:419,performance,load,load,419,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:440,reliability,slo,slows,440,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:64,safety,modul,module,64,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:307,safety,depend,depends,307,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:307,testability,depend,depends,307,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:72,usability,User,Users,72,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:160,usability,workflow,workflows,160,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:268,deployability,depend,dependent,268,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:909,energy efficiency,load,loading,909,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:980,energy efficiency,reduc,reduce,980,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1049,energy efficiency,load,loading,1049,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:268,integrability,depend,dependent,268,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:268,modifiability,depend,dependent,268,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:607,performance,I/O,I/O,607,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:909,performance,load,loading,909,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1049,performance,load,loading,1049,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:634,reliability,doe,does,634,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:268,safety,depend,dependent,268,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:268,testability,depend,dependent,268,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:476,testability,emul,emulation,476,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:643,testability,emul,emulate,643,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:372,usability,User,Users,372,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1124,availability,reliab,reliable,1124,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:270,deployability,depend,dependent,270,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1001,deployability,modul,modules,1001,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:920,energy efficiency,load,loading,920,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1173,energy efficiency,reduc,reduce,1173,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1242,energy efficiency,load,loading,1242,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:270,integrability,depend,dependent,270,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:270,modifiability,depend,dependent,270,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1001,modifiability,modul,modules,1001,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:618,performance,I/O,I/O,618,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:920,performance,load,loading,920,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1242,performance,load,loading,1242,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:645,reliability,doe,does,645,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1124,reliability,reliab,reliable,1124,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:270,safety,depend,dependent,270,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1001,safety,modul,modules,1001,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1057,safety,test,test,1057,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:270,testability,depend,dependent,270,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:487,testability,emul,emulation,487,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:654,testability,emul,emulate,654,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1057,testability,test,test,1057,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:1075,testability,context,context,1075,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:378,usability,User,Users,378,"> I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? > . > > Users do not use make project. > . > MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So _yes_ this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). In principle the new implementation due to modules should allow us to easily turn off rootpcms and test in the cmssw context. Then I guess the results should be more reliable. > . > Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). That's what I am after. Do you have something in particular in mind?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:447,availability,avail,available,447,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:36,energy efficiency,reduc,reduce,36,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:105,energy efficiency,load,loading,105,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:199,energy efficiency,Current,Currently,199,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:231,energy efficiency,load,loaded,231,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:258,energy efficiency,load,loaded,258,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:674,energy efficiency,load,load,674,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:717,energy efficiency,load,load,717,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:486,modifiability,exten,extend,486,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:105,performance,load,loading,105,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:231,performance,load,loaded,231,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:258,performance,load,loaded,258,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:361,performance,content,content,361,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:457,performance,content,content,457,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:674,performance,load,load,674,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:717,performance,load,load,717,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:773,performance,time,time,773,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:447,reliability,availab,available,447,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:447,safety,avail,available,447,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:447,security,availab,available,447,">> Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed). > That's what I am after. Do you have something in particular in mind. Currently, the rootpcms file is loaded when the library is loaded. Instead it could be open whenever there is a call to TClassTable::GetProtoClass for one of its content. This would require:. (a) have a (persistent) data structure that list of the available content of the rootpcms. (b) extend the TClassTable data structure to record that information. (c) in TClassTable::GetProtoClass if the TProtoClass is no there but there is rootpcms listed, then open the rootpcms and load. When opening the rootpcms one should load all the TProtoClasses since opening the file takes time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:63,deployability,infrastructur,infrastructure,63,This pull request has a lot of useful information. The current infrastructure is flexible and can disable rootpcms if required for further performance studies. Let's close this now and come back to it if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:55,energy efficiency,current,current,55,This pull request has a lot of useful information. The current infrastructure is flexible and can disable rootpcms if required for further performance studies. Let's close this now and come back to it if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:139,performance,perform,performance,139,This pull request has a lot of useful information. The current infrastructure is flexible and can disable rootpcms if required for further performance studies. Let's close this now and come back to it if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:139,usability,perform,performance,139,This pull request has a lot of useful information. The current infrastructure is flexible and can disable rootpcms if required for further performance studies. Let's close this now and come back to it if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3012:166,usability,close,close,166,This pull request has a lot of useful information. The current infrastructure is flexible and can disable rootpcms if required for further performance studies. Let's close this now and come back to it if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3012
https://github.com/root-project/root/pull/3013:48,deployability,patch,patch,48,> libGenVector_G__GenVector32_rdict.pcm. > This patch removes the generation of it as it is unused. In which case is it not used?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3013
https://github.com/root-project/root/pull/3013:48,safety,patch,patch,48,> libGenVector_G__GenVector32_rdict.pcm. > This patch removes the generation of it as it is unused. In which case is it not used?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3013
https://github.com/root-project/root/pull/3013:48,security,patch,patch,48,> libGenVector_G__GenVector32_rdict.pcm. > This patch removes the generation of it as it is unused. In which case is it not used?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3013
https://github.com/root-project/root/pull/3013:22,energy efficiency,load,load,22,"Looks like we somehow load this, according to @Axel-Naumann. I will close the PR for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3013
https://github.com/root-project/root/pull/3013:22,performance,load,load,22,"Looks like we somehow load this, according to @Axel-Naumann. I will close the PR for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3013
https://github.com/root-project/root/pull/3013:68,usability,close,close,68,"Looks like we somehow load this, according to @Axel-Naumann. I will close the PR for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3013
https://github.com/root-project/root/pull/3014:4,availability,error,error,4,The error are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3014
https://github.com/root-project/root/pull/3014:4,performance,error,error,4,The error are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3014
https://github.com/root-project/root/pull/3014:4,safety,error,error,4,The error are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3014
https://github.com/root-project/root/pull/3014:4,usability,error,error,4,The error are unrelated/pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3014
https://github.com/root-project/root/pull/3015:4,availability,error,error,4,The error are pre-existing/unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3015
https://github.com/root-project/root/pull/3015:4,performance,error,error,4,The error are pre-existing/unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3015
https://github.com/root-project/root/pull/3015:4,safety,error,error,4,The error are pre-existing/unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3015
https://github.com/root-project/root/pull/3015:4,usability,error,error,4,The error are pre-existing/unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3015
https://github.com/root-project/root/pull/3016:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_veccore=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3016
https://github.com/root-project/root/pull/3017:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3017
https://github.com/root-project/root/pull/3020:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3020
https://github.com/root-project/root/pull/3020:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3020
https://github.com/root-project/root/pull/3020:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3020
https://github.com/root-project/root/pull/3020:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3020
https://github.com/root-project/root/pull/3020:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3020
https://github.com/root-project/root/pull/3020:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3020
https://github.com/root-project/root/pull/3020:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3020
https://github.com/root-project/root/pull/3021:27,deployability,releas,released,27,"@imaxoi ROOT v6.16 will be released in a few weeks, with all your features :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3021
https://github.com/root-project/root/pull/3021:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3021
https://github.com/root-project/root/pull/3022:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_cfitsio=ON -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_cfitsio=ON -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_cfitsio=ON -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:16,safety,review,review,16,"@amadio Can you review this PR, please? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:16,testability,review,review,16,"@amadio Can you review this PR, please? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:50,safety,review,review,50,"Sorry, I've seen it before, but forgot to add the review. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:50,testability,review,review,50,"Sorry, I've seen it before, but forgot to add the review. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:52,safety,review,review,52,"> Sorry, I've seen it before, but forgot to add the review. Cheers,. No problem, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3022:52,testability,review,review,52,"> Sorry, I've seen it before, but forgot to add the review. Cheers,. No problem, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3022
https://github.com/root-project/root/pull/3024:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:44,safety,test,tests,44,"The RooFit, RooStats and HistFactory stress tests all seem to work still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:44,testability,test,tests,44,"The RooFit, RooStats and HistFactory stress tests all seem to work still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:28,availability,failur,failures,28,"I don't think these Jenkins failures are caused by this PR, are they? @lmoneta @hageboeck",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:28,deployability,fail,failures,28,"I don't think these Jenkins failures are caused by this PR, are they? @lmoneta @hageboeck",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:28,performance,failur,failures,28,"I don't think these Jenkins failures are caused by this PR, are they? @lmoneta @hageboeck",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:28,reliability,fail,failures,28,"I don't think these Jenkins failures are caused by this PR, are they? @lmoneta @hageboeck",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:4,availability,failur,failures,4,The failures should be independent. I will try however to rebuild this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:4,deployability,fail,failures,4,The failures should be independent. I will try however to rebuild this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:4,performance,failur,failures,4,The failures should be independent. I will try however to rebuild this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:4,reliability,fail,failures,4,The failures should be independent. I will try however to rebuild this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3024:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3024
https://github.com/root-project/root/pull/3028:74,integrability,discover,discovered,74,"Results verified! The PR is ready for merging. However, in testing it was discovered that there is a difference in output between `TMVApplication` and stand-alone execution of the BDT's. This is due to a difference in the `GoesRight` function. `TMVA::DecisionTree` cuts on `>=` while the stand-alone cuts on `>`. @biemster If you could include the fix to `GoesRight()` here, that would be terrific.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:74,interoperability,discover,discovered,74,"Results verified! The PR is ready for merging. However, in testing it was discovered that there is a difference in output between `TMVApplication` and stand-alone execution of the BDT's. This is due to a difference in the `GoesRight` function. `TMVA::DecisionTree` cuts on `>=` while the stand-alone cuts on `>`. @biemster If you could include the fix to `GoesRight()` here, that would be terrific.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:59,safety,test,testing,59,"Results verified! The PR is ready for merging. However, in testing it was discovered that there is a difference in output between `TMVApplication` and stand-alone execution of the BDT's. This is due to a difference in the `GoesRight` function. `TMVA::DecisionTree` cuts on `>=` while the stand-alone cuts on `>`. @biemster If you could include the fix to `GoesRight()` here, that would be terrific.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:8,testability,verif,verified,8,"Results verified! The PR is ready for merging. However, in testing it was discovered that there is a difference in output between `TMVApplication` and stand-alone execution of the BDT's. This is due to a difference in the `GoesRight` function. `TMVA::DecisionTree` cuts on `>=` while the stand-alone cuts on `>`. @biemster If you could include the fix to `GoesRight()` here, that would be terrific.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:59,testability,test,testing,59,"Results verified! The PR is ready for merging. However, in testing it was discovered that there is a difference in output between `TMVApplication` and stand-alone execution of the BDT's. This is due to a difference in the `GoesRight` function. `TMVA::DecisionTree` cuts on `>=` while the stand-alone cuts on `>`. @biemster If you could include the fix to `GoesRight()` here, that would be terrific.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:74,usability,discov,discovered,74,"Results verified! The PR is ready for merging. However, in testing it was discovered that there is a difference in output between `TMVApplication` and stand-alone execution of the BDT's. This is due to a difference in the `GoesRight` function. `TMVA::DecisionTree` cuts on `>=` while the stand-alone cuts on `>`. @biemster If you could include the fix to `GoesRight()` here, that would be terrific.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:21,deployability,patch,patch,21,I'll commit one more patch with a fix to `GoesRight()` tonight or tomorrow to this branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:21,safety,patch,patch,21,I'll commit one more patch with a fix to `GoesRight()` tonight or tomorrow to this branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:21,security,patch,patch,21,I'll commit one more patch with a fix to `GoesRight()` tonight or tomorrow to this branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3028:21,usability,help,help,21,"No problem, happy to help and same to you and all ROOTers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3028
https://github.com/root-project/root/pull/3030:109,energy efficiency,core,core,109,Quick note; we usually prefer to have the plugin based class in their own directory/library. (this allow the core library to not require the optional libraries),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:42,interoperability,plug,plugin,42,Quick note; we usually prefer to have the plugin based class in their own directory/library. (this allow the core library to not require the optional libraries),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:23,usability,prefer,prefer,23,Quick note; we usually prefer to have the plugin based class in their own directory/library. (this allow the core library to not require the optional libraries),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:173,deployability,depend,depends,173,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:218,energy efficiency,load,loads,218,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:173,integrability,depend,depends,173,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:173,modifiability,depend,depends,173,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:218,performance,load,loads,218,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:173,safety,depend,depends,173,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:10,testability,understand,understand,10,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:173,testability,depend,depends,173,"@pcanal I understand this as follows: the `RRawFileDavix` class would move into the io/davix source space, which creates a libRRawFileDavix. The libRRawFileDavix statically depends on libRDavix. And libRIO dynamically loads libRRawFileDavix. Is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:115,deployability,manag,management,115,Yes it is correct. Except that the davix part may need to be folded into the regular RDavix library for the plugin management to work properly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:115,energy efficiency,manag,management,115,Yes it is correct. Except that the davix part may need to be folded into the regular RDavix library for the plugin management to work properly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:108,interoperability,plug,plugin,108,Yes it is correct. Except that the davix part may need to be folded into the regular RDavix library for the plugin management to work properly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:19,safety,Except,Except,19,Yes it is correct. Except that the davix part may need to be folded into the regular RDavix library for the plugin management to work properly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:115,safety,manag,management,115,Yes it is correct. Except that the davix part may need to be folded into the regular RDavix library for the plugin management to work properly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:51,performance,time,time,51,"Apologies for leaving the PR stale for such a long time! Now, I rebased and I think all comments are addressed. The `RRawFile` class would be helpful for `RNTuple` raw file storage. Could this get another round of review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:214,safety,review,review,214,"Apologies for leaving the PR stale for such a long time! Now, I rebased and I think all comments are addressed. The `RRawFile` class would be helpful for `RNTuple` raw file storage. Could this get another round of review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:214,testability,review,review,214,"Apologies for leaving the PR stale for such a long time! Now, I rebased and I think all comments are addressed. The `RRawFile` class would be helpful for `RNTuple` raw file storage. Could this get another round of review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3030:142,usability,help,helpful,142,"Apologies for leaving the PR stale for such a long time! Now, I rebased and I think all comments are addressed. The `RRawFile` class would be helpful for `RNTuple` raw file storage. Could this get another round of review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3030
https://github.com/root-project/root/pull/3031:11,deployability,build,build,11,@phsft-bot build just on ROOT-centos7,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3031
https://github.com/root-project/root/pull/3031:11,deployability,build,build,11,@phsft-bot build just on ROOT-centos7/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3031
https://github.com/root-project/root/pull/3031:11,deployability,build,build,11,@phsft-bot build just on ROOT-centos7/noimt with flags -Dgeocad=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3031
https://github.com/root-project/root/pull/3031:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora28/python3 with flags -Dgeocad=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3031
https://github.com/root-project/root/pull/3031:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora28/python3 with flags -Dgeocad=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3031
https://github.com/root-project/root/pull/3031:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora28/python3 with flags -Dgeocad=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3031
https://github.com/root-project/root/pull/3032:10,reliability,doe,does,10,@bluehood does this help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3032
https://github.com/root-project/root/pull/3032:20,usability,help,help,20,@bluehood does this help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3032
https://github.com/root-project/root/pull/3032:11,deployability,build,build,11,@phsft-bot build for a last time before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3032
https://github.com/root-project/root/pull/3032:28,performance,time,time,28,@phsft-bot build for a last time before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3032
https://github.com/root-project/root/pull/3033:46,integrability,inject,injected,46,Something funny is happening with the payload injected in cling. All but one test pass. I am debugging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3033
https://github.com/root-project/root/pull/3033:77,safety,test,test,77,Something funny is happening with the payload injected in cling. All but one test pass. I am debugging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3033
https://github.com/root-project/root/pull/3033:46,security,inject,injected,46,Something funny is happening with the payload injected in cling. All but one test pass. I am debugging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3033
https://github.com/root-project/root/pull/3033:77,testability,test,test,77,Something funny is happening with the payload injected in cling. All but one test pass. I am debugging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3033
https://github.com/root-project/root/pull/3035:137,energy efficiency,current,current,137,"Hi @bluehood , this PR was meant to trigger discussion and I appreciate a lot the idea of a `DataDescription` config object. I think the current proposal needs to be abandoned and some brain power needs to be invested into the new interface. I will be back with something more concrete in that direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3035
https://github.com/root-project/root/pull/3035:191,energy efficiency,power,power,191,"Hi @bluehood , this PR was meant to trigger discussion and I appreciate a lot the idea of a `DataDescription` config object. I think the current proposal needs to be abandoned and some brain power needs to be invested into the new interface. I will be back with something more concrete in that direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3035
https://github.com/root-project/root/pull/3035:231,integrability,interfac,interface,231,"Hi @bluehood , this PR was meant to trigger discussion and I appreciate a lot the idea of a `DataDescription` config object. I think the current proposal needs to be abandoned and some brain power needs to be invested into the new interface. I will be back with something more concrete in that direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3035
https://github.com/root-project/root/pull/3035:231,interoperability,interfac,interface,231,"Hi @bluehood , this PR was meant to trigger discussion and I appreciate a lot the idea of a `DataDescription` config object. I think the current proposal needs to be abandoned and some brain power needs to be invested into the new interface. I will be back with something more concrete in that direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3035
https://github.com/root-project/root/pull/3035:231,modifiability,interfac,interface,231,"Hi @bluehood , this PR was meant to trigger discussion and I appreciate a lot the idea of a `DataDescription` config object. I think the current proposal needs to be abandoned and some brain power needs to be invested into the new interface. I will be back with something more concrete in that direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3035
https://github.com/root-project/root/pull/3035:16,usability,close,close,16,@dpiparo can we close this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3035
https://github.com/root-project/root/pull/3038:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3038
https://github.com/root-project/root/pull/3038:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3038
https://github.com/root-project/root/pull/3038:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora27/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3038
https://github.com/root-project/root/pull/3038:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3038
https://github.com/root-project/root/pull/3043:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:4,availability,failur,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:4,deployability,fail,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:4,performance,failur,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:4,reliability,fail,failures,4,The failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:25,availability,failur,failures,25,"Yup, @vgvassilev - build failures were unrelated! :-) And fixed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:19,deployability,build,build,19,"Yup, @vgvassilev - build failures were unrelated! :-) And fixed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:25,deployability,fail,failures,25,"Yup, @vgvassilev - build failures were unrelated! :-) And fixed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:25,performance,failur,failures,25,"Yup, @vgvassilev - build failures were unrelated! :-) And fixed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:25,reliability,fail,failures,25,"Yup, @vgvassilev - build failures were unrelated! :-) And fixed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:21,availability,failur,failure,21,What about Travis CI failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:21,deployability,fail,failure,21,What about Travis CI failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:21,performance,failur,failure,21,What about Travis CI failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:21,reliability,fail,failure,21,What about Travis CI failure?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3043:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3043
https://github.com/root-project/root/pull/3044:21,deployability,fail,failing,21,@bellenot Windows is failing due to git lock files again. Could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3044
https://github.com/root-project/root/pull/3044:40,performance,lock,lock,40,@bellenot Windows is failing due to git lock files again. Could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3044
https://github.com/root-project/root/pull/3044:21,reliability,fail,failing,21,@bellenot Windows is failing due to git lock files again. Could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3044
https://github.com/root-project/root/pull/3044:40,security,lock,lock,40,@bellenot Windows is failing due to git lock files again. Could you please take a look?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3044
https://github.com/root-project/root/pull/3045:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3045
https://github.com/root-project/root/pull/3046:11,deployability,version,version,11,This first version is there for testing. Adequate doc will be added before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:11,integrability,version,version,11,This first version is there for testing. Adequate doc will be added before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:11,modifiability,version,version,11,This first version is there for testing. Adequate doc will be added before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:32,safety,test,testing,32,This first version is there for testing. Adequate doc will be added before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:32,testability,test,testing,32,This first version is there for testing. Adequate doc will be added before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:50,deployability,build,builds,50,"thanks @pcanal for spinning off the ""intensive PR builds""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:103,availability,failur,failures,103,"Per https://github.com/root-project/root/pull/2917#issuecomment-441813991 (and further), the 4 sets of failures are pre-existing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:103,deployability,fail,failures,103,"Per https://github.com/root-project/root/pull/2917#issuecomment-441813991 (and further), the 4 sets of failures are pre-existing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:103,performance,failur,failures,103,"Per https://github.com/root-project/root/pull/2917#issuecomment-441813991 (and further), the 4 sets of failures are pre-existing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3046:103,reliability,fail,failures,103,"Per https://github.com/root-project/root/pull/2917#issuecomment-441813991 (and further), the 4 sets of failures are pre-existing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3046
https://github.com/root-project/root/pull/3050:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3050
https://github.com/root-project/root/pull/3051:356,energy efficiency,core,cores,356,"Note that this is a significant change, especially if you make the file opening parallel, for the remote server (which will now see many file opening concurrently or at least in very close succession). [edited: humm ... or is it only doubling the number of file opens ....]. At the very least I would limit the number of file opening to the number of taks/cores.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:80,performance,parallel,parallel,80,"Note that this is a significant change, especially if you make the file opening parallel, for the remote server (which will now see many file opening concurrently or at least in very close succession). [edited: humm ... or is it only doubling the number of file opens ....]. At the very least I would limit the number of file opening to the number of taks/cores.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:150,performance,concurren,concurrently,150,"Note that this is a significant change, especially if you make the file opening parallel, for the remote server (which will now see many file opening concurrently or at least in very close succession). [edited: humm ... or is it only doubling the number of file opens ....]. At the very least I would limit the number of file opening to the number of taks/cores.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:20,security,sign,significant,20,"Note that this is a significant change, especially if you make the file opening parallel, for the remote server (which will now see many file opening concurrently or at least in very close succession). [edited: humm ... or is it only doubling the number of file opens ....]. At the very least I would limit the number of file opening to the number of taks/cores.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:183,usability,close,close,183,"Note that this is a significant change, especially if you make the file opening parallel, for the remote server (which will now see many file opening concurrently or at least in very close succession). [edited: humm ... or is it only doubling the number of file opens ....]. At the very least I would limit the number of file opening to the number of taks/cores.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:3,energy efficiency,measur,measured,3,We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:69,performance,network,network,69,We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:69,security,network,network,69,We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:17,availability,restor,restores,17,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:308,energy efficiency,load,load,308,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:372,integrability,event,event,372,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:116,performance,perform,performance,116,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:308,performance,load,load,308,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:363,performance,parallel,parallel,363,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:433,performance,parallel,parallel,433,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:17,reliability,restor,restores,17,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:410,reliability,doe,does,410,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:30,usability,behavi,behavior,30,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:116,usability,perform,performance,116,"@dpiparo this PR restores the behavior to what we do in v6.14. I agree that if you are opening 60 files via eos the performance hit you get is important, but after discussions with you and @etejedor, I don't know how else to fix the (critical) bug. @pcanal this is doubling the number of file opens, but the load on the remote server will be the same as during a parallel event loop. Note however that this PR does not introduce the parallel sweep yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:204,deployability,releas,release,204,"@dpiparo this is not to say that we shouldn't try to figure out how to do things without opening all files twice (which we did anyway in presence of friend trees or a TEntryList, by the way..), but since release of v6.16 is drawing closer I thought it was urgent to fix the bug first",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:224,energy efficiency,draw,drawing,224,"@dpiparo this is not to say that we shouldn't try to figure out how to do things without opening all files twice (which we did anyway in presence of friend trees or a TEntryList, by the way..), but since release of v6.16 is drawing closer I thought it was urgent to fix the bug first",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:232,usability,close,closer,232,"@dpiparo this is not to say that we shouldn't try to figure out how to do things without opening all files twice (which we did anyway in presence of friend trees or a TEntryList, by the way..), but since release of v6.16 is drawing closer I thought it was urgent to fix the bug first",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:310,availability,servic,services,310,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:562,availability,slo,slowly,562,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:310,deployability,servic,services,310,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:5,energy efficiency,measur,measured,5,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:310,integrability,servic,services,310,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:310,modifiability,servic,services,310,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:71,performance,network,network,71,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:422,performance,throttl,throttle,422,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:562,reliability,slo,slowly,562,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:292,safety,avoid,avoid,292,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:71,security,network,network,71,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:300,security,denial-of-servic,denial-of-services,300,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:319,security,attack,attack,319,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:197,usability,user,user,197,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:415,usability,stop,stop,415,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:509,usability,paus,pause,509,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large? I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:39,integrability,event,event,39,"@pcanal that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:97,performance,parallel,parallelism,97,"@pcanal that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:59,reliability,doe,does,59,"@pcanal that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:232,availability,cluster,cluster,232,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:232,deployability,cluster,cluster,232,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:280,energy efficiency,measur,measured,280,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:562,energy efficiency,Core,Cores,562,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:33,integrability,event,event,33,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:91,performance,parallel,parallelism,91,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:346,performance,network,network,346,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:53,reliability,doe,does,53,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:209,safety,input,input,209,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:346,security,network,network,346,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:209,usability,input,input,209,"> that's what's happening in the event loop. this PR does not have any changes in terms of parallelism though, so I wouldn't focus ot this here. I am confused. I read:. > always do a preliminary pass over all input files to extract cluster boundaries and entry numbers. and. > We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. and I am saying (giving those lines) that instead of doing a 'preliminary pass over *all* (eg 59) files', you do only a 'preliminary pass over ""Number of Cores"" files (eg 8 or so))'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:127,energy efficiency,Core,Core,127,"> @pcanal the preliminary pass is sequential. Still, it opens 'many' files in rapid succession and you could stop at Number of Core/Tasks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:109,usability,stop,stop,109,"> @pcanal the preliminary pass is sequential. Still, it opens 'many' files in rapid succession and you could stop at Number of Core/Tasks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:302,availability,slo,slower,302,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:990,availability,state,state,990,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:418,deployability,build,build,418,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:486,deployability,build,build,486,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:990,integrability,state,state,990,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:153,performance,time,time,153,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:212,performance,time,time,212,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:230,performance,parallel,parallel,230,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:811,performance,synch,synchronization,811,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:99,reliability,doe,does,99,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:302,reliability,slo,slower,302,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:582,safety,avoid,avoid,582,"@pcanal yes, I had no idea that could be a problem (is it really? isn't that what an xrootd server does?): consider that we only have one file open at a time in this first phase, and only nThread files open at a time during their parallel processing. Anyway to do what you propose without getting even slower we need some non-trivial development effort:. * for TChains to return global entry numbers, we would need to build them with the first N files, process them, then destroy them, build a new TChain with the first N*2 files, process them...or possibly something smarter. * to avoid closing the bunch of files after checking their entries and reopening when processing them, we would need to somehow get around the ""one file, one thread rule"", or open the file in the same thread that process it but add a synchronization point at which we gather all the entry numbers. I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:273,availability,state,state,273,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:453,availability,slo,slow,453,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:66,deployability,resourc,resources,66,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:66,energy efficiency,resourc,resources,66,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:695,energy efficiency,measur,measure,695,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:273,integrability,state,state,273,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:676,integrability,event,eventually,676,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:835,modifiability,scenario,scenario,835,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:66,performance,resourc,resources,66,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:581,performance,latenc,latency,581,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:758,performance,latenc,latency,758,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:35,reliability,doe,does,35,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:453,reliability,slo,slow,453,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:66,safety,resourc,resources,66,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:66,testability,resourc,resources,66,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:398,usability,stop,stop,398,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:581,usability,latenc,latency,581,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3051:758,usability,latenc,latency,758,"> isn't that what an xrootd server does? They don't have infinite resources either :). > or possibly something smarter. Definitively the way to go .... :). > I would still argue that all of this is beyond the scope of this PR -- which is meant to go back to the same, sane state of v6.14. Fair enough. However a final note. In its first implementations, TChain was doing exactly that but we had to stop (and introduce GetEntriesFast) because it was too slow. For example, a number was quote earlier (~.3s) that is 'small' looking but I have to assume that this number is for a low latency link (CERN to CERN maybe) to a high quality server with 'small' TTree objects. We will eventually have to measure the cost for large chains (1000s files) through a high latency link (to a crummy server) with 'large' TTree objects [aka worst case scenario] so that we have a better picture of the trade-off that we are choosing to make.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3051
https://github.com/root-project/root/pull/3053:11,deployability,build,build,11,@phsft-bot build just on ROOT-centos7/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3053
https://github.com/root-project/root/pull/3056:59,reliability,doe,does,59,Won't work; https://github.com/root-project/root/pull/3057 does it right.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3056
https://github.com/root-project/root/pull/3061:0,availability,Ping,Ping,0,Ping @lmoneta,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:178,reliability,pra,pragma,178,"Hi @Axel-Naumann , I understand the rationale behind the ""double-tap"", no escape there, but why is it necessary to `Declare` after having invoked `ProcessLine`? Couldn't the opt pragma (and perhaps the nullptrcheck disabling) be just used with `ProcessLine` and `Declare` removed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:21,testability,understand,understand,21,"Hi @Axel-Naumann , I understand the rationale behind the ""double-tap"", no escape there, but why is it necessary to `Declare` after having invoked `ProcessLine`? Couldn't the opt pragma (and perhaps the nullptrcheck disabling) be just used with `ProcessLine` and `Declare` removed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:133,integrability,interfac,interface,133,"It's not just the opt pragma - `Declare()` also disables the interpreter extensions, like nullptr check. We'd need a new interpreter interface for this selection of features: yes autoparsing + autoloading, no to the other interpreter extensions. I'm not in love with that solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:133,interoperability,interfac,interface,133,"It's not just the opt pragma - `Declare()` also disables the interpreter extensions, like nullptr check. We'd need a new interpreter interface for this selection of features: yes autoparsing + autoloading, no to the other interpreter extensions. I'm not in love with that solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:73,modifiability,extens,extensions,73,"It's not just the opt pragma - `Declare()` also disables the interpreter extensions, like nullptr check. We'd need a new interpreter interface for this selection of features: yes autoparsing + autoloading, no to the other interpreter extensions. I'm not in love with that solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:133,modifiability,interfac,interface,133,"It's not just the opt pragma - `Declare()` also disables the interpreter extensions, like nullptr check. We'd need a new interpreter interface for this selection of features: yes autoparsing + autoloading, no to the other interpreter extensions. I'm not in love with that solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:234,modifiability,extens,extensions,234,"It's not just the opt pragma - `Declare()` also disables the interpreter extensions, like nullptr check. We'd need a new interpreter interface for this selection of features: yes autoparsing + autoloading, no to the other interpreter extensions. I'm not in love with that solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:22,reliability,pra,pragma,22,"It's not just the opt pragma - `Declare()` also disables the interpreter extensions, like nullptr check. We'd need a new interpreter interface for this selection of features: yes autoparsing + autoloading, no to the other interpreter extensions. I'm not in love with that solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3061:99,testability,plan,planned,99,@lmoneta Would it be possible to merge this pull request? It is really important to have it in the planned tags for v6-16 and v6-14.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3061
https://github.com/root-project/root/pull/3063:6,availability,error,errors,6,"Weird errors, pretty much unrelated with the changes. I do not have them on my installation. I'll try re-running.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:79,deployability,instal,installation,79,"Weird errors, pretty much unrelated with the changes. I do not have them on my installation. I'll try re-running.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:6,performance,error,errors,6,"Weird errors, pretty much unrelated with the changes. I do not have them on my installation. I'll try re-running.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:6,safety,error,errors,6,"Weird errors, pretty much unrelated with the changes. I do not have them on my installation. I'll try re-running.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:6,usability,error,errors,6,"Weird errors, pretty much unrelated with the changes. I do not have them on my installation. I'll try re-running.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:11,deployability,build,build,11,"@phsft-bot build just on ROOT-centos7/python3, ROOT-fedora27/noimt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:64,interoperability,plug,plugin,64,"@gganis These are known, at least the statusbitcheck and xrootd plugin. Fixes for them are already on the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:38,usability,statu,statusbitcheck,38,"@gganis These are known, at least the statusbitcheck and xrootd plugin. Fixes for them are already on the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:14,availability,error,errors,14,None of these errors are related to your change; they're all in the works!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:14,performance,error,errors,14,None of these errors are related to your change; they're all in the works!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:14,safety,error,errors,14,None of these errors are related to your change; they're all in the works!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:14,usability,error,errors,14,None of these errors are related to your change; they're all in the works!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3063:243,usability,tool,tools,243,"Hi all, once @Axel-Naumann commented about a previous PR in this area https://github.com/root-project/root/pull/1544#issuecomment-376410136 . Did the work about man pages take place and do we now have informative pages about the fact that the tools disappeared?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3063
https://github.com/root-project/root/pull/3065:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_openssl=ON -Dbuiltin_xrootd=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3065
https://github.com/root-project/root/pull/3065:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17 with flags -Dbuiltin_openssl=ON -Dbuiltin_xrootd=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3065
https://github.com/root-project/root/pull/3065:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17 with flags -Dbuiltin_openssl=ON -Dbuiltin_xrootd=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3065
https://github.com/root-project/root/pull/3068:295,availability,down,down,295,ah...@dpiparo @Axel-Naumann @etejedor to backport this bugfix I would need to somehow get the number of entries that are going to be processed by a task from within that task. I guess we could either:. * backport `TTreeReader::GetEntriesRange`. * or add a facility to `TTreeProcessorMT` to pass down the range processed to the task. What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3068
https://github.com/root-project/root/pull/3068:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3068
https://github.com/root-project/root/pull/3068:62,availability,consist,consistent,62,> backport TTreeReader::GetEntriesRange. seems to be the more consistent (with master) approach?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3068
https://github.com/root-project/root/pull/3068:62,usability,consist,consistent,62,> backport TTreeReader::GetEntriesRange. seems to be the more consistent (with master) approach?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3068
https://github.com/root-project/root/pull/3070:0,availability,Failur,Failures,0,Failures are not related to the change in this PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3070
https://github.com/root-project/root/pull/3070:0,deployability,Fail,Failures,0,Failures are not related to the change in this PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3070
https://github.com/root-project/root/pull/3070:0,performance,Failur,Failures,0,Failures are not related to the change in this PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3070
https://github.com/root-project/root/pull/3070:0,reliability,Fail,Failures,0,Failures are not related to the change in this PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3070
https://github.com/root-project/root/pull/3071:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_openssl=ON -Dbuiltin_xrootd=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3071
https://github.com/root-project/root/pull/3075:20,deployability,build,builds,20,I'll merge: less PR builds failing is a change in the right direction; @amadio please to a post-commit review next week! I'll merge without squashing because these changes make more sense as separate commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3075
https://github.com/root-project/root/pull/3075:27,deployability,fail,failing,27,I'll merge: less PR builds failing is a change in the right direction; @amadio please to a post-commit review next week! I'll merge without squashing because these changes make more sense as separate commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3075
https://github.com/root-project/root/pull/3075:27,reliability,fail,failing,27,I'll merge: less PR builds failing is a change in the right direction; @amadio please to a post-commit review next week! I'll merge without squashing because these changes make more sense as separate commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3075
https://github.com/root-project/root/pull/3075:103,safety,review,review,103,I'll merge: less PR builds failing is a change in the right direction; @amadio please to a post-commit review next week! I'll merge without squashing because these changes make more sense as separate commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3075
https://github.com/root-project/root/pull/3075:103,testability,review,review,103,I'll merge: less PR builds failing is a change in the right direction; @amadio please to a post-commit review next week! I'll merge without squashing because these changes make more sense as separate commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3075
https://github.com/root-project/root/pull/3078:20,energy efficiency,current,current,20,Merge conflict with current master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3078
https://github.com/root-project/root/pull/3078:6,interoperability,conflict,conflict,6,Merge conflict with current master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3078
https://github.com/root-project/root/pull/3080:41,deployability,releas,release,41,@linev Can you also put a PR against the release branch. thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3080
https://github.com/root-project/root/pull/3083:157,availability,ping,ping,157,"@hageboeck , nice PR. Do you think it's possible to have also an ASCII version of RooDatasets which is directly edible by RDataFrame via a RCsvDS? @etejedor ping",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3083:71,deployability,version,version,71,"@hageboeck , nice PR. Do you think it's possible to have also an ASCII version of RooDatasets which is directly edible by RDataFrame via a RCsvDS? @etejedor ping",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3083:71,integrability,version,version,71,"@hageboeck , nice PR. Do you think it's possible to have also an ASCII version of RooDatasets which is directly edible by RDataFrame via a RCsvDS? @etejedor ping",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3083:71,modifiability,version,version,71,"@hageboeck , nice PR. Do you think it's possible to have also an ASCII version of RooDatasets which is directly edible by RDataFrame via a RCsvDS? @etejedor ping",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3083:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3083:0,deployability,Build,Build,0,Build again because tests were changed. Want to rerun them in the CI.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3083:20,safety,test,tests,20,Build again because tests were changed. Want to rerun them in the CI.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3083:20,testability,test,tests,20,Build again because tests were changed. Want to rerun them in the CI.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3083
https://github.com/root-project/root/pull/3086:0,availability,failur,failures,0,failures are unrelated (windows fails to download roottest),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3086
https://github.com/root-project/root/pull/3086:41,availability,down,download,41,failures are unrelated (windows fails to download roottest),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3086
https://github.com/root-project/root/pull/3086:0,deployability,fail,failures,0,failures are unrelated (windows fails to download roottest),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3086
https://github.com/root-project/root/pull/3086:32,deployability,fail,fails,32,failures are unrelated (windows fails to download roottest),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3086
https://github.com/root-project/root/pull/3086:0,performance,failur,failures,0,failures are unrelated (windows fails to download roottest),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3086
https://github.com/root-project/root/pull/3086:0,reliability,fail,failures,0,failures are unrelated (windows fails to download roottest),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3086
https://github.com/root-project/root/pull/3086:32,reliability,fail,fails,32,failures are unrelated (windows fails to download roottest),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3086
https://github.com/root-project/root/pull/3087:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:43,availability,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:4,deployability,fail,failed,4,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:31,deployability,build,build,31,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:43,energy efficiency,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:43,performance,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:4,reliability,fail,failed,4,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:43,reliability,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3087:43,safety,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3087
https://github.com/root-project/root/pull/3088:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3088
https://github.com/root-project/root/pull/3088:9,availability,error,error,9,the sole error is pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3088
https://github.com/root-project/root/pull/3088:9,performance,error,error,9,the sole error is pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3088
https://github.com/root-project/root/pull/3088:9,safety,error,error,9,the sole error is pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3088
https://github.com/root-project/root/pull/3088:9,usability,error,error,9,the sole error is pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3088
https://github.com/root-project/root/pull/3093:43,availability,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3093:4,deployability,fail,failed,4,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3093:31,deployability,build,build,31,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3093:43,energy efficiency,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3093:43,performance,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3093:4,reliability,fail,failed,4,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3093:43,reliability,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3093:43,safety,fault,fault,43,The failed `windows10/default` build is my fault. Sorry about that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3093
https://github.com/root-project/root/pull/3095:39,availability,failur,failures,39,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:5,deployability,patch,patches,5,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:30,deployability,observ,observed,30,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:39,deployability,fail,failures,39,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:39,performance,failur,failures,39,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:39,reliability,fail,failures,39,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:5,safety,patch,patches,5,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:5,security,patch,patches,5,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3095:30,testability,observ,observed,30,This patches should solve the observed failures in LCG/dev3 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3095
https://github.com/root-project/root/pull/3096:281,availability,avail,available,281,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:132,deployability,build,build,132,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:319,deployability,releas,released,319,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:345,deployability,releas,released,345,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:402,performance,time,time,402,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:281,reliability,availab,available,281,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:281,safety,avail,available,281,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:281,security,availab,available,281,"I'm very hesitant to apply this; `__cplusplus` should indeed be `2017...` for C++17. Can you elaborate why clang4 should be used to build with C++17 (or why C++17 should be used when compiling with clang4)? https://clang.llvm.org/cxx_status.html shows that most C++17 features are available in clang4 - but IIUC it was released before C++17 was released, so using it to compile C++17 features is a bit time bending ;-) Can you either use a newer clang, or use C++14?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:177,availability,consist,consistent,177,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:19,deployability,version,version,19,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:47,deployability,version,version,47,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:77,deployability,build,building,77,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:132,deployability,build,builds,132,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:315,deployability,patch,patch,315,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:346,deployability,build,build,346,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:39,energy efficiency,current,current,39,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:19,integrability,version,version,19,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:47,integrability,version,version,47,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:196,interoperability,platform,platforms,196,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:19,modifiability,version,version,19,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:47,modifiability,version,version,47,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:86,modifiability,pac,packages,86,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:261,reliability,doe,doesn,261,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:315,safety,patch,patch,315,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:315,security,patch,patch,315,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:177,usability,consist,consistent,177,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:225,usability,support,supports,225,"Clang 4.0.1 is the version used by the current version used by Anaconda when building packages for macOS. I use C++17 for the Linux builds (that use gcc 7.3) so it’s nice to be consistent between platforms given that Clang 4 supports almost everything. This PR doesn’t need to be merged as it can happily stay as a patch that is applied by conda-build. (Alternatively, I could use C++ 14 for macOS only but we already discussed that on Mattermost.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:89,availability,avail,available,89,"On second thought, is it possible to replace this by an explicit check if std::not_fn is available?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:89,reliability,availab,available,89,"On second thought, is it possible to replace this by an explicit check if std::not_fn is available?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:89,safety,avail,available,89,"On second thought, is it possible to replace this by an explicit check if std::not_fn is available?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:89,security,availab,available,89,"On second thought, is it possible to replace this by an explicit check if std::not_fn is available?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:52,availability,avail,available,52,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:102,availability,avail,available,102,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:52,reliability,availab,available,52,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:102,reliability,availab,available,102,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:52,safety,avail,available,52,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:102,safety,avail,available,102,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:52,security,availab,available,52,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3096:102,security,availab,available,102,The preprocessor macro `__cpp_lib_not_fn` should be available from `<functional>` if `std::not_fn` is available. I'd appreciate a PR for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3096
https://github.com/root-project/root/pull/3098:11,deployability,build,build,11,@phsft-bot build also on mac1012,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3098:11,deployability,build,build,11,@phsft-bot build also on mac1012/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3098:11,deployability,build,build,11,@phsft-bot build also on mac1012/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3098:36,deployability,log,logon,36,...and the TFormulaTests (created a logon session on that Mac node).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3098:36,safety,log,logon,36,...and the TFormulaTests (created a logon session on that Mac node).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3098:36,security,log,logon,36,...and the TFormulaTests (created a logon session on that Mac node).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3098:42,security,session,session,42,...and the TFormulaTests (created a logon session on that Mac node).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3098:36,testability,log,logon,36,...and the TFormulaTests (created a logon session on that Mac node).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3098
https://github.com/root-project/root/pull/3100:37,testability,verif,verify,37,"Thanks! Can you add one use case, to verify that we can actually apply the new macro? ROOT preprocessor macros start with `R__` - note the double underscore. Could you please adjust your macro accordingly?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,"@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=\""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES\""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,performance,perform,performance-,30,"@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=\""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES\""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,usability,perform,performance-,30,"@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=\""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES\""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,"@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=\\""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES\\""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,performance,perform,performance-,30,"@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=\\""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES\\""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,usability,perform,performance-,30,"@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=\\""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES\\""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:386,availability,down,down,386,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:196,reliability,diagno,diagnostic,196,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:196,testability,diagno,diagnostic,196,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:321,testability,simpl,simply,321,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:152,usability,prefer,prefer,152,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:321,usability,simpl,simply,321,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:427,usability,efficien,efficient,427,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:459,usability,person,person,459,"Super nice, thanks! So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:139,safety,compl,complement,139,"I like the idea of being able to suggest methods and functions, @hageboeck . As a matter of fact, I would immediately use this strategy to complement the implementation of the `GetStatistics` method of DataFrame which will superseed for example `Get{Mean,StdDev}`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:139,security,compl,complement,139,"I like the idea of being able to suggest methods and functions, @hageboeck . As a matter of fact, I would immediately use this strategy to complement the implementation of the `GetStatistics` method of DataFrame which will superseed for example `Get{Mean,StdDev}`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:879,deployability,build,build,879,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:886,energy efficiency,Current,Currently,886,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:511,integrability,messag,message,511,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:511,interoperability,messag,message,511,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:188,reliability,diagno,diagnostic,188,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:188,testability,diagno,diagnostic,188,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:605,testability,simpl,simply,605,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:134,usability,prefer,prefer,134,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:605,usability,simpl,simply,605,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed. > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore? Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro. > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`? Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:. I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,"@phsft-bot build with flags -DCXXFLAGS=""${CXXFLAGS} -DR__SUGGEST_NEW_INTERFACE"" just on ROOT-performance-centos7-multicore/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:93,performance,perform,performance-,93,"@phsft-bot build with flags -DCXXFLAGS=""${CXXFLAGS} -DR__SUGGEST_NEW_INTERFACE"" just on ROOT-performance-centos7-multicore/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:93,usability,perform,performance-,93,"@phsft-bot build with flags -DCXXFLAGS=""${CXXFLAGS} -DR__SUGGEST_NEW_INTERFACE"" just on ROOT-performance-centos7-multicore/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,@phsft-bot build with flags just on ROOT-performance-centos7-multicore/default -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:41,performance,perform,performance-,41,@phsft-bot build with flags just on ROOT-performance-centos7-multicore/default -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:41,usability,perform,performance-,41,@phsft-bot build with flags just on ROOT-performance-centos7-multicore/default -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,@phsft-bot build with flags just on ROOT-performance-centos7-multicore/default -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:41,performance,perform,performance-,41,@phsft-bot build with flags just on ROOT-performance-centos7-multicore/default -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:41,usability,perform,performance-,41,@phsft-bot build with flags just on ROOT-performance-centos7-multicore/default -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:86,performance,perform,performance-,86,@phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:86,usability,perform,performance-,86,@phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3100:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default with flags -DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3100
https://github.com/root-project/root/pull/3105:68,availability,error,error,68,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:45,deployability,Instal,Install,45,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:144,deployability,build,build,144,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:161,deployability,BUILD,BUILDTYPE,161,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:171,deployability,Releas,Release,171,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:193,deployability,build,build,193,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:437,deployability,instal,installs,437,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:288,interoperability,architectur,architecture,288,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:68,performance,error,error,68,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:68,safety,error,error,68,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:6,usability,confirm,confirm,6,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:68,usability,error,error,68,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3105:94,usability,Command,CommandLineTools,94,"I can confirm that this fixes. ```. CPack: - Install project: ROOT. error: /Library/Developer/CommandLineTools/usr/bin/install_name_tool: for: /build/jenkins/ws/BUILDTYPE/Release/LABEL/mac1014/build/_CPack_Packages/Darwin/TGZ/root_v6.15.03.macosx64-10.14-clang100/root/bin/rmkdepend (for architecture x86_64) option ""-add_rpath @loader_path/../lib"" would duplicate path, file already has LC_RPATH for: @loader_path/../lib. ... ```. from installs on MacOS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3105
https://github.com/root-project/root/pull/3107:22,availability,error,errors,22,@stwunsch I think the errors come from the usual problem with gcc5 and the C++11 string ABI..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3107
https://github.com/root-project/root/pull/3107:22,performance,error,errors,22,@stwunsch I think the errors come from the usual problem with gcc5 and the C++11 string ABI..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3107
https://github.com/root-project/root/pull/3107:22,safety,error,errors,22,@stwunsch I think the errors come from the usual problem with gcc5 and the C++11 string ABI..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3107
https://github.com/root-project/root/pull/3107:22,usability,error,errors,22,@stwunsch I think the errors come from the usual problem with gcc5 and the C++11 string ABI..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3107
https://github.com/root-project/root/pull/3107:108,deployability,build,builds,108,@dpiparo I've refurbished the PR and set the zero-copy implementation of the read-out. I'll wait for the PR builds and proceed with putting it in! The extern templates to speed up the thingy are in #3135 and can be plugged in seamlessly afterwards.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3107
https://github.com/root-project/root/pull/3107:215,interoperability,plug,plugged,215,@dpiparo I've refurbished the PR and set the zero-copy implementation of the read-out. I'll wait for the PR builds and proceed with putting it in! The extern templates to speed up the thingy are in #3135 and can be plugged in seamlessly afterwards.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3107
https://github.com/root-project/root/pull/3108:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3108
https://github.com/root-project/root/pull/3108:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3108
https://github.com/root-project/root/pull/3109:16,deployability,build,build,16,(I canceled the build),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3109
https://github.com/root-project/root/pull/3109:3,usability,cancel,canceled,3,(I canceled the build),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3109
https://github.com/root-project/root/pull/3111:66,deployability,build,build,66,Should this be backported too? It is needed to fix the Python 3.7 build on Conda.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3111
https://github.com/root-project/root/pull/3111:269,energy efficiency,load,loading,269,"@Axel-Naumann commented that we also need to cover the case in which we use `TPython`. In that case, we need the object erase callback to be initialized, but Python has not been initialized when we use `TPython` (since we use it from C++). So the sequence of events is loading libPyROOT -> running the static initialization block of `TMemoryRegulator.cxx` -> using `TPython`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3111
https://github.com/root-project/root/pull/3111:259,integrability,event,events,259,"@Axel-Naumann commented that we also need to cover the case in which we use `TPython`. In that case, we need the object erase callback to be initialized, but Python has not been initialized when we use `TPython` (since we use it from C++). So the sequence of events is loading libPyROOT -> running the static initialization block of `TMemoryRegulator.cxx` -> using `TPython`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3111
https://github.com/root-project/root/pull/3111:269,performance,load,loading,269,"@Axel-Naumann commented that we also need to cover the case in which we use `TPython`. In that case, we need the object erase callback to be initialized, but Python has not been initialized when we use `TPython` (since we use it from C++). So the sequence of events is loading libPyROOT -> running the static initialization block of `TMemoryRegulator.cxx` -> using `TPython`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3111
https://github.com/root-project/root/pull/3111:87,deployability,build,builds,87,"Modified the solution to take into account the `TPython` case as well, waiting for the builds to judge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3111
https://github.com/root-project/root/pull/3111:0,security,Modif,Modified,0,"Modified the solution to take into account the `TPython` case as well, waiting for the builds to judge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3111
https://github.com/root-project/root/pull/3112:20,deployability,instal,installed,20,cfitsio seems to be installed on the machine building the ref guide. Therefore it should be fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3112
https://github.com/root-project/root/pull/3112:45,deployability,build,building,45,cfitsio seems to be installed on the machine building the ref guide. Therefore it should be fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3112
https://github.com/root-project/root/pull/3112:62,usability,guid,guide,62,cfitsio seems to be installed on the machine building the ref guide. Therefore it should be fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3112
https://github.com/root-project/root/pull/3115:71,availability,redund,redundant,71,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:71,deployability,redundan,redundant,71,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:71,reliability,redundan,redundant,71,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:71,safety,redund,redundant,71,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:96,safety,test,test,96,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:22,testability,understand,understand,22,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:96,testability,test,test,96,"thanks @pcanal . If I understand correctly, this PR makes half of 3110 redundant, i.e. only the test is needed: is this correct?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:51,energy efficiency,green,green,51,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:81,energy efficiency,green,green,81,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:41,safety,test,tests,41,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:65,safety,test,test,65,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:148,safety,test,test,148,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:41,testability,test,tests,41,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:65,testability,test,test,65,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3115:148,testability,test,test,148,"Ok :) Let's do the following:. 1. If the tests are green and the test of 3110 is green too, I'll merge this tomorrow morning. 2. I will add another test for the very feature of TDirectoryFile, independently from TTreeProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3115
https://github.com/root-project/root/pull/3125:11,deployability,build,build,11,"@phsft-bot build, now that https://github.com/root-project/roottest/pull/266 is in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3125
https://github.com/root-project/root/pull/3128:27,modifiability,concern,concerned,27,"Looks good, as far as I am concerned. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3128
https://github.com/root-project/root/pull/3128:27,testability,concern,concerned,27,"Looks good, as far as I am concerned. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3128
https://github.com/root-project/root/pull/3128:44,integrability,batch,batch,44,"Thanks, @gganis ! I think this was the last batch for `net/*` warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3128
https://github.com/root-project/root/pull/3128:44,performance,batch,batch,44,"Thanks, @gganis ! I think this was the last batch for `net/*` warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3128
https://github.com/root-project/root/pull/3130:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3130
https://github.com/root-project/root/pull/3133:78,deployability,fail,failed,78,"As we saw this should not be needed; ruby was deprecated *for* 6.16, I simply failed to remove it properly in 362b7d82e7914d5bdbd93b505f21dca16b158d18. I suggest we close this, and we create a PR that rips out the remainders of ruby?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3133
https://github.com/root-project/root/pull/3133:78,reliability,fail,failed,78,"As we saw this should not be needed; ruby was deprecated *for* 6.16, I simply failed to remove it properly in 362b7d82e7914d5bdbd93b505f21dca16b158d18. I suggest we close this, and we create a PR that rips out the remainders of ruby?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3133
https://github.com/root-project/root/pull/3133:71,testability,simpl,simply,71,"As we saw this should not be needed; ruby was deprecated *for* 6.16, I simply failed to remove it properly in 362b7d82e7914d5bdbd93b505f21dca16b158d18. I suggest we close this, and we create a PR that rips out the remainders of ruby?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3133
https://github.com/root-project/root/pull/3133:71,usability,simpl,simply,71,"As we saw this should not be needed; ruby was deprecated *for* 6.16, I simply failed to remove it properly in 362b7d82e7914d5bdbd93b505f21dca16b158d18. I suggest we close this, and we create a PR that rips out the remainders of ruby?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3133
https://github.com/root-project/root/pull/3133:165,usability,close,close,165,"As we saw this should not be needed; ruby was deprecated *for* 6.16, I simply failed to remove it properly in 362b7d82e7914d5bdbd93b505f21dca16b158d18. I suggest we close this, and we create a PR that rips out the remainders of ruby?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3133
https://github.com/root-project/root/pull/3133:15,usability,close,close,15,"> I suggest we close this, and we create a PR that rips out the remainders of ruby? Sure, will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3133
https://github.com/root-project/root/pull/3135:144,deployability,contain,container,144,`bool` is evil! `std::vector<bool>` seems not to have and `emplace_back` method before C++14 :see_no_evil: -> https://en.cppreference.com/w/cpp/container/vector/emplace_back,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:29,deployability,fail,fail,29,"Wait, @bluehood. Does `Take` fail for `bool` on C++11? It should not work if there's an `emplace_back` such as in L488 in the `ActionHelper.hxx` :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:17,reliability,Doe,Does,17,"Wait, @bluehood. Does `Take` fail for `bool` on C++11? It should not work if there's an `emplace_back` such as in L488 in the `ActionHelper.hxx` :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:29,reliability,fail,fail,29,"Wait, @bluehood. Does `Take` fail for `bool` on C++11? It should not work if there's an `emplace_back` such as in L488 in the `ActionHelper.hxx` :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:37,deployability,version,version,37,@dpiparo @bluehood I think that this version should work out nicely. `std::vector<bool>::emplace_back` is a beast and I've removed it for all compilers (it's a mess ;) ). Could someone of you have a quick look on the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:37,integrability,version,version,37,@dpiparo @bluehood I think that this version should work out nicely. `std::vector<bool>::emplace_back` is a beast and I've removed it for all compilers (it's a mess ;) ). Could someone of you have a quick look on the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:37,modifiability,version,version,37,@dpiparo @bluehood I think that this version should work out nicely. `std::vector<bool>::emplace_back` is a beast and I've removed it for all compilers (it's a mess ;) ). Could someone of you have a quick look on the PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:113,deployability,contain,containers,113,"@bluehood Argh, this is the fallback solution for `RVec<bool>`? I think we should simply use `push_back` for all containers... `bool` is evil and should be treated so ;). Edit: Indeed, `std::vector<bool>` is the master of evil template specializations. Sry little `bool`!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:82,testability,simpl,simply,82,"@bluehood Argh, this is the fallback solution for `RVec<bool>`? I think we should simply use `push_back` for all containers... `bool` is evil and should be treated so ;). Edit: Indeed, `std::vector<bool>` is the master of evil template specializations. Sry little `bool`!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:82,usability,simpl,simply,82,"@bluehood Argh, this is the fallback solution for `RVec<bool>`? I think we should simply use `push_back` for all containers... `bool` is evil and should be treated so ;). Edit: Indeed, `std::vector<bool>` is the master of evil template specializations. Sry little `bool`!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:199,deployability,contain,containers,199,"@stwunsch bool is not evil (except for the fact that it occupies one full byte to store a bit). `std::vector<bool>` is evil, in all its forms, including `RVec<bool>` -- let's use `push_back` for all containers :smile: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:28,safety,except,except,28,"@stwunsch bool is not evil (except for the fact that it occupies one full byte to store a bit). `std::vector<bool>` is evil, in all its forms, including `RVec<bool>` -- let's use `push_back` for all containers :smile: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:302,availability,reliab,reliable,302,`vector<bool>` is so fun :D https://en.wikipedia.org/w/index.php?title=Sequence_container_(C%2B%2B)&oldid=767869909#Specialization_for_bool. The range over a `vector<bool>` does not return a reference and therefore it complains now about passing non-const ref to a temporary :see_no_evil: . Edit: More reliable source -> https://en.cppreference.com/w/cpp/container/vector_bool,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:355,deployability,contain,container,355,`vector<bool>` is so fun :D https://en.wikipedia.org/w/index.php?title=Sequence_container_(C%2B%2B)&oldid=767869909#Specialization_for_bool. The range over a `vector<bool>` does not return a reference and therefore it complains now about passing non-const ref to a temporary :see_no_evil: . Edit: More reliable source -> https://en.cppreference.com/w/cpp/container/vector_bool,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:173,reliability,doe,does,173,`vector<bool>` is so fun :D https://en.wikipedia.org/w/index.php?title=Sequence_container_(C%2B%2B)&oldid=767869909#Specialization_for_bool. The range over a `vector<bool>` does not return a reference and therefore it complains now about passing non-const ref to a temporary :see_no_evil: . Edit: More reliable source -> https://en.cppreference.com/w/cpp/container/vector_bool,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:302,reliability,reliab,reliable,302,`vector<bool>` is so fun :D https://en.wikipedia.org/w/index.php?title=Sequence_container_(C%2B%2B)&oldid=767869909#Specialization_for_bool. The range over a `vector<bool>` does not return a reference and therefore it complains now about passing non-const ref to a temporary :see_no_evil: . Edit: More reliable source -> https://en.cppreference.com/w/cpp/container/vector_bool,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:218,safety,compl,complains,218,`vector<bool>` is so fun :D https://en.wikipedia.org/w/index.php?title=Sequence_container_(C%2B%2B)&oldid=767869909#Specialization_for_bool. The range over a `vector<bool>` does not return a reference and therefore it complains now about passing non-const ref to a temporary :see_no_evil: . Edit: More reliable source -> https://en.cppreference.com/w/cpp/container/vector_bool,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:218,security,compl,complains,218,`vector<bool>` is so fun :D https://en.wikipedia.org/w/index.php?title=Sequence_container_(C%2B%2B)&oldid=767869909#Specialization_for_bool. The range over a `vector<bool>` does not return a reference and therefore it complains now about passing non-const ref to a temporary :see_no_evil: . Edit: More reliable source -> https://en.cppreference.com/w/cpp/container/vector_bool,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:109,deployability,contain,container,109,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:135,performance,concurren,concurrently,135,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:54,reliability,Doe,Does,54,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:199,safety,safe,safe,199,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:126,security,modif,modified,126,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:42,interoperability,standard,standard,42,"of course not xD it can't be, because the standard allows the implementation to pack the bits together. that's where all the evilness comes from. we have a few places in RDF where we SFINAE away from vector<bool> because of the thread-safety issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:80,modifiability,pac,pack,80,"of course not xD it can't be, because the standard allows the implementation to pack the bits together. that's where all the evilness comes from. we have a few places in RDF where we SFINAE away from vector<bool> because of the thread-safety issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:235,safety,safe,safety,235,"of course not xD it can't be, because the standard allows the implementation to pack the bits together. that's where all the evilness comes from. we have a few places in RDF where we SFINAE away from vector<bool> because of the thread-safety issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3135:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3135
https://github.com/root-project/root/pull/3141:14,deployability,build,build,14,I aborted the build since this file is not involved in anything except help git create better shortlogs...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3141
https://github.com/root-project/root/pull/3141:64,safety,except,except,64,I aborted the build since this file is not involved in anything except help git create better shortlogs...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3141
https://github.com/root-project/root/pull/3141:71,usability,help,help,71,I aborted the build since this file is not involved in anything except help git create better shortlogs...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3141
https://github.com/root-project/root/pull/3144:5,reliability,doe,doesn,5,this doesn't seem right :smile:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3144
https://github.com/root-project/root/pull/3144:4,availability,failur,failure,4,The failure on mac1014/cxx17 is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3144
https://github.com/root-project/root/pull/3144:4,deployability,fail,failure,4,The failure on mac1014/cxx17 is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3144
https://github.com/root-project/root/pull/3144:4,performance,failur,failure,4,The failure on mac1014/cxx17 is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3144
https://github.com/root-project/root/pull/3144:4,reliability,fail,failure,4,The failure on mac1014/cxx17 is unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3144
https://github.com/root-project/root/pull/3146:9,energy efficiency,cool,cool,9,"@dpiparo cool! With this I don't think we need `RDFInternal::IsImplicitMTEnabled()` anymore, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3146
https://github.com/root-project/root/pull/3149:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3149
https://github.com/root-project/root/pull/3149:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3149
https://github.com/root-project/root/pull/3149:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3149
https://github.com/root-project/root/pull/3150:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:96,security,modif,modifications,96,I see in your PR comments that you implemented two new options in THistPainter. But in the code modifications you did I do not see any description of these new options in the help part. Can you also post an example showing these options in action ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:175,usability,help,help,175,I see in your PR comments that you implemented two new options in THistPainter. But in the code modifications you did I do not see any description of these new options in the help part. Can you also post an example showing these options in action ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:306,deployability,version,version,306,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:727,deployability,updat,update,727,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:845,deployability,integr,integrated,845,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:306,integrability,version,version,306,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:845,integrability,integr,integrated,845,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:845,interoperability,integr,integrated,845,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:306,modifiability,version,version,306,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:845,modifiability,integr,integrated,845,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:845,reliability,integr,integrated,845,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:297,safety,compl,complied,297,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:727,safety,updat,update,727,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:297,security,compl,complied,297,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:727,security,updat,update,727,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:845,security,integr,integrated,845,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:845,testability,integr,integrated,845,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:330,usability,user,user-images,330,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:611,usability,user,user-images,611,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:738,usability,help,help,738,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:743,usability,document,document,743,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:806,usability,prefer,prefer,806,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:. ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises. Without this fix, i.e, in the root-6.14/08, they look this:. ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:8,deployability,continu,continue,8,You can continue to modify this PR and document this new option in the header of THistPainter. and include an example in the help.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:20,security,modif,modify,20,You can continue to modify this PR and document this new option in the header of THistPainter. and include an example in the help.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:39,usability,document,document,39,You can continue to modify this PR and document this new option in the header of THistPainter. and include an example in the help.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:125,usability,help,help,125,You can continue to modify this PR and document this new option in the header of THistPainter. and include an example in the help.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:98,security,modif,modifications,98,> I see in your PR comments that you implemented two new options in THistPainter. But in the code modifications you did I do not see any description of these new options in the help part. Can you also post an example showing these options in action ? It's added. Please take a look if it's fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:177,usability,help,help,177,> I see in your PR comments that you implemented two new options in THistPainter. But in the code modifications you did I do not see any description of these new options in the help part. Can you also post an example showing these options in action ? It's added. Please take a look if it's fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:15,deployability,updat,update,15,"Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:15,safety,updat,update,15,"Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:225,safety,valid,valid,225,"Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:15,security,updat,update,15,"Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:17,deployability,updat,update,17,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:17,safety,updat,update,17,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:227,safety,valid,valid,227,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:598,safety,test,test,598,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:17,security,updat,update,17,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:350,testability,understand,understand,350,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:598,testability,test,test,598,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:577,usability,confirm,confirmed,577,"> Thanks for the update. I have still one question/worry. How the '0' of your new option SAME0 will work when combined with some other options allowing also 0 (like colz0)? Imagine the following option ""SAME COLZ0""... COLZ0 is valid. That may be misunderstood with your new code ? I actually just followed the COL1 example in the existing code. If I understand correctly, the code will find the ""SAME"" first, and then check if there is a 0 immediately after it. The similar thing is done for the ""COLZ"" option. So it can distinguish ""SAME0 COLZ"" and ""SAME COLZ0"". This is also confirmed by a quick test using both options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3150:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3150
https://github.com/root-project/root/pull/3153:30,availability,error,error,30,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:30,performance,error,error,30,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:30,safety,error,error,30,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:59,safety,test,tests,59,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:59,testability,test,tests,59,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:30,usability,error,error,30,@dpiparo looks like we got an error in one of the snapshot tests :disappointed:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:108,deployability,updat,updating,108,Hi @etejedor nice catch. This is the issue with the initial size 0 which we were discussing in person. I am updating the test to have a coherent commit and then work on this other problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:108,safety,updat,updating,108,Hi @etejedor nice catch. This is the issue with the initial size 0 which we were discussing in person. I am updating the test to have a coherent commit and then work on this other problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:121,safety,test,test,121,Hi @etejedor nice catch. This is the issue with the initial size 0 which we were discussing in person. I am updating the test to have a coherent commit and then work on this other problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:108,security,updat,updating,108,Hi @etejedor nice catch. This is the issue with the initial size 0 which we were discussing in person. I am updating the test to have a coherent commit and then work on this other problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:121,testability,test,test,121,Hi @etejedor nice catch. This is the issue with the initial size 0 which we were discussing in person. I am updating the test to have a coherent commit and then work on this other problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3153:95,usability,person,person,95,Hi @etejedor nice catch. This is the issue with the initial size 0 which we were discussing in person. I am updating the test to have a coherent commit and then work on this other problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3153
https://github.com/root-project/root/pull/3156:11,deployability,build,build,11,@phsft-bot build just on mac1014/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3156
https://github.com/root-project/root/pull/3161:168,deployability,depend,depending,168,"We need to only do this when not in in ACLiC-rootmap mode. This means `TSystem::CompileMacro()` needs to know specifically about `-Wl,--no-undefined`, and only pass it depending on rootmap mode's value. That needs a different approach; closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3161
https://github.com/root-project/root/pull/3161:168,integrability,depend,depending,168,"We need to only do this when not in in ACLiC-rootmap mode. This means `TSystem::CompileMacro()` needs to know specifically about `-Wl,--no-undefined`, and only pass it depending on rootmap mode's value. That needs a different approach; closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3161
https://github.com/root-project/root/pull/3161:110,interoperability,specif,specifically,110,"We need to only do this when not in in ACLiC-rootmap mode. This means `TSystem::CompileMacro()` needs to know specifically about `-Wl,--no-undefined`, and only pass it depending on rootmap mode's value. That needs a different approach; closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3161
https://github.com/root-project/root/pull/3161:168,modifiability,depend,depending,168,"We need to only do this when not in in ACLiC-rootmap mode. This means `TSystem::CompileMacro()` needs to know specifically about `-Wl,--no-undefined`, and only pass it depending on rootmap mode's value. That needs a different approach; closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3161
https://github.com/root-project/root/pull/3161:168,safety,depend,depending,168,"We need to only do this when not in in ACLiC-rootmap mode. This means `TSystem::CompileMacro()` needs to know specifically about `-Wl,--no-undefined`, and only pass it depending on rootmap mode's value. That needs a different approach; closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3161
https://github.com/root-project/root/pull/3161:168,testability,depend,depending,168,"We need to only do this when not in in ACLiC-rootmap mode. This means `TSystem::CompileMacro()` needs to know specifically about `-Wl,--no-undefined`, and only pass it depending on rootmap mode's value. That needs a different approach; closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3161
https://github.com/root-project/root/pull/3163:25,safety,review,review,25,"@gganis Could you please review the removals of SRP, SSH, and AFS support? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3163
https://github.com/root-project/root/pull/3163:53,security,SSH,SSH,53,"@gganis Could you please review the removals of SRP, SSH, and AFS support? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3163
https://github.com/root-project/root/pull/3163:25,testability,review,review,25,"@gganis Could you please review the removals of SRP, SSH, and AFS support? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3163
https://github.com/root-project/root/pull/3163:66,usability,support,support,66,"@gganis Could you please review the removals of SRP, SSH, and AFS support? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3163
https://github.com/root-project/root/pull/3163:26,modifiability,concern,concerned,26,Looks good as far as I am concerned. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3163
https://github.com/root-project/root/pull/3163:26,testability,concern,concerned,26,Looks good as far as I am concerned. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3163
https://github.com/root-project/root/pull/3165:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3165
https://github.com/root-project/root/pull/3165:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3165
https://github.com/root-project/root/pull/3165:7,availability,failur,failures,7,Ubuntu failures are unrelated. Decided to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3165
https://github.com/root-project/root/pull/3165:7,deployability,fail,failures,7,Ubuntu failures are unrelated. Decided to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3165
https://github.com/root-project/root/pull/3165:7,performance,failur,failures,7,Ubuntu failures are unrelated. Decided to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3165
https://github.com/root-project/root/pull/3165:7,reliability,fail,failures,7,Ubuntu failures are unrelated. Decided to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3165
https://github.com/root-project/root/pull/3168:104,deployability,patch,patches,104,"> Would it be possible to backport this fix to the v6.12 series? Sure, you can make a local branch 6-12-patches tracking the correspondent one in the upstream and cherry-pick from master once this one is merged. Then do another PR onto 6-12-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3168
https://github.com/root-project/root/pull/3168:241,deployability,patch,patches,241,"> Would it be possible to backport this fix to the v6.12 series? Sure, you can make a local branch 6-12-patches tracking the correspondent one in the upstream and cherry-pick from master once this one is merged. Then do another PR onto 6-12-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3168
https://github.com/root-project/root/pull/3168:104,safety,patch,patches,104,"> Would it be possible to backport this fix to the v6.12 series? Sure, you can make a local branch 6-12-patches tracking the correspondent one in the upstream and cherry-pick from master once this one is merged. Then do another PR onto 6-12-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3168
https://github.com/root-project/root/pull/3168:241,safety,patch,patches,241,"> Would it be possible to backport this fix to the v6.12 series? Sure, you can make a local branch 6-12-patches tracking the correspondent one in the upstream and cherry-pick from master once this one is merged. Then do another PR onto 6-12-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3168
https://github.com/root-project/root/pull/3168:104,security,patch,patches,104,"> Would it be possible to backport this fix to the v6.12 series? Sure, you can make a local branch 6-12-patches tracking the correspondent one in the upstream and cherry-pick from master once this one is merged. Then do another PR onto 6-12-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3168
https://github.com/root-project/root/pull/3168:241,security,patch,patches,241,"> Would it be possible to backport this fix to the v6.12 series? Sure, you can make a local branch 6-12-patches tracking the correspondent one in the upstream and cherry-pick from master once this one is merged. Then do another PR onto 6-12-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3168
https://github.com/root-project/root/pull/3168:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3168
https://github.com/root-project/root/pull/3169:35,deployability,depend,dependent,35,"The behaviour seems to be compiler dependent. On my machine (gcc7), it is picked up. Edit: Interesting, `FillColl(bool&& v, COLL& c)` is not picked up :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:35,integrability,depend,dependent,35,"The behaviour seems to be compiler dependent. On my machine (gcc7), it is picked up. Edit: Interesting, `FillColl(bool&& v, COLL& c)` is not picked up :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:35,modifiability,depend,dependent,35,"The behaviour seems to be compiler dependent. On my machine (gcc7), it is picked up. Edit: Interesting, `FillColl(bool&& v, COLL& c)` is not picked up :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:35,safety,depend,dependent,35,"The behaviour seems to be compiler dependent. On my machine (gcc7), it is picked up. Edit: Interesting, `FillColl(bool&& v, COLL& c)` is not picked up :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:35,testability,depend,dependent,35,"The behaviour seems to be compiler dependent. On my machine (gcc7), it is picked up. Edit: Interesting, `FillColl(bool&& v, COLL& c)` is not picked up :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:4,usability,behavi,behaviour,4,"The behaviour seems to be compiler dependent. On my machine (gcc7), it is picked up. Edit: Interesting, `FillColl(bool&& v, COLL& c)` is not picked up :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:430,deployability,version,version,430,"I love C++ :D Full of interesting features:. ```cpp. #include <vector>. #include <iostream>. template <typename T, typename U>. void Fill(T&& v, U& u) {. std::cout << ""template! "" << v << std::endl;. }. template <typename U>. void Fill(bool v, U& u) {. std::cout << ""bool! "" << v << std::endl;. }. template <typename T>. void Loop(std::vector<T>& coll) {. for(auto&& v : coll) { // <-- Replace auto by T, then it takes the ""bool"" version if Fill and not the ""template"" one (see above). Fill(v, coll);. }. }. int main(){. std::vector<bool> coll = {0, 1, 0};. Loop(coll);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:430,integrability,version,version,430,"I love C++ :D Full of interesting features:. ```cpp. #include <vector>. #include <iostream>. template <typename T, typename U>. void Fill(T&& v, U& u) {. std::cout << ""template! "" << v << std::endl;. }. template <typename U>. void Fill(bool v, U& u) {. std::cout << ""bool! "" << v << std::endl;. }. template <typename T>. void Loop(std::vector<T>& coll) {. for(auto&& v : coll) { // <-- Replace auto by T, then it takes the ""bool"" version if Fill and not the ""template"" one (see above). Fill(v, coll);. }. }. int main(){. std::vector<bool> coll = {0, 1, 0};. Loop(coll);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:430,modifiability,version,version,430,"I love C++ :D Full of interesting features:. ```cpp. #include <vector>. #include <iostream>. template <typename T, typename U>. void Fill(T&& v, U& u) {. std::cout << ""template! "" << v << std::endl;. }. template <typename U>. void Fill(bool v, U& u) {. std::cout << ""bool! "" << v << std::endl;. }. template <typename T>. void Loop(std::vector<T>& coll) {. for(auto&& v : coll) { // <-- Replace auto by T, then it takes the ""bool"" version if Fill and not the ""template"" one (see above). Fill(v, coll);. }. }. int main(){. std::vector<bool> coll = {0, 1, 0};. Loop(coll);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:163,deployability,fail,fails,163,"@dpiparo Do I understand correctly that the extern template of `TakeHelper` implicitly instantiates `RVec<bool>`, which falls back to `std::vector<bool>` and then fails because there's an `emplace_back` hard-coded?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:163,reliability,fail,fails,163,"@dpiparo Do I understand correctly that the extern template of `TakeHelper` implicitly instantiates `RVec<bool>`, which falls back to `std::vector<bool>` and then fails because there's an `emplace_back` hard-coded?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:14,testability,understand,understand,14,"@dpiparo Do I understand correctly that the extern template of `TakeHelper` implicitly instantiates `RVec<bool>`, which falls back to `std::vector<bool>` and then fails because there's an `emplace_back` hard-coded?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3169:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3169
https://github.com/root-project/root/pull/3179:72,deployability,instal,install,72,This seems like a good step. Thanks. What is the plan to allow for the 'install' to be relocatable (eg. Can the semantic of 'modulemap.overlay.yaml' be generated at run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:125,deployability,modul,modulemap,125,This seems like a good step. Thanks. What is the plan to allow for the 'install' to be relocatable (eg. Can the semantic of 'modulemap.overlay.yaml' be generated at run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:112,interoperability,semant,semantic,112,This seems like a good step. Thanks. What is the plan to allow for the 'install' to be relocatable (eg. Can the semantic of 'modulemap.overlay.yaml' be generated at run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:125,modifiability,modul,modulemap,125,This seems like a good step. Thanks. What is the plan to allow for the 'install' to be relocatable (eg. Can the semantic of 'modulemap.overlay.yaml' be generated at run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:169,performance,time,time,169,This seems like a good step. Thanks. What is the plan to allow for the 'install' to be relocatable (eg. Can the semantic of 'modulemap.overlay.yaml' be generated at run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:125,safety,modul,modulemap,125,This seems like a good step. Thanks. What is the plan to allow for the 'install' to be relocatable (eg. Can the semantic of 'modulemap.overlay.yaml' be generated at run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:49,testability,plan,plan,49,This seems like a good step. Thanks. What is the plan to allow for the 'install' to be relocatable (eg. Can the semantic of 'modulemap.overlay.yaml' be generated at run-time)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:58,performance,Memor,MemoryBuffer,58,"Great idea, @pcanal - for instance by providing simply a `MemoryBuffer` to clang for the overlay! I'll merge this here now, to unblock CMS, and then we go from there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:48,testability,simpl,simply,48,"Great idea, @pcanal - for instance by providing simply a `MemoryBuffer` to clang for the overlay! I'll merge this here now, to unblock CMS, and then we go from there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:48,usability,simpl,simply,48,"Great idea, @pcanal - for instance by providing simply a `MemoryBuffer` to clang for the overlay! I'll merge this here now, to unblock CMS, and then we go from there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3179:58,usability,Memor,MemoryBuffer,58,"Great idea, @pcanal - for instance by providing simply a `MemoryBuffer` to clang for the overlay! I'll merge this here now, to unblock CMS, and then we go from there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3179
https://github.com/root-project/root/pull/3180:61,safety,review,review,61,"Do we try to upstream this? if yes, can you mention the phab review in the commit that we know when we can drop this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3180
https://github.com/root-project/root/pull/3180:61,testability,review,review,61,"Do we try to upstream this? if yes, can you mention the phab review in the commit that we know when we can drop this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3180
https://github.com/root-project/root/pull/3183:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:41,availability,failur,failure,41,That is just a warning I added. The real failure is due to soversion=ON on Linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:41,deployability,fail,failure,41,That is just a warning I added. The real failure is due to soversion=ON on Linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:41,performance,failur,failure,41,That is just a warning I added. The real failure is due to soversion=ON on Linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:41,reliability,fail,failure,41,That is just a warning I added. The real failure is due to soversion=ON on Linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:39,deployability,version,version,39,I'm reverting the commits that set the version based on Git just to be able to build the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:79,deployability,build,build,79,I'm reverting the commits that set the version based on Git just to be able to build the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:39,integrability,version,version,39,I'm reverting the commits that set the version based on Git just to be able to build the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:39,modifiability,version,version,39,I'm reverting the commits that set the version based on Git just to be able to build the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:71,interoperability,standard,standard,71,"So, as it turns out `-Dall=ON` requests for `root7` but leaves the C++ standard at 11, so I've changed the `root7` option to only get enabled by default (or `all=ON`) when using C++14 or C++17.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:312,deployability,configurat,configuration,312,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:39,energy efficiency,current,current,39,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:312,integrability,configur,configuration,312,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:20,interoperability,standard,standard,20,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:284,interoperability,standard,standards,284,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:312,modifiability,configur,configuration,312,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:312,security,configur,configuration,312,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:261,usability,command,command,261,"Fixed switching C++ standard also with current (deprecated) options. Also, old options prevail if both are set, e.g. using `-Dcxx11=ON and -DCMAKE_CXX_STANDARD=14` will turn on C++11. By default `CMAKE_CXX_STANDARD` is set to `11` and can be overwritten by the command line. Changing standards after the initial configuration should always work now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:131,usability,prefer,prefer,131,@pcanal do we need to keep `R__USE_CXX11` and friends? Could be as easy as `#if __cplusplus > ... #define R__USE_CXX11`. I'd still prefer to get rid of them as there is no usage in ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:410,integrability,configur,configure,410,"> do we need to keep R__USE_CXX11 and friends? Could be as easy as #if __cplusplus > ... #define R__USE_CXX11. I'd still prefer to get rid of them as there is no usage in ROOT. Yes. The R__USE were brought to life at a point of time where __cplusplus was not well defined *and* was not a good proxy for the compiler's actual feature set ... and we had not yet thought of and/or decide to purse try_compile (or configure equivalent). Nowadays, I think we should almost never really on __cplusplus but rather on try_compile (and thus furthermore not on R__USE_CXX11)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:293,interoperability,prox,proxy,293,"> do we need to keep R__USE_CXX11 and friends? Could be as easy as #if __cplusplus > ... #define R__USE_CXX11. I'd still prefer to get rid of them as there is no usage in ROOT. Yes. The R__USE were brought to life at a point of time where __cplusplus was not well defined *and* was not a good proxy for the compiler's actual feature set ... and we had not yet thought of and/or decide to purse try_compile (or configure equivalent). Nowadays, I think we should almost never really on __cplusplus but rather on try_compile (and thus furthermore not on R__USE_CXX11)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:410,modifiability,configur,configure,410,"> do we need to keep R__USE_CXX11 and friends? Could be as easy as #if __cplusplus > ... #define R__USE_CXX11. I'd still prefer to get rid of them as there is no usage in ROOT. Yes. The R__USE were brought to life at a point of time where __cplusplus was not well defined *and* was not a good proxy for the compiler's actual feature set ... and we had not yet thought of and/or decide to purse try_compile (or configure equivalent). Nowadays, I think we should almost never really on __cplusplus but rather on try_compile (and thus furthermore not on R__USE_CXX11)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:228,performance,time,time,228,"> do we need to keep R__USE_CXX11 and friends? Could be as easy as #if __cplusplus > ... #define R__USE_CXX11. I'd still prefer to get rid of them as there is no usage in ROOT. Yes. The R__USE were brought to life at a point of time where __cplusplus was not well defined *and* was not a good proxy for the compiler's actual feature set ... and we had not yet thought of and/or decide to purse try_compile (or configure equivalent). Nowadays, I think we should almost never really on __cplusplus but rather on try_compile (and thus furthermore not on R__USE_CXX11)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:410,security,configur,configure,410,"> do we need to keep R__USE_CXX11 and friends? Could be as easy as #if __cplusplus > ... #define R__USE_CXX11. I'd still prefer to get rid of them as there is no usage in ROOT. Yes. The R__USE were brought to life at a point of time where __cplusplus was not well defined *and* was not a good proxy for the compiler's actual feature set ... and we had not yet thought of and/or decide to purse try_compile (or configure equivalent). Nowadays, I think we should almost never really on __cplusplus but rather on try_compile (and thus furthermore not on R__USE_CXX11)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3183:121,usability,prefer,prefer,121,"> do we need to keep R__USE_CXX11 and friends? Could be as easy as #if __cplusplus > ... #define R__USE_CXX11. I'd still prefer to get rid of them as there is no usage in ROOT. Yes. The R__USE were brought to life at a point of time where __cplusplus was not well defined *and* was not a good proxy for the compiler's actual feature set ... and we had not yet thought of and/or decide to purse try_compile (or configure equivalent). Nowadays, I think we should almost never really on __cplusplus but rather on try_compile (and thus furthermore not on R__USE_CXX11)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3183
https://github.com/root-project/root/pull/3186:17,deployability,build,builds,17,I will start the builds from roottest with a PR with an identical name.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3186
https://github.com/root-project/root/pull/3186:56,security,ident,identical,56,I will start the builds from roottest with a PR with an identical name.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3186
https://github.com/root-project/root/pull/3186:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3186
https://github.com/root-project/root/pull/3187:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3187
https://github.com/root-project/root/pull/3187:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3187
https://github.com/root-project/root/pull/3187:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3187
https://github.com/root-project/root/pull/3187:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3187
https://github.com/root-project/root/pull/3187:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3187
https://github.com/root-project/root/pull/3188:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3188
https://github.com/root-project/root/pull/3188:11,deployability,build,build,11,"@phsft-bot build, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3188
https://github.com/root-project/root/pull/3189:160,energy efficiency,profil,profiles,160,"Without LTO the fwd declaration might be a performance pessimization, but it should be offset by spinlock vs rwlock. In any case we never saw TSlotStack in the profiles, so everything goes :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:43,performance,perform,performance,43,"Without LTO the fwd declaration might be a performance pessimization, but it should be offset by spinlock vs rwlock. In any case we never saw TSlotStack in the profiles, so everything goes :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:160,performance,profil,profiles,160,"Without LTO the fwd declaration might be a performance pessimization, but it should be offset by spinlock vs rwlock. In any case we never saw TSlotStack in the profiles, so everything goes :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:43,usability,perform,performance,43,"Without LTO the fwd declaration might be a performance pessimization, but it should be offset by spinlock vs rwlock. In any case we never saw TSlotStack in the profiles, so everything goes :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:71,deployability,modul,modules,71,The entity which worries me more with heavy headers is the PCH and the modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:71,modifiability,modul,modules,71,The entity which worries me more with heavy headers is the PCH and the modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:71,safety,modul,modules,71,The entity which worries me more with heavy headers is the PCH and the modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:69,safety,avoid,avoid,69,I wonder if a simple compare and swap could be used in TSlotStack to avoid the need for a mutex.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:14,testability,simpl,simple,14,I wonder if a simple compare and swap could be used in TSlotStack to avoid the need for a mutex.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:14,usability,simpl,simple,14,I wonder if a simple compare and swap could be used in TSlotStack to avoid the need for a mutex.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:31,deployability,stack,stack,31,"Yes, that would be a lock-free stack: I have the code, are you interested to have a look? :) Some tests are still failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:114,deployability,fail,failing,114,"Yes, that would be a lock-free stack: I have the code, are you interested to have a look? :) Some tests are still failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:21,performance,lock,lock-free,21,"Yes, that would be a lock-free stack: I have the code, are you interested to have a look? :) Some tests are still failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:114,reliability,fail,failing,114,"Yes, that would be a lock-free stack: I have the code, are you interested to have a look? :) Some tests are still failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:98,safety,test,tests,98,"Yes, that would be a lock-free stack: I have the code, are you interested to have a look? :) Some tests are still failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:21,security,lock,lock-free,21,"Yes, that would be a lock-free stack: I have the code, are you interested to have a look? :) Some tests are still failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3189:98,testability,test,tests,98,"Yes, that would be a lock-free stack: I have the code, are you interested to have a look? :) Some tests are still failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3189
https://github.com/root-project/root/pull/3190:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3190
https://github.com/root-project/root/pull/3190:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3190
https://github.com/root-project/root/pull/3191:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3191
https://github.com/root-project/root/pull/3191:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3191
https://github.com/root-project/root/pull/3200:0,availability,failur,failures,0,failures are unrelated (this PR only change 2 tests),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3200
https://github.com/root-project/root/pull/3200:0,deployability,fail,failures,0,failures are unrelated (this PR only change 2 tests),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3200
https://github.com/root-project/root/pull/3200:0,performance,failur,failures,0,failures are unrelated (this PR only change 2 tests),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3200
https://github.com/root-project/root/pull/3200:0,reliability,fail,failures,0,failures are unrelated (this PR only change 2 tests),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3200
https://github.com/root-project/root/pull/3200:46,safety,test,tests,46,failures are unrelated (this PR only change 2 tests),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3200
https://github.com/root-project/root/pull/3200:46,testability,test,tests,46,failures are unrelated (this PR only change 2 tests),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3200
https://github.com/root-project/root/pull/3202:25,deployability,releas,release,25,Why should we remove old release notes?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:164,deployability,version,versions,164,"Well, I just wanted to start a discussion. Many of those files are empty or only have a single line header. I don't think there's much value in them. Also, the old versions themselves will still contain those files. In any case, if not to remove, it might make sense to at least move these directories all under `README/ReleaseNotes/old/`. I am looking to remove old/deprecated stuff and `git grep` always gets cluttered with stuff from those files, making it more time consuming to find the real code that needs to be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:195,deployability,contain,contain,195,"Well, I just wanted to start a discussion. Many of those files are empty or only have a single line header. I don't think there's much value in them. Also, the old versions themselves will still contain those files. In any case, if not to remove, it might make sense to at least move these directories all under `README/ReleaseNotes/old/`. I am looking to remove old/deprecated stuff and `git grep` always gets cluttered with stuff from those files, making it more time consuming to find the real code that needs to be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:320,deployability,Releas,ReleaseNotes,320,"Well, I just wanted to start a discussion. Many of those files are empty or only have a single line header. I don't think there's much value in them. Also, the old versions themselves will still contain those files. In any case, if not to remove, it might make sense to at least move these directories all under `README/ReleaseNotes/old/`. I am looking to remove old/deprecated stuff and `git grep` always gets cluttered with stuff from those files, making it more time consuming to find the real code that needs to be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:164,integrability,version,versions,164,"Well, I just wanted to start a discussion. Many of those files are empty or only have a single line header. I don't think there's much value in them. Also, the old versions themselves will still contain those files. In any case, if not to remove, it might make sense to at least move these directories all under `README/ReleaseNotes/old/`. I am looking to remove old/deprecated stuff and `git grep` always gets cluttered with stuff from those files, making it more time consuming to find the real code that needs to be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:164,modifiability,version,versions,164,"Well, I just wanted to start a discussion. Many of those files are empty or only have a single line header. I don't think there's much value in them. Also, the old versions themselves will still contain those files. In any case, if not to remove, it might make sense to at least move these directories all under `README/ReleaseNotes/old/`. I am looking to remove old/deprecated stuff and `git grep` always gets cluttered with stuff from those files, making it more time consuming to find the real code that needs to be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:465,performance,time,time,465,"Well, I just wanted to start a discussion. Many of those files are empty or only have a single line header. I don't think there's much value in them. Also, the old versions themselves will still contain those files. In any case, if not to remove, it might make sense to at least move these directories all under `README/ReleaseNotes/old/`. I am looking to remove old/deprecated stuff and `git grep` always gets cluttered with stuff from those files, making it more time consuming to find the real code that needs to be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:36,deployability,Releas,Release,36,I would also prefer to move the old Release Notes in README/ReleaseNotes/ than removing them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:60,deployability,Releas,ReleaseNotes,60,I would also prefer to move the old Release Notes in README/ReleaseNotes/ than removing them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:13,usability,prefer,prefer,13,I would also prefer to move the old Release Notes in README/ReleaseNotes/ than removing them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:45,deployability,Releas,ReleaseNotes,45,"@couet Ok, I will move them all into `README/ReleaseNotes/old` then. At least I will be able to add `grep -v README` when working on removing other deprecated/obsolete stuff.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:66,deployability,Releas,ReleaseNotes,66,@Axel-Naumann @couet Turned the removals into moving into `README/ReleaseNotes/*`. Please let me know if any of the paths is not good.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:75,deployability,build,build,75,"I need to adjust minuit, as apparently the docs are used by the standalone build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:87,deployability,build,build,87,"Alright, should be ok now. I moved `math/minuit2/doc` back in place for the standalone build to work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3202:106,performance,time,time,106,"I need to redo the moves, I will take comments into consideration and start a new pull request some other time. For now, I'm closing this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3202
https://github.com/root-project/root/pull/3205:1894,availability,error,error,1894,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1940,availability,fault,fault,1940,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:14,deployability,FAIL,FAILED,14,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1856,deployability,fail,failed,1856,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1940,energy efficiency,fault,fault,1940,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:275,interoperability,share,shared,275,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1786,interoperability,share,shared,1786,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1894,performance,error,error,1894,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1940,performance,fault,fault,1940,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:14,reliability,FAIL,FAILED,14,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1856,reliability,fail,failed,1856,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1940,reliability,fault,fault,1940,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1894,safety,error,error,1894,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1940,safety,fault,fault,1940,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:256,security,hash,hash-style,256,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1894,usability,error,error,1894,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:1920,usability,statu,status,1920,"```. 17:22:05 FAILED: lib/libFTGL.so.6.17.01 . 17:22:05 : && /usr/lib64/ccache/c++ -fPIC -std=c++11 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -m64 -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libFTGL.so.6.17 -o lib/libFTGL.so.6.17.01 graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTBitmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTCharmap.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTContour.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTExtrdGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFace.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLBitmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLExtrdFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLOutlineFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPixmapFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLPolygonFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGLTextureFont.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTGlyphContainer.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTLibrary.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTOutlineGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPixmapGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPoint.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTPolyGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTSize.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTTextureGlyph.cxx.o graf3d/ftgl/CMakeFiles/FTGL.dir/src/FTVectoriser.cxx.o /usr/lib64/libOpenGL.so /usr/lib64/libGLX.so /usr/lib64/libGLU.so /usr/lib64/libfreetype.so /usr/lib64/libz.a && :. 17:22:05 /usr/bin/ld: /usr/lib64/libz.a(inflate.o): relocation R_X86_64_PC32 against symbol `inflateReset2' can not be used when making a shared object; recompile with -fPIC. 17:22:05 /usr/bin/ld: final link failed: Bad value. 17:22:05 collect2: error: ld returned 1 exit status. ```. Not my fault, I swear :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:208,deployability,build,builds,208,"@Axel-Naumann I guess the `*-static` packages do not compile their libraries with `-fPIC`, which makes them useless unless ROOT is also fully static. In other words, we need to re-enable `shared` for Jenkins builds for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:188,interoperability,share,shared,188,"@Axel-Naumann I guess the `*-static` packages do not compile their libraries with `-fPIC`, which makes them useless unless ROOT is also fully static. In other words, we need to re-enable `shared` for Jenkins builds for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:37,modifiability,pac,packages,37,"@Axel-Naumann I guess the `*-static` packages do not compile their libraries with `-fPIC`, which makes them useless unless ROOT is also fully static. In other words, we need to re-enable `shared` for Jenkins builds for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3205:54,security,sign,signatures,54,"Yes, I rebased and merged locally. I like to keep GPG signatures, and clicking on GitHub removes them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3205
https://github.com/root-project/root/pull/3208:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:105,reliability,doe,doesn,105,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:146,safety,safe,safety,146,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:253,safety,compl,complexity,253,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:253,security,compl,complexity,253,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:56,testability,simpl,simply,56,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:56,usability,simpl,simply,56,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:256,interoperability,bind,binding,256,"> The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this. Seems to be, globals used very rarely through this list. At least, I did not found any macro there it would happen. May be only in python binding. Also question to @pcanal - which address is TGlobal::GetAddress() has to return? May be it should be address on global variable like gROOT - not the value of variable. In this case wrong casting was **intentionally wrong**. I will push extra commit to check this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:256,modifiability,bind,binding,256,"> The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this. Seems to be, globals used very rarely through this list. At least, I did not found any macro there it would happen. May be only in python binding. Also question to @pcanal - which address is TGlobal::GetAddress() has to return? May be it should be address on global variable like gROOT - not the value of variable. In this case wrong casting was **intentionally wrong**. I will push extra commit to check this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:384,modifiability,variab,variable,384,"> The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this. Seems to be, globals used very rarely through this list. At least, I did not found any macro there it would happen. May be only in python binding. Also question to @pcanal - which address is TGlobal::GetAddress() has to return? May be it should be address on global variable like gROOT - not the value of variable. In this case wrong casting was **intentionally wrong**. I will push extra commit to check this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:423,modifiability,variab,variable,423,"> The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this. Seems to be, globals used very rarely through this list. At least, I did not found any macro there it would happen. May be only in python binding. Also question to @pcanal - which address is TGlobal::GetAddress() has to return? May be it should be address on global variable like gROOT - not the value of variable. In this case wrong casting was **intentionally wrong**. I will push extra commit to check this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:15,safety,compl,complexity,15,"> The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this. Seems to be, globals used very rarely through this list. At least, I did not found any macro there it would happen. May be only in python binding. Also question to @pcanal - which address is TGlobal::GetAddress() has to return? May be it should be address on global variable like gROOT - not the value of variable. In this case wrong casting was **intentionally wrong**. I will push extra commit to check this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:15,security,compl,complexity,15,"> The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this. Seems to be, globals used very rarely through this list. At least, I did not found any macro there it would happen. May be only in python binding. Also question to @pcanal - which address is TGlobal::GetAddress() has to return? May be it should be address on global variable like gROOT - not the value of variable. In this case wrong casting was **intentionally wrong**. I will push extra commit to check this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:489,deployability,patch,patch,489,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:397,energy efficiency,current,current,397,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:258,safety,test,test,258,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:489,safety,patch,patch,489,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:432,security,ident,identical,432,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:489,security,patch,patch,489,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:524,security,ident,identical,524,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:10,testability,simpl,simple,10,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:258,testability,test,test,258,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:10,usability,simpl,simple,10,"Just very simple macro:. ```. void *getGlobal(const char *name) . {. auto gl = gROOT->GetListOfGlobals()->FindObject(name);. if (!gl) return nullptr; . TGlobal *global = dynamic_cast<TGlobal *> (gl);. return global ? global->GetAddress() : nullptr;. }. void test() . {. TCanvas c1;. printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));. printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));. }. ```. In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**. This the provided patch gPad and gROOT printouts are identical. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:3,energy efficiency,current,current,3,"My current finding - function cast was done probably **intentionally** wrong. It was working while some global functions like gPad has signature:. TVirtualPad *&Pad(). And when return values was casted to (void *) one got address of variable. . But code was not work for other several methods:. * ROOT::GetROOT. * TInterpreter::Instance. * TGClient::Instance. One could fix problem with gROOT, but not gInterpreter and gClient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:233,modifiability,variab,variable,233,"My current finding - function cast was done probably **intentionally** wrong. It was working while some global functions like gPad has signature:. TVirtualPad *&Pad(). And when return values was casted to (void *) one got address of variable. . But code was not work for other several methods:. * ROOT::GetROOT. * TInterpreter::Instance. * TGClient::Instance. One could fix problem with gROOT, but not gInterpreter and gClient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:135,security,sign,signature,135,"My current finding - function cast was done probably **intentionally** wrong. It was working while some global functions like gPad has signature:. TVirtualPad *&Pad(). And when return values was casted to (void *) one got address of variable. . But code was not work for other several methods:. * ROOT::GetROOT. * TInterpreter::Instance. * TGClient::Instance. One could fix problem with gROOT, but not gInterpreter and gClient.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:186,availability,state,state,186,"It looks like you right ... [Note: gPad's function has a different return type because it is the only one that is modifiable] [hummm ... gDirectory also should be working in the current state]. > One could fix problem with gROOT, but not gInterpreter and gClient. One could take your idea of the functor, give it some storage and return the address of that storage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:178,energy efficiency,current,current,178,"It looks like you right ... [Note: gPad's function has a different return type because it is the only one that is modifiable] [hummm ... gDirectory also should be working in the current state]. > One could fix problem with gROOT, but not gInterpreter and gClient. One could take your idea of the functor, give it some storage and return the address of that storage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:186,integrability,state,state,186,"It looks like you right ... [Note: gPad's function has a different return type because it is the only one that is modifiable] [hummm ... gDirectory also should be working in the current state]. > One could fix problem with gROOT, but not gInterpreter and gClient. One could take your idea of the functor, give it some storage and return the address of that storage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:114,security,modif,modifiable,114,"It looks like you right ... [Note: gPad's function has a different return type because it is the only one that is modifiable] [hummm ... gDirectory also should be working in the current state]. > One could fix problem with gROOT, but not gInterpreter and gClient. One could take your idea of the functor, give it some storage and return the address of that storage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:217,safety,compl,complex,217,"> One could take your idea of the functor, give it some storage and return the address of that storage. There is easy solution with TGClient::Instance - just change return type. With TInterpreter::Instance it is more complex - there is special workaround for win32. . But seems to be, workaround no longer required in ROOT6. If @bellenot can remove old code, . we can also easily change return type of TInterpreter::Instance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:217,security,compl,complex,217,"> One could take your idea of the functor, give it some storage and return the address of that storage. There is easy solution with TGClient::Instance - just change return type. With TInterpreter::Instance it is more complex - there is special workaround for win32. . But seems to be, workaround no longer required in ROOT6. If @bellenot can remove old code, . we can also easily change return type of TInterpreter::Instance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:90,integrability,inject,injected,90,"Can we simply add `const TROOT *&GetROOTPtrRef()`, in the source file of where `gROOT` is injected in the list of globals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:90,security,inject,injected,90,"Can we simply add `const TROOT *&GetROOTPtrRef()`, in the source file of where `gROOT` is injected in the list of globals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:7,testability,simpl,simply,7,"Can we simply add `const TROOT *&GetROOTPtrRef()`, in the source file of where `gROOT` is injected in the list of globals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:7,usability,simpl,simply,7,"Can we simply add `const TROOT *&GetROOTPtrRef()`, in the source file of where `gROOT` is injected in the list of globals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:88,integrability,inject,injected,88,"> Can we simply add const TROOT *&GetROOTPtrRef(), in the source file of where gROOT is injected in the list of globals? Question - should this function be public? . And that about other gInterpreter and gClient?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:156,integrability,pub,public,156,"> Can we simply add const TROOT *&GetROOTPtrRef(), in the source file of where gROOT is injected in the list of globals? Question - should this function be public? . And that about other gInterpreter and gClient?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:88,security,inject,injected,88,"> Can we simply add const TROOT *&GetROOTPtrRef(), in the source file of where gROOT is injected in the list of globals? Question - should this function be public? . And that about other gInterpreter and gClient?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:9,testability,simpl,simply,9,"> Can we simply add const TROOT *&GetROOTPtrRef(), in the source file of where gROOT is injected in the list of globals? Question - should this function be public? . And that about other gInterpreter and gClient?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:9,usability,simpl,simply,9,"> Can we simply add const TROOT *&GetROOTPtrRef(), in the source file of where gROOT is injected in the list of globals? Question - should this function be public? . And that about other gInterpreter and gClient?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:177,modifiability,variab,variable,177,"I hope that now solution is better. I decide not to change signature of existing static methods like `TGClient::Instance()`, . but just register globals at the place where real variable can be accessed. The only assumption - `gPtr2Interpreter` remains nullptr. It is now a case. Function was used on Windows with ROOT5; now it is deactivated. If Bertrand @bellenot decides, that it is needed one need to check once again code in TInterpreter.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:59,security,sign,signature,59,"I hope that now solution is better. I decide not to change signature of existing static methods like `TGClient::Instance()`, . but just register globals at the place where real variable can be accessed. The only assumption - `gPtr2Interpreter` remains nullptr. It is now a case. Function was used on Windows with ROOT5; now it is deactivated. If Bertrand @bellenot decides, that it is needed one need to check once again code in TInterpreter.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3208:193,security,access,accessed,193,"I hope that now solution is better. I decide not to change signature of existing static methods like `TGClient::Instance()`, . but just register globals at the place where real variable can be accessed. The only assumption - `gPtr2Interpreter` remains nullptr. It is now a case. Function was used on Windows with ROOT5; now it is deactivated. If Bertrand @bellenot decides, that it is needed one need to check once again code in TInterpreter.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3208
https://github.com/root-project/root/pull/3209:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_pcre=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3209
https://github.com/root-project/root/pull/3212:20,availability,reboot,rebooted,20,Windows machine was rebooted by IT while running the PR build. This PR passed on Windows and Linux before. I just dropped a single commit to not remove `-mfpmath=sse` from 32bit. I will just merge this as is.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3212
https://github.com/root-project/root/pull/3212:56,deployability,build,build,56,Windows machine was rebooted by IT while running the PR build. This PR passed on Windows and Linux before. I just dropped a single commit to not remove `-mfpmath=sse` from 32bit. I will just merge this as is.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3212
https://github.com/root-project/root/pull/3214:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora29/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3214
https://github.com/root-project/root/pull/3214:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3214
https://github.com/root-project/root/pull/3214:63,integrability,messag,message,63,@Axel-Naumann Please just fix the spelling in the first commit message before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3214
https://github.com/root-project/root/pull/3214:63,interoperability,messag,message,63,@Axel-Naumann Please just fix the spelling in the first commit message before merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3214
https://github.com/root-project/root/pull/3216:259,energy efficiency,profil,profiles,259,"I was expecting that much of the time is spent in the classes derived from `TVirtualCollectionReader`, which IIRC / IIUC re-implement functionality already present (or worse: already executed! e.g. for `GetSize()`) by `TBranchProxy`. Did we look at different profiles? :-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:33,performance,time,time,33,"I was expecting that much of the time is spent in the classes derived from `TVirtualCollectionReader`, which IIRC / IIUC re-implement functionality already present (or worse: already executed! e.g. for `GetSize()`) by `TBranchProxy`. Did we look at different profiles? :-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:259,performance,profil,profiles,259,"I was expecting that much of the time is spent in the classes derived from `TVirtualCollectionReader`, which IIRC / IIUC re-implement functionality already present (or worse: already executed! e.g. for `GetSize()`) by `TBranchProxy`. Did we look at different profiles? :-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:27,energy efficiency,profil,profiles,27,"> Did we look at different profiles? :-). Yes, my example does not have any collections :). Thus we ought to have a second pass over a test with collections :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:27,performance,profil,profiles,27,"> Did we look at different profiles? :-). Yes, my example does not have any collections :). Thus we ought to have a second pass over a test with collections :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:58,reliability,doe,does,58,"> Did we look at different profiles? :-). Yes, my example does not have any collections :). Thus we ought to have a second pass over a test with collections :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:135,safety,test,test,135,"> Did we look at different profiles? :-). Yes, my example does not have any collections :). Thus we ought to have a second pass over a test with collections :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:135,testability,test,test,135,"> Did we look at different profiles? :-). Yes, my example does not have any collections :). Thus we ought to have a second pass over a test with collections :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:300,deployability,Releas,Release,300,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:409,deployability,patch,patched,409,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:554,deployability,patch,patched,554,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:628,deployability,version,version,628,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:696,deployability,patch,patched,696,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:874,deployability,Patch,Patched,874,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:204,energy efficiency,current,current,204,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:628,integrability,version,version,628,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:628,modifiability,version,version,628,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:123,performance,I/O,I/O,123,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:127,safety,test,tests,127,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:409,safety,patch,patched,409,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:554,safety,patch,patched,554,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:696,safety,patch,patched,696,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:874,safety,Patch,Patched,874,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:409,security,patch,patched,409,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:554,security,patch,patched,554,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:696,security,patch,patched,696,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:874,security,Patch,Patched,874,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:127,testability,test,tests,127,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:32,usability,help,help,32,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:616,usability,Interact,Interactive,616,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:777,usability,user,user-images,777,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:914,usability,user,user-images,914,"Hi,. in case this can be of any help: running [my fork](https://github.com/bluehood/iotools/tree/rootonly) of Jakob's ROOT I/O tests, I don't see an appreciable difference in TTreeReader runtimes between current master and this PR. Timings for 5 runs on uncompressed lhcb open data (CMAKE_BUILD_TYPE=Release, single-thread runs, benchmarks compiled with `-g -O2`):. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. patched TTreeReader: 4.71 4.59 4.44 4.39 4.68 4.71. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. Flamegraphs for SetBranchAddress and patched TTreeReader, in case they can give you any insight. **Interactive version [here](https://eguiraud.web.cern.ch/eguiraud/)**, including patched vs master TTreeReader comparison. **SetBranchAddress**. ![image](https://user-images.githubusercontent.com/10999034/51322268-3681b500-1a65-11e9-8e0d-08038a21eb34.png). **Patched TTreeReader**. ![image](https://user-images.githubusercontent.com/10999034/51322310-5618dd80-1a65-11e9-941d-32324a434359.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:418,availability,operat,operations,418,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:55,energy efficiency,profil,profiled,55,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:279,integrability,interfac,interfaces,279,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:279,interoperability,interfac,interfaces,279,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:279,modifiability,interfac,interfaces,279,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:55,performance,profil,profiled,55,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:170,performance,overhead,overhead,170,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:220,reliability,doe,does,220,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:328,reliability,doe,does,328,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:381,reliability,doe,does,381,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:158,security,sign,significant,158,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:6,usability,help,helpful,6,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:87,deployability,patch,patched,87,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:126,energy efficiency,reduc,reduction,126,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:359,energy efficiency,profil,profile,359,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:502,energy efficiency,measur,measurements,502,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:457,integrability,interfac,interfaces,457,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:195,interoperability,Prox,ProxyRead,195,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:224,interoperability,Prox,ProxyReadTemplate,224,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:457,interoperability,interfac,interfaces,457,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:457,modifiability,interfac,interfaces,457,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:143,performance,time,time,143,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:276,performance,overhead,overhead,276,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:359,performance,profil,profile,359,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:402,reliability,doe,does,402,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:87,safety,patch,patched,87,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:87,security,patch,patched,87,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:264,security,sign,significant,264,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:490,security,trust,trust,490,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:130,performance,time,time,130,"@enrico can you count the number of calls to GetEntry (callgrind is good at that), there should be the same number. Similarly the time spend in GetEntry should be the same in all 3 cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:1024,deployability,Patch,Patched,1024,"ch_ the number of calls to `TBranch::GetEntry` is the same for TTreeReader and TTree+SetBranchAddress for this benchmark:. **SetBranchAddress**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:1697,deployability,build,build,1697,"tch_build/lib/libTree.so] . 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/perf/lib/libRIO.so] . 1,246,687,599 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so. 955,384",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:2534,deployability,build,build,2534,"T/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/perf/lib/libRIO.so] . 1,246,687,599 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . ```. EDIT: @Axel-Naumann it could be that perf misattributes some of the time spent in TTreeReaderValue to TBranch::GetEntry...it seems the number of calls is ""correct"" in patched TTreeReader",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:2960,deployability,patch,patched,2960,"T/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/perf/lib/libRIO.so] . 1,246,687,599 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . ```. EDIT: @Axel-Naumann it could be that perf misattributes some of the time spent in TTreeReaderValue to TBranch::GetEntry...it seems the number of calls is ""correct"" in patched TTreeReader",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:532,integrability,Event,EventReaderRoot,532,"@pcanal indeed _with the patch_ the number of calls to `TBranch::GetEntry` is the same for TTreeReader and TTree+SetBranchAddress for this benchmark:. **SetBranchAddress**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:559,integrability,Event,Event,559,"@pcanal indeed _with the patch_ the number of calls to `TBranch::GetEntry` is the same for TTreeReader and TTree+SetBranchAddress for this benchmark:. **SetBranchAddress**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:1268,interoperability,Prox,ProxyReadTemplate,1268,"Tree.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAdd",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:2057,interoperability,Prox,ProxyRead,2057,"T/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/perf/lib/libRIO.so] . 1,246,687,599 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . ```. EDIT: @Axel-Naumann it could be that perf misattributes some of the time spent in TTreeReaderValue to TBranch::GetEntry...it seems the number of calls is ""correct"" in patched TTreeReader",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:2861,performance,time,time,2861,"T/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/perf/lib/libRIO.so] . 1,246,687,599 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . ```. EDIT: @Axel-Naumann it could be that perf misattributes some of the time spent in TTreeReaderValue to TBranch::GetEntry...it seems the number of calls is ""correct"" in patched TTreeReader",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:1024,safety,Patch,Patched,1024,"ch_ the number of calls to `TBranch::GetEntry` is the same for TTreeReader and TTree+SetBranchAddress for this benchmark:. **SetBranchAddress**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:2960,safety,patch,patched,2960,"T/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/perf/lib/libRIO.so] . 1,246,687,599 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . ```. EDIT: @Axel-Naumann it could be that perf misattributes some of the time spent in TTreeReaderValue to TBranch::GetEntry...it seems the number of calls is ""correct"" in patched TTreeReader",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:1024,security,Patch,Patched,1024,"ch_ the number of calls to `TBranch::GetEntry` is the same for TTreeReader and TTree+SetBranchAddress for this benchmark:. **SetBranchAddress**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,199,164,680 lhcb_opendata.cc:EventReaderRoot::NextEvent(Event*) [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 794,404,174 ???:TLeafI::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 524,364,241 lhcb_opendata.cc:main [/home/eguiraud/Scratchpad/iotools/lhcb_opendata] . 292,680,885 ???:TBufferFile::ReadInt(int&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:2960,security,patch,patched,2960,"T/pcanal_patch_build/lib/libRIO.so] . ```. **Patched TTreeReader**. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 4,367,472,032 ???:ROOT::Internal::TTreeReaderValueBase::EReadStatus ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplate<&ROOT::Detail::TBranchProxy::ReadNoParentNoBranch. 2,456,703,018 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTreePlayer.so]. 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libRIO.so] . 1,246,859,800 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so]. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. **Master TTreeReader**. ```. 10,099,778,889 ???:ROOT::Internal::TTreeReaderValueBase::ProxyRead() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 2,047,252,519 ???:ROOT::Internal::TTreeReaderValueBase::GetAddress() [/home/eguiraud/ROOT/perf/lib/libTreePlayer.so] . 1,988,127,855 ???:TLeafD::ReadBasket(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . 1,420,091,325 ???:TBufferFile::ReadDouble(double&) [/home/eguiraud/ROOT/perf/lib/libRIO.so] . 1,246,687,599 /build/glibc-yWQXbR/glibc-2.24/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/lib/x86_64-linux-gnu/libc-2.24.so. 955,384,507 ???:TBranch::ReadLeaves1Impl(TBuffer&) [/home/eguiraud/ROOT/perf/lib/libTree.so] . ```. EDIT: @Axel-Naumann it could be that perf misattributes some of the time spent in TTreeReaderValue to TBranch::GetEntry...it seems the number of calls is ""correct"" in patched TTreeReader",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:293,availability,slo,slow,293,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:174,deployability,patch,patch,174,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:495,deployability,fail,fails,495,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:368,performance,time,time,368,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:483,performance,time,time,483,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:529,performance,overhead,overhead,529,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:293,reliability,slo,slow,293,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:495,reliability,fail,fails,495,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:174,safety,patch,patch,174,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:174,security,patch,patch,174,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:840,testability,unit,unit,840,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:398,usability,visual,visually,398,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:442,usability,clear,clear,442,"i am struggling to reconcile the number. I see:. ```. TTree: 2.41 2.65 2.42 2.40 2.49 2.45. master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81. ```. and. ```. indeed with the patch the number of calls to TBranch::GetEntry . ```. Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:. ```. 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] . ```. where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:49,availability,slo,slow,49,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:298,availability,slo,slowdown,298,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:90,deployability,patch,patch,90,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:604,deployability,contain,contains,604,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:227,energy efficiency,cpu,cpu,227,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:386,interoperability,Prox,ProxyReadTemplate,386,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:227,performance,cpu,cpu,227,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:322,performance,overhead,overhead,322,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:49,reliability,slo,slow,49,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:96,reliability,doe,does,96,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:298,reliability,slo,slowdown,298,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:90,safety,patch,patch,90,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:90,security,patch,patch,90,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:211,testability,unit,unit,211,"What I see is that TTree is still about twice as slow as TTree for Jakob's benchmark, the patch does not affect the timings drastically. The number of calls to TBranch::GetEntry were counted with callgrind, the unit is retired cpu instructions. The flamegraphs seem to suggest that the bulk of the slowdown comes from the overhead of going through TTreeReaderValue::Get, GetAddress and ProxyReadTemplate instead of directly calling GetEntry. I'm away next week but you should be able to run the benchmark easily, it's at https://github.com/bluehood/iotools/tree/rootonly (branch rootonly) and the README contains instructions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:66,integrability,transform,transformation,66,I see ... RDataFrame probably need to go through the same kind of transformation TTreeReader went through to avoid call GetAddress for every entry but rather once per file (via being 'notified').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:66,interoperability,transform,transformation,66,I see ... RDataFrame probably need to go through the same kind of transformation TTreeReader went through to avoid call GetAddress for every entry but rather once per file (via being 'notified').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:109,safety,avoid,avoid,109,I see ... RDataFrame probably need to go through the same kind of transformation TTreeReader went through to avoid call GetAddress for every entry but rather once per file (via being 'notified').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:174,performance,cach,cache,174,"Do you mean that RDataFrame is not used at all in those 2 examples? i.e. If RDataFrame is used, it is the one (indirectly) calling GetAddress/GetWhere and the solution is to cache the address and have the address/cache refreshed once every file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:213,performance,cach,cache,213,"Do you mean that RDataFrame is not used at all in those 2 examples? i.e. If RDataFrame is used, it is the one (indirectly) calling GetAddress/GetWhere and the solution is to cache the address and have the address/cache refreshed once every file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:67,deployability,stack,stacks,67,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:220,deployability,version,version,220,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:308,deployability,patch,patch,308,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:416,deployability,patch,patch,416,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:465,deployability,version,version,465,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:220,integrability,version,version,220,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:465,integrability,version,version,465,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:220,modifiability,version,version,220,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:465,modifiability,version,version,465,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:93,performance,I/O,I/O,93,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:161,performance,overhead,overhead,161,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:184,performance,time,time,184,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:395,performance,perform,performance,395,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:308,safety,patch,patch,308,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:416,safety,patch,patch,416,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:308,security,patch,patch,308,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:416,security,patch,patch,416,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:454,testability,simpl,simplified,454,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:347,usability,confirm,confirm,347,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:395,usability,perform,performance,395,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:454,usability,simpl,simplified,454,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:506,usability,clear,clear,506,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:13,deployability,version,version,13,> There is a version that uses RDF but I did not run it. and that's what I ran :). So I'll take another look ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:13,integrability,version,version,13,> There is a version that uses RDF but I did not run it. and that's what I ran :). So I'll take another look ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:13,modifiability,version,version,13,> There is a version that uses RDF but I did not run it. and that's what I ran :). So I'll take another look ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:193,performance,overhead,overhead,193,"I see:. ```. old reader: real 0m7.333s. new reader: real 0m6.324s. set address: real 0m3.687s. ```. so some progress but not as much as in my example .... (still it is a decrease of 28% of the overhead). This is with gcc8, RelWithDebInfo and -O2 -g on the test themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:256,safety,test,test,256,"I see:. ```. old reader: real 0m7.333s. new reader: real 0m6.324s. set address: real 0m3.687s. ```. so some progress but not as much as in my example .... (still it is a decrease of 28% of the overhead). This is with gcc8, RelWithDebInfo and -O2 -g on the test themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:256,testability,test,test,256,"I see:. ```. old reader: real 0m7.333s. new reader: real 0m6.324s. set address: real 0m3.687s. ```. so some progress but not as much as in my example .... (still it is a decrease of 28% of the overhead). This is with gcc8, RelWithDebInfo and -O2 -g on the test themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:108,usability,progress,progress,108,"I see:. ```. old reader: real 0m7.333s. new reader: real 0m6.324s. set address: real 0m3.687s. ```. so some progress but not as much as in my example .... (still it is a decrease of 28% of the overhead). This is with gcc8, RelWithDebInfo and -O2 -g on the test themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:15,deployability,Releas,Release,15,"Ok I was using Release, but I had quite some noise in the timings even though they were all with a warm cache and the various cpu throttling things disabled. It might very well be that averaging over many runs I'll notice some speedup too",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:126,energy efficiency,cpu,cpu,126,"Ok I was using Release, but I had quite some noise in the timings even though they were all with a warm cache and the various cpu throttling things disabled. It might very well be that averaging over many runs I'll notice some speedup too",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:104,performance,cach,cache,104,"Ok I was using Release, but I had quite some noise in the timings even though they were all with a warm cache and the various cpu throttling things disabled. It might very well be that averaging over many runs I'll notice some speedup too",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:126,performance,cpu,cpu,126,"Ok I was using Release, but I had quite some noise in the timings even though they were all with a warm cache and the various cpu throttling things disabled. It might very well be that averaging over many runs I'll notice some speedup too",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3216:130,performance,throttl,throttling,130,"Ok I was using Release, but I had quite some noise in the timings even though they were all with a warm cache and the various cpu throttling things disabled. It might very well be that averaging over many runs I'll notice some speedup too",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3216
https://github.com/root-project/root/pull/3217:111,deployability,version,version,111,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:129,deployability,build,build,129,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:135,deployability,fail,fail,135,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:111,integrability,version,version,111,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:111,modifiability,version,version,111,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:135,reliability,fail,fail,135,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:6,safety,review,review,6,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:64,safety,valid,valid,64,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3217:6,testability,review,review,6,"After review with @stwunsch , we concluded that the changes are valid, but the reason is not that the previous version makes the build fail. The real reason is that we need to invoke the `CPyCppyy::CPPOverload_Check` instead of `TPython::CPPOverload_Check`, which has an extra check for the initialization of the Python interpreter that we do not need.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3217
https://github.com/root-project/root/pull/3218:38,availability,reboot,reboot,38,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3218:23,deployability,build,builds,23,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3218:109,deployability,build,builds,109,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3218:120,energy efficiency,green,green,120,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3218:127,testability,Simpl,Simply,127,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3218:127,usability,Simpl,Simply,127,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3218:152,usability,help,help,152,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3218:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3218
https://github.com/root-project/root/pull/3221:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:11,deployability,Build,Build,11,"@phsft-bot Build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:25,performance,perform,performance-,25,"@phsft-bot Build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:25,usability,perform,performance-,25,"@phsft-bot Build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:11,deployability,Build,Build,11,"@phsft-bot Build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:25,performance,perform,performance-,25,"@phsft-bot Build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3221:25,usability,perform,performance-,25,"@phsft-bot Build on ROOT-performance-centos7-multicore/default, ROOT-fedora27/noimt, ROOT-fedora29/python3, ROOT-ubuntu16/rtcxxmod, mac1014/cxx17, windows10/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3221
https://github.com/root-project/root/pull/3222:184,deployability,version,version,184,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:38,integrability,interfac,interface,38,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:51,integrability,abstract,abstract,51,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:184,integrability,version,version,184,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:38,interoperability,interfac,interface,38,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:38,modifiability,interfac,interface,38,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:51,modifiability,abstract,abstract,51,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:184,modifiability,version,version,184,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:64,performance,I/O,I/O,64,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:109,performance,I/O,I/O,109,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:153,testability,simpl,simplest,153,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:153,usability,simpl,simplest,153,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:81,deployability,version,version,81,"> The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary. Thanks Philippe, I had tried the ClassDef( ,0), but I forgot to mention it in the LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:81,integrability,version,version,81,"> The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary. Thanks Philippe, I had tried the ClassDef( ,0), but I forgot to mention it in the LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:81,modifiability,version,version,81,"> The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary. Thanks Philippe, I had tried the ClassDef( ,0), but I forgot to mention it in the LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:6,performance,I/O,I/O,6,"> The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary. Thanks Philippe, I had tried the ClassDef( ,0), but I forgot to mention it in the LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:50,testability,simpl,simplest,50,"> The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary. Thanks Philippe, I had tried the ClassDef( ,0), but I forgot to mention it in the LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:50,usability,simpl,simplest,50,"> The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary. Thanks Philippe, I had tried the ClassDef( ,0), but I forgot to mention it in the LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:70,availability,failur,failures,70,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:70,deployability,fail,failures,70,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:70,performance,failur,failures,70,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:70,reliability,fail,failures,70,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:65,safety,test,test,65,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:65,testability,test,test,65,"After discussing with @yamaguchi1024 and @oshadura, the rtcxxmod test failures might be due to a cling bug. I suggest to wait with this PR until that's resolved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3222:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3222
https://github.com/root-project/root/pull/3228:73,deployability,depend,depending,73,@Teemperor Because post script doesn't work when the list of pcms change depending on which -D option that you give to cmake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3228
https://github.com/root-project/root/pull/3228:73,integrability,depend,depending,73,@Teemperor Because post script doesn't work when the list of pcms change depending on which -D option that you give to cmake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3228
https://github.com/root-project/root/pull/3228:73,modifiability,depend,depending,73,@Teemperor Because post script doesn't work when the list of pcms change depending on which -D option that you give to cmake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3228
https://github.com/root-project/root/pull/3228:31,reliability,doe,doesn,31,@Teemperor Because post script doesn't work when the list of pcms change depending on which -D option that you give to cmake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3228
https://github.com/root-project/root/pull/3228:73,safety,depend,depending,73,@Teemperor Because post script doesn't work when the list of pcms change depending on which -D option that you give to cmake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3228
https://github.com/root-project/root/pull/3228:73,testability,depend,depending,73,@Teemperor Because post script doesn't work when the list of pcms change depending on which -D option that you give to cmake,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3228
https://github.com/root-project/root/pull/3228:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3228
https://github.com/root-project/root/pull/3231:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3231
https://github.com/root-project/root/pull/3232:23,deployability,fail,fail,23,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:97,deployability,build,builds,97,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:118,deployability,fail,fail,118,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:126,integrability,configur,configure,126,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:126,modifiability,configur,configure,126,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:23,reliability,fail,fail,23,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:118,reliability,fail,fail,118,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:126,security,configur,configure,126,"Note: This will likely fail since some of the options being removed are still enabled in Jenkins builds (so ROOT will fail to configure). Once Jenkins is adjusted, this PR should pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:74,deployability,API,API,74,"@amadio @Axel-Naumann . Why you decide to remove ODBC? It is same kind of API as MySQL or Oracle. Probably, there are not that much users, but still. . Last relevant post on forum is from 2017: https://root-forum.cern.ch/t/26631",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:74,integrability,API,API,74,"@amadio @Axel-Naumann . Why you decide to remove ODBC? It is same kind of API as MySQL or Oracle. Probably, there are not that much users, but still. . Last relevant post on forum is from 2017: https://root-forum.cern.ch/t/26631",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:74,interoperability,API,API,74,"@amadio @Axel-Naumann . Why you decide to remove ODBC? It is same kind of API as MySQL or Oracle. Probably, there are not that much users, but still. . Last relevant post on forum is from 2017: https://root-forum.cern.ch/t/26631",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:132,usability,user,users,132,"@amadio @Axel-Naumann . Why you decide to remove ODBC? It is same kind of API as MySQL or Oracle. Probably, there are not that much users, but still. . Last relevant post on forum is from 2017: https://root-forum.cern.ch/t/26631",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:375,deployability,releas,release,375,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:403,deployability,build,building,403,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:128,energy efficiency,current,current,128,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:464,energy efficiency,current,current,464,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:154,integrability,interfac,interfaces,154,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:154,interoperability,interfac,interfaces,154,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:154,modifiability,interfac,interfaces,154,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:205,safety,test,test,205,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:319,safety,test,tests,319,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:205,testability,test,test,205,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:319,testability,test,tests,319,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:136,usability,user,users,136,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18! We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:16,deployability,build,building,16,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:125,deployability,build,building,125,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:76,energy efficiency,current,current,76,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:159,energy efficiency,current,current,159,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:185,integrability,interfac,interfaces,185,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:185,interoperability,interfac,interfaces,185,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:185,modifiability,interfac,interfaces,185,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:167,usability,user,users,167,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:215,usability,person,personally,215,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... Just set default OFF for ODBC building. . > We are not aware of current users of the ODBC interfaces. I have no idea. I personally did not try it for more than 10 years.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:16,deployability,build,building,16,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... This is not true. I've always kept `-Dodbc=ON` in my builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:148,deployability,build,builds,148,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... This is not true. I've always kept `-Dodbc=ON` in my builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:76,energy efficiency,current,current,76,> And IIRC even building the ODBC part is becoming increasingly tricky with current distros... This is not true. I've always kept `-Dodbc=ON` in my builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:39,integrability,configur,configuring,39,"Supported options were computed before configuring, so removed options ended up enabled. Let's see if my last commit to `rootspi` fixed this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:39,modifiability,configur,configuring,39,"Supported options were computed before configuring, so removed options ended up enabled. Let's see if my last commit to `rootspi` fixed this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:39,security,configur,configuring,39,"Supported options were computed before configuring, so removed options ended up enabled. Let's see if my last commit to `rootspi` fixed this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:0,usability,Support,Supported,0,"Supported options were computed before configuring, so removed options ended up enabled. Let's see if my last commit to `rootspi` fixed this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:35,safety,review,review,35,"@gganis Hi Gerri, could you please review also this new pull request? In particular, removals of afdsmgr, globus, castor, rfio, and bonjour. Thank you!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:35,testability,review,review,35,"@gganis Hi Gerri, could you please review also this new pull request? In particular, removals of afdsmgr, globus, castor, rfio, and bonjour. Thank you!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:43,availability,state,state,43,@pcanal Could you please review the PR and state an opinion about removal of ODBC? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:43,integrability,state,state,43,@pcanal Could you please review the PR and state an opinion about removal of ODBC? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:25,safety,review,review,25,@pcanal Could you please review the PR and state an opinion about removal of ODBC? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:25,testability,review,review,25,@pcanal Could you please review the PR and state an opinion about removal of ODBC? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:24,safety,review,review,24,@couet Could you please review removals of Qt and Graphviz?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:24,testability,review,review,24,@couet Could you please review removals of Qt and Graphviz?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:265,deployability,releas,release,265,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:314,deployability,releas,release,314,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:466,energy efficiency,adapt,adaptions,466,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:466,integrability,adapt,adaptions,466,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:131,interoperability,specif,specific,131,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:140,interoperability,plug,plugin,140,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:466,interoperability,adapt,adaptions,466,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:466,modifiability,adapt,adaptions,466,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:73,security,access,access,73,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:23,usability,support,support,23,"I am leery of removing support for ODBC as it technically allows to have access to any/most database type without having to have a specific plugin for that database. In this one case, I would at least leave it in (deprecated mode) a while longer (at least one more release ; no every body is jumping on the latest release so it might take a while for some people to notice the deprecation .. and yes we could then bring it back but it might (or might not) then need adaptions to newer things (in particular cmake improvements) that would be done easier if it is left in).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:62,deployability,updat,update,62,HDFS is still in use (albeit it stopped growing) and the last update to the plugin was just '18 months' ago by an external contributor (Evgeny Boger <eugenyboger@gmail.com>). Before removing it we ought to reach you to him.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:76,interoperability,plug,plugin,76,HDFS is still in use (albeit it stopped growing) and the last update to the plugin was just '18 months' ago by an external contributor (Evgeny Boger <eugenyboger@gmail.com>). Before removing it we ought to reach you to him.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:62,safety,updat,update,62,HDFS is still in use (albeit it stopped growing) and the last update to the plugin was just '18 months' ago by an external contributor (Evgeny Boger <eugenyboger@gmail.com>). Before removing it we ought to reach you to him.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:62,security,updat,update,62,HDFS is still in use (albeit it stopped growing) and the last update to the plugin was just '18 months' ago by an external contributor (Evgeny Boger <eugenyboger@gmail.com>). Before removing it we ought to reach you to him.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:32,usability,stop,stopped,32,HDFS is still in use (albeit it stopped growing) and the last update to the plugin was just '18 months' ago by an external contributor (Evgeny Boger <eugenyboger@gmail.com>). Before removing it we ought to reach you to him.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:115,deployability,releas,release,115,"@pcanal. Ok, I will drop the removal of ODBC then, and wait before removing HDFS. We could leave HDFS for the next release as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:67,security,authenticat,authentication,67,"@amadio Bonjour ok. RFIO ok (but it includes also Rfio, aka UidGid authentication, which is a different thing; I wonder if all authentication options should not be removed as a whole).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:127,security,authenticat,authentication,127,"@amadio Bonjour ok. RFIO ok (but it includes also Rfio, aka UidGid authentication, which is a different thing; I wonder if all authentication options should not be removed as a whole).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:60,usability,Ui,UidGid,60,"@amadio Bonjour ok. RFIO ok (but it includes also Rfio, aka UidGid authentication, which is a different thing; I wonder if all authentication options should not be removed as a whole).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:8,deployability,Modul,Modulo,8,"@amadio Modulo a few comments inline, overall the removals of afdsmgr, globus, castor, rfio, and bonjour looks good to me. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:8,modifiability,Modul,Modulo,8,"@amadio Modulo a few comments inline, overall the removals of afdsmgr, globus, castor, rfio, and bonjour looks good to me. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:8,safety,Modul,Modulo,8,"@amadio Modulo a few comments inline, overall the removals of afdsmgr, globus, castor, rfio, and bonjour looks good to me. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:96,interoperability,plug,plugin,96,@pcanal - HDFS can go. We still use it at most of the CMS Tier-2 sites but not through the ROOT plugin.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:164,deployability,version,version,164,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:304,deployability,build,builds,304,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:164,integrability,version,version,164,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:164,modifiability,version,version,164,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:21,safety,review,review,21,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:217,safety,test,tests,217,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:105,security,firewal,firewall,105,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:21,testability,review,review,21,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:217,testability,test,tests,217,"Alright, I think all review comments have been addressed. Unfortunately, Jenkins is not working due to a firewall problem, but additional changes from the previous version (which passed the checks) are small, and all tests still pass locally on my machine, so I will merge this and watch the incremental builds to see if there's anything I missed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:38,deployability,build,build,38,"Jenkins is back, so better to let the build run before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:29,availability,fault,fault,29,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:29,energy efficiency,fault,fault,29,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:29,performance,fault,fault,29,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:29,reliability,fault,fault,29,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:29,safety,fault,fault,29,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:55,safety,test,test,55,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3232:55,testability,test,test,55,"Travis CI breakage is not my fault, merging as Jenkins test passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3232
https://github.com/root-project/root/pull/3235:24,usability,user,user-images,24,. ![screenshot](https://user-images.githubusercontent.com/249404/51025576-ba7efd00-158c-11e9-8fed-8f6eea53a423.png). Stays like this forever for me (Google Chrome on Linux).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:73,integrability,messag,messages,73,> Stays like this forever for me (Google Chrome on Linux). Can you check messages in browser console (Ctrl + Shift + I)? And try to cleanup browser cache - you can have by chance some old JSROOT scripts there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:73,interoperability,messag,messages,73,> Stays like this forever for me (Google Chrome on Linux). Can you check messages in browser console (Ctrl + Shift + I)? And try to cleanup browser cache - you can have by chance some old JSROOT scripts there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:148,performance,cach,cache,148,> Stays like this forever for me (Google Chrome on Linux). Can you check messages in browser console (Ctrl + Shift + I)? And try to cleanup browser cache - you can have by chance some old JSROOT scripts there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:150,performance,cach,cache,150,![screenshot](https://user-images.githubusercontent.com/249404/51119045-173f1980-1812-11e9-9195-9cbc431d1709.png). I get this even after clearing the cache.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:22,usability,user,user-images,22,![screenshot](https://user-images.githubusercontent.com/249404/51119045-173f1980-1812-11e9-9195-9cbc431d1709.png). I get this even after clearing the cache.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:137,usability,clear,clearing,137,![screenshot](https://user-images.githubusercontent.com/249404/51119045-173f1980-1812-11e9-9195-9cbc431d1709.png). I get this even after clearing the cache.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:134,security,certif,certificate,134,"Seems to be, you have https problem on my jsroot.gsi.de website. Can you just open it: https://jsroot.gsi.de ? May be, you have wrong certificate - try same URL from other machine. I cannot exclude, that there are problems on my side.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3235:76,usability,user,user-images,76,"That's right, I cannot open the website above either. ![screenshot](https://user-images.githubusercontent.com/249404/51164239-94af6c00-189c-11e9-9fae-eacfd1c03bb9.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3235
https://github.com/root-project/root/pull/3236:89,deployability,integr,integration,89,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:129,deployability,integr,integration,129,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:89,integrability,integr,integration,89,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:129,integrability,integr,integration,129,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:89,interoperability,integr,integration,89,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:129,interoperability,integr,integration,129,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:89,modifiability,integr,integration,89,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:129,modifiability,integr,integration,129,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:89,reliability,integr,integration,89,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:129,reliability,integr,integration,129,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:89,security,integr,integration,89,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:129,security,integr,integration,129,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:89,testability,integr,integration,89,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:129,testability,integr,integration,129,"Please let me know how you want to proceed, in particular:. * One PR / Three PR. * Start integration from bug fix branch / Start integration from master branch. * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:111,testability,coverag,coverage,111,@ktf @amadio this is on hold until we get back Arrow on our nodes as at the moment we do not have the required coverage.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:33,usability,help,help,33,"If there is anything I can do to help, let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18.04/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:31,deployability,instal,installed,31,Let's see if this will work. I installed arrow on the Ubuntu 18.04 and CentOS 7 nodes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:16,deployability,build,build,16,"Well, it seems `build just on X` doesn't work after labels have changed names... I think it's time for a full overhaul of the Jenkins PR infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:137,deployability,infrastructur,infrastructure,137,"Well, it seems `build just on X` doesn't work after labels have changed names... I think it's time for a full overhaul of the Jenkins PR infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:94,performance,time,time,94,"Well, it seems `build just on X` doesn't work after labels have changed names... I think it's time for a full overhaul of the Jenkins PR infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:33,reliability,doe,doesn,33,"Well, it seems `build just on X` doesn't work after labels have changed names... I think it's time for a full overhaul of the Jenkins PR infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:11,deployability,build,build,11,@phsft-bot build with flags -Dall=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:8,availability,error,errors,8,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:18,availability,fault,fault,18,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:18,energy efficiency,fault,fault,18,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:8,performance,error,errors,8,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:18,performance,fault,fault,18,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:18,reliability,fault,fault,18,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:8,safety,error,errors,8,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:18,safety,fault,fault,18,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:8,usability,error,errors,8,Are the errors my fault?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:10,availability,error,errors,10,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:20,availability,fault,fault,20,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:199,availability,error,errors,199,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:20,energy efficiency,fault,fault,20,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:10,performance,error,errors,10,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:20,performance,fault,fault,20,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:199,performance,error,errors,199,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:20,reliability,fault,fault,20,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:10,safety,error,errors,10,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:20,safety,fault,fault,20,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:199,safety,error,errors,199,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:10,usability,error,errors,10,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:199,usability,error,errors,199,"> Are the errors my fault? I don't think so. Let's get master clean before rerunning here. Maybe we need just `-Darrow=ON` on the right node instead of `-Dall=ON`, which might be showing some of the errors above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:11,deployability,build,build,11,@phsft-bot build with flags -Dall=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:92,deployability,updat,update,92,"@dpiparo sure, as I said above, please let me know how you prefer to proceed. I will try to update the PR later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:92,safety,updat,update,92,"@dpiparo sure, as I said above, please let me know how you prefer to proceed. I will try to update the PR later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:92,security,updat,update,92,"@dpiparo sure, as I said above, please let me know how you prefer to proceed. I will try to update the PR later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:59,usability,prefer,prefer,59,"@dpiparo sure, as I said above, please let me know how you prefer to proceed. I will try to update the PR later today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:28,deployability,version,version,28,let's start with the master version of the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:28,integrability,version,version,28,let's start with the master version of the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:28,modifiability,version,version,28,let's start with the master version of the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:11,deployability,build,build,11,@phsft-bot build with flags -Dall=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:11,deployability,build,build,11,@phsft-bot build with flags -Darrow=ON -Dfail-on-missing=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:11,deployability,build,build,11,@phsft-bot build with flags -Darrow=ON -Dfail-on-missing=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:11,deployability,build,build,11,@phsft-bot build with flags -Darrow=ON -Dfail-on-missing=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3236:38,usability,close,close,38,"@Axel-Naumann @ktf maybe it's best to close this PR? PR #3277 is the same thing for master, and has been merged already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3236
https://github.com/root-project/root/pull/3237:0,safety,Test,Test,0,Test here:. https://github.com/root-project/roottest/pull/270,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3237:0,testability,Test,Test,0,Test here:. https://github.com/root-project/roottest/pull/270,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3237:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3237:11,deployability,build,build,11,@phsft-bot build only on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3237:30,performance,perform,performance-,30,@phsft-bot build only on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3237:30,usability,perform,performance-,30,@phsft-bot build only on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3237:0,deployability,Build,Builds,0,"Builds confirmed in https://github.com/root-project/roottest/pull/270, merging both.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3237:7,usability,confirm,confirmed,7,"Builds confirmed in https://github.com/root-project/roottest/pull/270, merging both.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3237
https://github.com/root-project/root/pull/3238:36,deployability,build,build,36,I've tested on the mac1014/clang100 build node and this fixes the warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3238
https://github.com/root-project/root/pull/3238:5,safety,test,tested,5,I've tested on the mac1014/clang100 build node and this fixes the warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3238
https://github.com/root-project/root/pull/3238:5,testability,test,tested,5,I've tested on the mac1014/clang100 build node and this fixes the warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3238
https://github.com/root-project/root/pull/3238:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3238
https://github.com/root-project/root/pull/3240:74,deployability,depend,depend,74,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:318,deployability,depend,depending,318,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:74,integrability,depend,depend,74,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:318,integrability,depend,depending,318,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:74,modifiability,depend,depend,74,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:318,modifiability,depend,depending,318,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:74,safety,depend,depend,74,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:318,safety,depend,depending,318,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:375,safety,safe,safer,375,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:74,testability,depend,depend,74,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3240:318,testability,depend,depending,318,"@hageboeck and I discussed and decided that it's best to just make RooFit depend on `mathmore` being enabled. It's definitely using GSL (and has copies of parts of GSL code in some files). Since it [links](https://github.com/root-project/root/blob/master/roofit/roofit/CMakeLists.txt#L140) against `MathMore` library, depending on `mathmore` and not just GSL is probably the safer option for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3240
https://github.com/root-project/root/pull/3242:14,deployability,Modul,Modules,14,RM -> Runtime Modules :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:14,modifiability,Modul,Modules,14,RM -> Runtime Modules :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:14,safety,Modul,Modules,14,RM -> Runtime Modules :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:11,deployability,build,build,11,@phsft-bot build with -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:78,energy efficiency,core,core,78,"@yamaguchi1024 @hageboeck , would it be possible to have a unit test, even in core perhaps as part of the TClass suite of tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:64,safety,test,test,64,"@yamaguchi1024 @hageboeck , would it be possible to have a unit test, even in core perhaps as part of the TClass suite of tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:122,safety,test,tests,122,"@yamaguchi1024 @hageboeck , would it be possible to have a unit test, even in core perhaps as part of the TClass suite of tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:59,testability,unit,unit,59,"@yamaguchi1024 @hageboeck , would it be possible to have a unit test, even in core perhaps as part of the TClass suite of tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:64,testability,test,test,64,"@yamaguchi1024 @hageboeck , would it be possible to have a unit test, even in core perhaps as part of the TClass suite of tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:122,testability,test,tests,122,"@yamaguchi1024 @hageboeck , would it be possible to have a unit test, even in core perhaps as part of the TClass suite of tests?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:21,deployability,fail,failing,21,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:21,reliability,fail,failing,21,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:29,safety,test,tests,29,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:64,safety,test,test,64,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:29,testability,test,tests,29,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:59,testability,unit,unit,59,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:64,testability,test,test,64,"@dpiparo I think the failing tests in #3222 will work as a unit test for this issue, but I'm not sure if I understood your suggestion correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3242:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3242
https://github.com/root-project/root/pull/3243:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3243
https://github.com/root-project/root/pull/3244:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3244
https://github.com/root-project/root/pull/3244:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3244
https://github.com/root-project/root/pull/3244:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3244
https://github.com/root-project/root/pull/3244:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3244
https://github.com/root-project/root/pull/3244:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora27/noimt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3244
https://github.com/root-project/root/pull/3245:326,interoperability,convers,conversion,326,"@dpiparo @etejedor the main issue with TTreeProcessorMT is that it expects a TEntryList with global entry numbers in its constructor, but TChain and TTreeReader instead make use of a TEntryList with a list of TEntryLists (one per TTree in the TChain). Either TTreeProcessorMT adopts this behavior, or RDataFrame must make the conversion from one format to the other for MT runs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3245
https://github.com/root-project/root/pull/3245:346,interoperability,format,format,346,"@dpiparo @etejedor the main issue with TTreeProcessorMT is that it expects a TEntryList with global entry numbers in its constructor, but TChain and TTreeReader instead make use of a TEntryList with a list of TEntryLists (one per TTree in the TChain). Either TTreeProcessorMT adopts this behavior, or RDataFrame must make the conversion from one format to the other for MT runs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3245
https://github.com/root-project/root/pull/3245:288,usability,behavi,behavior,288,"@dpiparo @etejedor the main issue with TTreeProcessorMT is that it expects a TEntryList with global entry numbers in its constructor, but TChain and TTreeReader instead make use of a TEntryList with a list of TEntryLists (one per TTree in the TChain). Either TTreeProcessorMT adopts this behavior, or RDataFrame must make the conversion from one format to the other for MT runs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3245
https://github.com/root-project/root/pull/3245:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3245
https://github.com/root-project/root/pull/3245:101,deployability,upgrad,upgrade,101,I am merging this given that https://sft.its.cern.ch/jira/browse/ROOT-9902 reminds us of the need to upgrade TTreeProcessorMT in order to take into account the TEntryList in the IMT case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3245
https://github.com/root-project/root/pull/3245:101,modifiability,upgrad,upgrade,101,I am merging this given that https://sft.its.cern.ch/jira/browse/ROOT-9902 reminds us of the need to upgrade TTreeProcessorMT in order to take into account the TEntryList in the IMT case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3245
https://github.com/root-project/root/pull/3247:228,deployability,releas,released,228,"FYI, I will merge this *right* after the tag of 6.16/00 tomorrow. I really do not want to take *any* risk - we're two months late with that tag! This will thus be part of 6.16/02, which will likely (given past experience...) be released in February.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3247
https://github.com/root-project/root/pull/3247:101,safety,risk,risk,101,"FYI, I will merge this *right* after the tag of 6.16/00 tomorrow. I really do not want to take *any* risk - we're two months late with that tag! This will thus be part of 6.16/02, which will likely (given past experience...) be released in February.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3247
https://github.com/root-project/root/pull/3247:101,security,risk,risk,101,"FYI, I will merge this *right* after the tag of 6.16/00 tomorrow. I really do not want to take *any* risk - we're two months late with that tag! This will thus be part of 6.16/02, which will likely (given past experience...) be released in February.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3247
https://github.com/root-project/root/pull/3247:210,usability,experien,experience,210,"FYI, I will merge this *right* after the tag of 6.16/00 tomorrow. I really do not want to take *any* risk - we're two months late with that tag! This will thus be part of 6.16/02, which will likely (given past experience...) be released in February.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3247
https://github.com/root-project/root/pull/3249:62,safety,review,review,62,Dear @amadio . The fixes are done. Thank you so much for your review. O.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:62,testability,review,review,62,Dear @amadio . The fixes are done. Thank you so much for your review. O.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:24,deployability,fail,failing,24,"Hi Guys, . obviously is failing because ipopt is not installed in the systems,. do you thinks I should write a builtin_ipopt option in cmake to provide ipopt? A hug,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:53,deployability,instal,installed,53,"Hi Guys, . obviously is failing because ipopt is not installed in the systems,. do you thinks I should write a builtin_ipopt option in cmake to provide ipopt? A hug,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:24,reliability,fail,failing,24,"Hi Guys, . obviously is failing because ipopt is not installed in the systems,. do you thinks I should write a builtin_ipopt option in cmake to provide ipopt? A hug,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:170,safety,test,test,170,"I don't like the idea of adding more builtins to ROOT. Please make your option disabled by default instead. If we decide to merge this in, we can add ipopt to a node and test beforehand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:170,testability,test,test,170,"I don't like the idea of adding more builtins to ROOT. Please make your option disabled by default instead. If we decide to merge this in, we can add ipopt to a node and test beforehand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:79,deployability,fail,fails,79,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:257,deployability,depend,depends,257,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:302,deployability,depend,dependency,302,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:474,deployability,depend,dependency,474,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:450,energy efficiency,reduc,reduce,450,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:257,integrability,depend,depends,257,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:302,integrability,depend,dependency,302,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:474,integrability,depend,dependency,474,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:257,modifiability,depend,depends,257,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:302,modifiability,depend,dependency,302,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:474,modifiability,depend,dependency,474,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:469,performance,time,time,469,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:79,reliability,fail,fails,79,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:63,safety,test,test,63,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:257,safety,depend,depends,257,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:302,safety,depend,dependency,302,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:474,safety,depend,dependency,474,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:63,testability,test,test,63,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:257,testability,depend,depends,257,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:302,testability,depend,dependency,302,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:474,testability,depend,dependency,474,"Hi Omar, . Very nice contribution. Thank you ! I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? . This is done for example in MathMore for GSL. . This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3249:13,safety,permiss,permission,13,Closing with permission by @omazapa .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3249
https://github.com/root-project/root/pull/3250:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3250
https://github.com/root-project/root/pull/3250:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3250
https://github.com/root-project/root/pull/3250:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3250
https://github.com/root-project/root/pull/3250:139,deployability,build,build,139,"@dpiparo @Axel-Naumann this PR fixes the use after delete reported in [ROOT-9898](https://sft.its.cern.ch/jira/browse/ROOT-9898). The last build passed, I started another one _just to be sure_. I assigned the PR to you because I don't have permission to merge in v6.16 and I don't know if you want it in or not before the release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3250
https://github.com/root-project/root/pull/3250:322,deployability,releas,release,322,"@dpiparo @Axel-Naumann this PR fixes the use after delete reported in [ROOT-9898](https://sft.its.cern.ch/jira/browse/ROOT-9898). The last build passed, I started another one _just to be sure_. I assigned the PR to you because I don't have permission to merge in v6.16 and I don't know if you want it in or not before the release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3250
https://github.com/root-project/root/pull/3250:240,safety,permiss,permission,240,"@dpiparo @Axel-Naumann this PR fixes the use after delete reported in [ROOT-9898](https://sft.its.cern.ch/jira/browse/ROOT-9898). The last build passed, I started another one _just to be sure_. I assigned the PR to you because I don't have permission to merge in v6.16 and I don't know if you want it in or not before the release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3250
https://github.com/root-project/root/pull/3250:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3250
https://github.com/root-project/root/pull/3251:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3251
https://github.com/root-project/root/pull/3253:141,availability,failur,failures,141,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:12,deployability,build,build,12,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:87,deployability,build,build,87,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:113,deployability,build,build,113,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:141,deployability,fail,failures,141,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:42,performance,lock,lock-file,42,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:141,performance,failur,failures,141,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:141,reliability,fail,failures,141,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:42,security,lock,lock-file,42,The windows build crashed claiming that a lock-file was still existing from a previous build. Will retry the win build and any other similar failures later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:11,deployability,build,build,11,@phsft-bot build only on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:41,deployability,build,build,41,Rebased and rebuilding. Let's see if the build is green now :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:50,energy efficiency,green,green,50,Rebased and rebuilding. Let's see if the build is green now :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:14,safety,review,review,14,Merging after review with Lorenzo earlier this morning!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3253:14,testability,review,review,14,Merging after review with Lorenzo earlier this morning!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3253
https://github.com/root-project/root/pull/3254:60,safety,test,test,60,The PR looks good to me. It would be nice however to have a test that the code result is correct.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3254
https://github.com/root-project/root/pull/3254:60,testability,test,test,60,The PR looks good to me. It would be nice however to have a test that the code result is correct.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3254
https://github.com/root-project/root/pull/3254:15,safety,test,tests,15,"@lmoneta, what tests would be required before merging is ok?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3254
https://github.com/root-project/root/pull/3254:15,testability,test,tests,15,"@lmoneta, what tests would be required before merging is ok?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3254
https://github.com/root-project/root/pull/3254:69,usability,statu,status,69,closing all my cern related PRs as won't-pursue-anymore w/o checking status,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3254
https://github.com/root-project/root/pull/3256:51,availability,failur,failures,51,"This changes only the documentation, the dataframe failures are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3256
https://github.com/root-project/root/pull/3256:51,deployability,fail,failures,51,"This changes only the documentation, the dataframe failures are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3256
https://github.com/root-project/root/pull/3256:51,performance,failur,failures,51,"This changes only the documentation, the dataframe failures are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3256
https://github.com/root-project/root/pull/3256:51,reliability,fail,failures,51,"This changes only the documentation, the dataframe failures are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3256
https://github.com/root-project/root/pull/3256:22,usability,document,documentation,22,"This changes only the documentation, the dataframe failures are unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3256
https://github.com/root-project/root/pull/3259:17,safety,review,review,17,Done with fixing review comments. @Axel-Naumann Can you please take another look? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:17,testability,review,review,17,Done with fixing review comments. @Axel-Naumann Can you please take another look? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:45,deployability,version,version,45,"Well, some comments were collapsed, so a new version will be pushed soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:45,integrability,version,version,45,"Well, some comments were collapsed, so a new version will be pushed soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:45,modifiability,version,version,45,"Well, some comments were collapsed, so a new version will be pushed soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:28,performance,perform,performance-,28,I aborted the built on ROOT-performance-centos7-multicore/default since the node is offline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:28,usability,perform,performance-,28,I aborted the built on ROOT-performance-centos7-multicore/default since the node is offline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:28,deployability,build,build,28,"Node is back, launching the build there and will merge once it passes (already passed on other platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3259:95,interoperability,platform,platforms,95,"Node is back, launching the build there and will merge once it passes (already passed on other platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3259
https://github.com/root-project/root/pull/3261:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3261
https://github.com/root-project/root/pull/3266:0,availability,Failur,Failures,0,"Failures are due to a typo, but why are there builds using builtin_pcre? We should take it from the system, as it's such a basic package... @Axel-Naumann, any comment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3266
https://github.com/root-project/root/pull/3266:0,deployability,Fail,Failures,0,"Failures are due to a typo, but why are there builds using builtin_pcre? We should take it from the system, as it's such a basic package... @Axel-Naumann, any comment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3266
https://github.com/root-project/root/pull/3266:46,deployability,build,builds,46,"Failures are due to a typo, but why are there builds using builtin_pcre? We should take it from the system, as it's such a basic package... @Axel-Naumann, any comment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3266
https://github.com/root-project/root/pull/3266:129,modifiability,pac,package,129,"Failures are due to a typo, but why are there builds using builtin_pcre? We should take it from the system, as it's such a basic package... @Axel-Naumann, any comment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3266
https://github.com/root-project/root/pull/3266:0,performance,Failur,Failures,0,"Failures are due to a typo, but why are there builds using builtin_pcre? We should take it from the system, as it's such a basic package... @Axel-Naumann, any comment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3266
https://github.com/root-project/root/pull/3266:0,reliability,Fail,Failures,0,"Failures are due to a typo, but why are there builds using builtin_pcre? We should take it from the system, as it's such a basic package... @Axel-Naumann, any comment?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3266
https://github.com/root-project/root/pull/3267:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3267
https://github.com/root-project/root/pull/3267:11,deployability,build,build,11,How can it build to [6541/9472] in 4 minutes..?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3267
https://github.com/root-project/root/pull/3267:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3267
https://github.com/root-project/root/pull/3267:13,deployability,build,build,13,> How can it build to [6541/9472] in 4 minutes..? ccache,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3267
https://github.com/root-project/root/pull/3270:51,safety,test,test,51,Actually we need to do the reverse and insert this test in ctest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:51,testability,test,test,51,Actually we need to do the reverse and insert this test in ctest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:107,deployability,version,version,107,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:202,deployability,manag,manage,202,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:202,energy efficiency,manag,manage,202,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:107,integrability,version,version,107,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:107,modifiability,version,version,107,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:53,safety,test,test,53,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:118,safety,test,test,118,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:202,safety,manag,manage,202,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:53,testability,test,test,53,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:118,testability,test,test,118,"@pcanal I found similiar (it is possibly duplicated) test in roottest, it was for sure not running in Make version of test because actually after porting it to CMake and correcting wrong code, I didn't manage to have it working correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:13,energy efficiency,Draw,Draw,13,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:56,energy efficiency,Draw,Draw,56,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:49,integrability,event,event,49,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:142,integrability,coupl,couple,142,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:356,integrability,event,event,356,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:142,modifiability,coupl,couple,142,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:384,modifiability,exten,extent,384,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:458,modifiability,exten,extent,458,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:214,performance,content,content,214,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:7,safety,test,test,7,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:128,safety,test,test,128,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:193,safety,test,test,193,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:290,safety,test,test,290,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:449,safety,test,test,449,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:534,safety,test,testing,534,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:556,safety,test,test,556,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:92,security,ident,identical,92,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:7,testability,test,test,7,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:128,testability,test,test,128,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:142,testability,coupl,couple,142,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:193,testability,test,test,193,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:290,testability,test,test,290,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:449,testability,test,test,449,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:472,testability,understand,understand,472,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:534,testability,test,testing,534,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:556,testability,test,test,556,"Indeed test/*Draw* and roottest/root/treeformula/event/*Draw* are extremely similar but not identical. In particular the one in test run on a couple more file layout and add several additional test inside (See the content of dt_RunDrawTest.sh and dt_DrawTest.C). Before removing the one in test we should. a) make sure the one in roottest/root/treeformula/event/ is run and works. b) extent it to cover the additional feature that are in the one in test. c) extent it (or understand why we could not) to the additional files that are testing in the one in test. Thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:477,performance,time,time,477,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:280,reliability,doe,doesn,280,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:75,safety,test,test,75,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:75,testability,test,test,75,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:23,usability,feedback,feedback,23,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:602,deployability,depend,dependencies,602,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:136,energy efficiency,Draw,DrawTest,136,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:401,energy efficiency,adapt,adapted,401,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:401,integrability,adapt,adapted,401,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:602,integrability,depend,dependencies,602,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:401,interoperability,adapt,adapted,401,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:479,interoperability,specif,specific,479,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:401,modifiability,adapt,adapted,401,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:602,modifiability,depend,dependencies,602,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:531,performance,time,time,531,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:602,safety,depend,dependencies,602,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:513,testability,verif,verified,513,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:602,testability,depend,dependencies,602,"The goal of those scripts in fastcloning is to ensure that the merged files has the expected file and data (for all the use case in the DrawTest family, which includes many of the possible TTree structures). They have been unfortunately disabled since we moved from CINT to Cling as the scripts are relying on CINT's dynamic scope feature that did not fully make it into Cling. The script needs to be adapted accordingly, however it is likely they also do *not* have to be a set specific to this directory (to be verified), in the time of Makefiles it was easier to duplicate that try to deal with the dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:130,safety,test,tests,130,@pcanal thanks for sharing the history of this. What do we do now? Keep the old files as markers that we still need to port these tests to cling/CMake?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3270:130,testability,test,tests,130,@pcanal thanks for sharing the history of this. What do we do now? Keep the old files as markers that we still need to port these tests to cling/CMake?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3270
https://github.com/root-project/root/pull/3273:671,availability,Error,Error,671,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:353,deployability,resourc,resource-dir,353,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:467,deployability,resourc,resource,467,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:591,deployability,version,version,591,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:730,deployability,configurat,configuration,730,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:804,deployability,version,version,804,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:833,deployability,configurat,configuration,833,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:941,deployability,version,version,941,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1012,deployability,version,version,1012,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1083,deployability,version,version,1083,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1154,deployability,version,version,1154,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1225,deployability,version,version,1225,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1271,deployability,instal,installed,1271,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:353,energy efficiency,resourc,resource-dir,353,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:467,energy efficiency,resourc,resource,467,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:591,integrability,version,version,591,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:730,integrability,configur,configuration,730,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:804,integrability,version,version,804,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:833,integrability,configur,configuration,833,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:941,integrability,version,version,941,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1012,integrability,version,version,1012,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1083,integrability,version,version,1083,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1154,integrability,version,version,1154,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1225,integrability,version,version,1225,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:777,interoperability,compatib,compatible,777,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:591,modifiability,version,version,591,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:730,modifiability,configur,configuration,730,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:753,modifiability,pac,package,753,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:804,modifiability,version,version,804,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:833,modifiability,configur,configuration,833,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:941,modifiability,version,version,941,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1012,modifiability,version,version,1012,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1083,modifiability,version,version,1083,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1154,modifiability,version,version,1154,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:1225,modifiability,version,version,1225,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:353,performance,resourc,resource-dir,353,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:467,performance,resourc,resource,467,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:671,performance,Error,Error,671,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:353,safety,resourc,resource-dir,353,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:467,safety,resourc,resource,467,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:671,safety,Error,Error,671,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:730,security,configur,configuration,730,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:833,security,configur,configuration,833,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:353,testability,resourc,resource-dir,353,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:467,testability,resourc,resource,467,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:267,usability,HINT,HINTS,267,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:318,usability,COMMAND,COMMAND,318,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:671,usability,Error,Error,671,"This should be fine to go in as is. We can later use the method I suggested on mattermost, but it will require a major overhaul to how ROOT uses LLVM/Clang:. ```cmake. find_package(LLVM 5.0 REQUIRED). find_package(Clang REQUIRED). find_program(CLANG_EXECUTABLE clang HINTS ""${LLVM_TOOLS_BINARY_DIR}""). execute_process(COMMAND ${CLANG_EXECUTABLE} -print-resource-dir. OUTPUT_VARIABLE CLANG_RESOURCE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE). ```. This correctly finds the resource directory for me (i.e. finds the Clang matching LLVM 5.0.x). Clang alone is not smart enough to find itself with a version. When using only `find_package(Clang 5.0 REQUIRED)`, I get:. ```. CMake Error at CMakeLists.txt: (find_package):. Could not find a configuration file for package ""Clang"" that is compatible. with requested version ""5.0"". The following configuration files were considered but not accepted:. /usr/lib/llvm/8/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/7/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/6/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/5/lib64/cmake/clang/ClangConfig.cmake, version: unknown. /usr/lib/llvm/4/lib64/cmake/clang/ClangConfig.cmake, version: unknown. ```. (yes, I have all those installed...).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:23,energy efficiency,green,green,23,"Once Jenkins gives the green light, which it should, I will merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:75,deployability,patch,patch,75,"Since this is a small change, could it go into 6.16.00, so we can drop the patch? Assuming everything is okay, and no one objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:75,safety,patch,patch,75,"Since this is a small change, could it go into 6.16.00, so we can drop the patch? Assuming everything is okay, and no one objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:75,security,patch,patch,75,"Since this is a small change, could it go into 6.16.00, so we can drop the patch? Assuming everything is okay, and no one objects.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:185,availability,failur,failure,185,"@henryiii About 6.16, @Axel-Naumann can decide. I think the tag will come out tomorrow, so no new code is going in since a few days. However, for 6.16/02 it is probably ok. The Windows failure is unrelated (maybe @henryiii just needs to fork roottest as well as root), so I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:185,deployability,fail,failure,185,"@henryiii About 6.16, @Axel-Naumann can decide. I think the tag will come out tomorrow, so no new code is going in since a few days. However, for 6.16/02 it is probably ok. The Windows failure is unrelated (maybe @henryiii just needs to fork roottest as well as root), so I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:185,performance,failur,failure,185,"@henryiii About 6.16, @Axel-Naumann can decide. I think the tag will come out tomorrow, so no new code is going in since a few days. However, for 6.16/02 it is probably ok. The Windows failure is unrelated (maybe @henryiii just needs to fork roottest as well as root), so I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:185,reliability,fail,failure,185,"@henryiii About 6.16, @Axel-Naumann can decide. I think the tag will come out tomorrow, so no new code is going in since a few days. However, for 6.16/02 it is probably ok. The Windows failure is unrelated (maybe @henryiii just needs to fork roottest as well as root), so I'm merging this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:58,deployability,version,version,58,"6.16.02 would be fine, I'm not sure how quickly the macOS version will be up and running anyway. It would just be nice if this was no longer required as a patch in the near future. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:155,deployability,patch,patch,155,"6.16.02 would be fine, I'm not sure how quickly the macOS version will be up and running anyway. It would just be nice if this was no longer required as a patch in the near future. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:58,integrability,version,version,58,"6.16.02 would be fine, I'm not sure how quickly the macOS version will be up and running anyway. It would just be nice if this was no longer required as a patch in the near future. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:58,modifiability,version,version,58,"6.16.02 would be fine, I'm not sure how quickly the macOS version will be up and running anyway. It would just be nice if this was no longer required as a patch in the near future. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:155,safety,patch,patch,155,"6.16.02 would be fine, I'm not sure how quickly the macOS version will be up and running anyway. It would just be nice if this was no longer required as a patch in the near future. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3273:155,security,patch,patch,155,"6.16.02 would be fine, I'm not sure how quickly the macOS version will be up and running anyway. It would just be nice if this was no longer required as a patch in the near future. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3273
https://github.com/root-project/root/pull/3277:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3277
https://github.com/root-project/root/pull/3277:30,deployability,Infrastructur,Infrastructure,30,Not sure what is going wrong. Infrastructure woes?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3277
https://github.com/root-project/root/pull/3279:40,usability,tool,tools,40,"I expected `rootls` etc to be the ""ROOT tools"". These are ROOT binaries - should we call the target like that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:108,deployability,fail,fails,108,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:123,deployability,depend,dependency,123,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:156,deployability,build,build,156,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:123,integrability,depend,dependency,123,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:123,modifiability,depend,dependency,123,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:147,performance,parallel,parallel,147,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:108,reliability,fail,fails,108,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:123,safety,depend,dependency,123,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:123,testability,depend,dependency,123,Why is it not possible to just use the targets for each binary directly? Is there an example where roottest fails due to a dependency problem in a parallel build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:97,deployability,DEPEND,DEPENDS,97,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:148,deployability,build,build,148,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:97,integrability,DEPEND,DEPENDS,97,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:97,modifiability,DEPEND,DEPENDS,97,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:378,performance,time,time,378,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:116,reliability,doe,doesn,116,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:503,reliability,doe,doesn,503,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:97,safety,DEPEND,DEPENDS,97,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:195,safety,test,tests,195,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:297,safety,test,tests,297,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:335,safety,test,tests,335,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:425,safety,test,test,425,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:522,safety,test,test,522,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:97,testability,DEPEND,DEPENDS,97,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:195,testability,test,tests,195,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:297,testability,test,tests,297,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:335,testability,test,tests,335,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:425,testability,test,test,425,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:522,testability,test,test,522,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:527,testability,coverag,coverage,527,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:655,usability,help,help,655,"@amadio, I thought so at the beginning, but targets are not visible to roottest.git, so putting ""DEPENDS hadd root"" doesn't work. Example of broken build is here in PR #274. If to check the same tests with cherry-picked fix proposed here they work. The reason why I need this is that I moved some tests to CMake, so data generated for tests now needs to be generated on compile time of ROOT(other way around will be to add a test that will generate these data, but I believe it wrong way to go since it doesn't increase a test coverage). The problem here is more generic, that I hope could be solved with fixture option for ctests(https://cmake.org/cmake/help/v3.7/prop_test/FIXTURES_SETUP.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:93,safety,test,test,93,"After discussion with Axel, I am closing it in favour of changing #274 to generate data as a test (probably multiple tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:117,safety,test,tests,117,"After discussion with Axel, I am closing it in favour of changing #274 to generate data as a test (probably multiple tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:93,testability,test,test,93,"After discussion with Axel, I am closing it in favour of changing #274 to generate data as a test (probably multiple tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3279:117,testability,test,tests,117,"After discussion with Axel, I am closing it in favour of changing #274 to generate data as a test (probably multiple tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3279
https://github.com/root-project/root/pull/3280:16,deployability,updat,update,16,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:296,modifiability,extens,extensive,296,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:374,modifiability,extens,extensive,374,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:16,safety,updat,update,16,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:16,security,updat,update,16,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:205,security,authoriz,authorized,205,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:33,usability,help,help,33,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:73,usability,help,help,73,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:306,usability,help,help,306,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:384,usability,help,help,384,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3280:407,usability,help,help,407,"We need to also update the short help:. ```. epsft-53 root $ rootcling --help. Usage: rootcling [-v][-v0-4] [-f] [out.cxx] [opts] file1.h[+][-][!] file2.h[+][-][!] ...[LinkDef.h]. Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4). and must be before the -f flags. For more extensive help type: rootcling -h. ```. The last line should now be `For more extensive help type: rootcling --help`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3280
https://github.com/root-project/root/pull/3282:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3282
https://github.com/root-project/root/pull/3283:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:43,availability,error,errors,43,@bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. Can you see what went wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:93,deployability,build,buildid,93,@bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. Can you see what went wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:43,performance,error,errors,43,@bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. Can you see what went wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:43,safety,error,errors,43,@bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. Can you see what went wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:29,usability,help,help,29,@bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. Can you see what went wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:43,usability,error,errors,43,@bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. Can you see what went wrong?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:45,availability,error,errors,45,> @bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. > Can you see what went wrong? @dpiparo looking into it...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:95,deployability,build,buildid,95,> @bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. > Can you see what went wrong? @dpiparo looking into it...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:45,performance,error,errors,45,> @bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. > Can you see what went wrong? @dpiparo looking into it...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:45,safety,error,errors,45,> @bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. > Can you see what went wrong? @dpiparo looking into it...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:31,usability,help,help,31,> @bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. > Can you see what went wrong? @dpiparo looking into it...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:45,usability,error,errors,45,> @bellenot : I could use some help with the errors :) http://cdash.cern.ch/viewBuildError.php?buildid=616819. > Can you see what went wrong? @dpiparo looking into it...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:23,interoperability,standard,standard,23,"@dpiparo BTW, the [c++ standard](https://en.cppreference.com/w/c/string/byte/strtok) mention `strtok_s`, not `strtok_r`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3283:7,interoperability,standard,standard,7,It's C standard but *nice*.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3283
https://github.com/root-project/root/pull/3284:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3284
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ubuntu18/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18.04/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18.04/rtcxxmod with flags -Darrow=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18\.04/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18\.04/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:52,deployability,build,build,52,"I tried to escape the dot of 18.04, no success. The build which is triggered is a coverity build...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:91,deployability,build,build,91,"I tried to escape the dot of 18.04, no success. The build which is triggered is a coverity build...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu18\\.04/default with flags -Darrow=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:11,deployability,build,build,11,@phsft-bot build with flags -Darrow=ON -Dfail-on-missing=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:47,safety,prevent,preventing,47,"Great. Since all the checks seems ok, anything preventing this from being merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3286:47,security,preven,preventing,47,"Great. Since all the checks seems ok, anything preventing this from being merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3286
https://github.com/root-project/root/pull/3287:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3287
https://github.com/root-project/root/pull/3290:75,availability,failur,failure,75,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:101,availability,fault,fault,101,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:75,deployability,fail,failure,75,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:101,energy efficiency,fault,fault,101,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:75,performance,failur,failure,75,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:101,performance,fault,fault,101,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:75,reliability,fail,failure,75,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:101,reliability,fault,fault,101,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:101,safety,fault,fault,101,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:26,usability,help,help,26,@bellenot thank you for a help with .lib file! Now it works and looks like failure is not any more a fault of new LZMA builtins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:265,availability,state,state,265,"Hi @oshadura As it is, I think we should squash the PR. The first two commits should be just one, since one adds the files (which makes the hashes and filenames broken), then the other one fixes it. Please merge the commits so that there is not intermediate broken state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:265,integrability,state,state,265,"Hi @oshadura As it is, I think we should squash the PR. The first two commits should be just one, since one adds the files (which makes the hashes and filenames broken), then the other one fixes it. Please merge the commits so that there is not intermediate broken state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
https://github.com/root-project/root/pull/3290:245,modifiability,interm,intermediate,245,"Hi @oshadura As it is, I think we should squash the PR. The first two commits should be just one, since one adds the files (which makes the hashes and filenames broken), then the other one fixes it. Please merge the commits so that there is not intermediate broken state.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/3290
