id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/11086:508,availability,fault,fault,508,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:517,deployability,build,build,517,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:472,energy efficiency,current,currently,472,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:508,energy efficiency,fault,fault,508,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:373,integrability,complian,compliant,373,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:397,interoperability,standard,standard,397,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:508,performance,fault,fault,508,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:508,reliability,fault,fault,508,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:373,safety,compl,compliant,373,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:508,safety,fault,fault,508,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:373,security,compl,compliant,373,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:240,usability,document,documentation,240,> The PR looks good. There is only one thing missing. The Shape operator is not using the optional attributes `end` and `start` which define the ending and initial position of the tensor from which one wants to have the shape. See the ONNX documentation: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape. I think would be nice to add this functionality to be compliant with the ONNX standard. Sir i have implemented the Start and End Optional attributes but currently its giving a segmentation fault on build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:97,interoperability,conflict,conflicts,97,"> @Neel-Shah-29 , can you please fix the code as suggested in the comment above and fix also the conflicts so we can test in the CI Thank you ! Now the conflicts are fixed and comment is applied we can run the CI tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:152,interoperability,conflict,conflicts,152,"> @Neel-Shah-29 , can you please fix the code as suggested in the comment above and fix also the conflicts so we can test in the CI Thank you ! Now the conflicts are fixed and comment is applied we can run the CI tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:117,safety,test,test,117,"> @Neel-Shah-29 , can you please fix the code as suggested in the comment above and fix also the conflicts so we can test in the CI Thank you ! Now the conflicts are fixed and comment is applied we can run the CI tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:213,safety,test,tests,213,"> @Neel-Shah-29 , can you please fix the code as suggested in the comment above and fix also the conflicts so we can test in the CI Thank you ! Now the conflicts are fixed and comment is applied we can run the CI tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:117,testability,test,test,117,"> @Neel-Shah-29 , can you please fix the code as suggested in the comment above and fix also the conflicts so we can test in the CI Thank you ! Now the conflicts are fixed and comment is applied we can run the CI tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:213,testability,test,tests,213,"> @Neel-Shah-29 , can you please fix the code as suggested in the comment above and fix also the conflicts so we can test in the CI Thank you ! Now the conflicts are fixed and comment is applied we can run the CI tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11090:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:193,availability,redund,redundant,193,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:193,deployability,redundan,redundant,193,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:111,integrability,messag,message,111,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:396,integrability,messag,message,396,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:111,interoperability,messag,message,111,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:396,interoperability,messag,message,396,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:310,modifiability,variab,variable,310,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:193,reliability,redundan,redundant,193,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:193,safety,redund,redundant,193,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:407,usability,clear,clearer,407,"> Hi Hanna, thank you very much for the PR! > . > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11090:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11093:20,deployability,log,logging,20,"> Are we sure these logging data members are not used anymore ? They are protected, it is possible some user derived classes use them. You are right. Maybe it's better to not do this change at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:20,safety,log,logging,20,"> Are we sure these logging data members are not used anymore ? They are protected, it is possible some user derived classes use them. You are right. Maybe it's better to not do this change at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:20,security,log,logging,20,"> Are we sure these logging data members are not used anymore ? They are protected, it is possible some user derived classes use them. You are right. Maybe it's better to not do this change at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:20,testability,log,logging,20,"> Are we sure these logging data members are not used anymore ? They are protected, it is possible some user derived classes use them. You are right. Maybe it's better to not do this change at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:104,usability,user,user,104,"> Are we sure these logging data members are not used anymore ? They are protected, it is possible some user derived classes use them. You are right. Maybe it's better to not do this change at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11094:7,availability,failur,failure,7,The CI failure is unrelated to this commit. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:7,deployability,fail,failure,7,The CI failure is unrelated to this commit. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:7,performance,failur,failure,7,The CI failure is unrelated to this commit. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:7,reliability,fail,failure,7,The CI failure is unrelated to this commit. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,"@phsft-bot build! @Axel-Naumann, can we add Baidyanath to the team so that the bot triggers automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:92,deployability,automat,automatically,92,"@phsft-bot build! @Axel-Naumann, can we add Baidyanath to the team so that the bot triggers automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:62,security,team,team,62,"@phsft-bot build! @Axel-Naumann, can we add Baidyanath to the team so that the bot triggers automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:92,testability,automat,automatically,92,"@phsft-bot build! @Axel-Naumann, can we add Baidyanath to the team so that the bot triggers automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:61,deployability,automat,automatically,61,> can we add Baidyanath to the team so that the bot triggers automatically? Invitation sent!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:31,security,team,team,31,> can we add Baidyanath to the team so that the bot triggers automatically? Invitation sent!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:61,testability,automat,automatically,61,> can we add Baidyanath to the team so that the bot triggers automatically? Invitation sent!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:0,availability,Ping,Ping,0,Ping. What's the fate of this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2,availability,Ping,Ping,2,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:41,availability,ping,pinging,41,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:190,deployability,fail,failing,190,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:190,reliability,fail,failing,190,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:198,safety,test,test,198,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:237,safety,review,reviewed,237,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:198,testability,test,test,198,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:237,testability,review,reviewed,237,> Ping. What's the fate of this? Are you pinging @sudo-panda or whom? This is still WIP according to the title; let me switch this to draft mode to make this more visible. I'd hope that the failing test can be addressed before this gets reviewed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:201,interoperability,conflict,conflicts,201,"IIUC in this PR you are porting a major new feature of upstream cppyy into ROOT's cppyy. What is the strategy here? Are you also rebasing ROOT's cppyy on upstream, or are you cherry-picking and fixing conflicts by hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:61,usability,support,support,61,I have cherry-picked the commits that was required for numba support in PyROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:68,deployability,patch,patches,68,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:106,deployability,patch,patches,106,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:84,interoperability,bind,bindings,84,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:84,modifiability,bind,bindings,84,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:437,reliability,doe,does,437,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:68,safety,patch,patches,68,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:106,safety,patch,patches,106,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:68,security,patch,patches,68,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:106,security,patch,patches,106,"All changes that diverge from upstream should be stored as separate patches in the `bindings/pyroot/cppyy/patches`. The strategy should be to differentiate what we cherry-pick as-is, which I see you have reported in some commits, from the changes we have to make that are not in the commit history of cppyy and that we will need to take into account at some point. Also, check some of the links in the commits, the first one for example does not work https://github.com/wlav/cppyy-backend/commit/06e884db4b27Vx5eb66d1d29d3d9a9eaf5d7cdf89f .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:23,integrability,messag,message,23,I will fix that commit message. Thanks for finding that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:23,interoperability,messag,message,23,I will fix that commit message. Thanks for finding that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:4,availability,failur,failure,4,"The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:4,deployability,fail,failure,4,"The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:4,performance,failur,failure,4,"The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:4,reliability,fail,failure,4,"The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:74,safety,review,review,74,"The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:74,testability,review,review,74,"The failure seems unrelated, @sudo-panda can you mark this PR as ready to review?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:6,availability,failur,failure,6,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review? Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:6,deployability,fail,failure,6,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review? Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:148,deployability,releas,release,148,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review? Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:6,performance,failur,failure,6,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review? Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:6,reliability,fail,failure,6,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review? Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:76,safety,review,review,76,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review? Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:76,testability,review,review,76,"> The failure seems unrelated, @sudo-panda can you mark this PR as ready to review? Can you remove the '[WIP]' tag? And also include changes in the release notes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:24,performance,time,time,24,"Hi, I need to find some time to review the PR. Meanwhile, I see there are not tutorials yet and I think those would be necessary before merging. I will try now to write some pseudo-code that I *imagine* this PR would make possible to write. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct A{. int mA{};. float mB{};. }. void callfn(int a, float b). {. std::cout << a << "", "" << b << std::endl;. }. '''). @numba.njit. def myfn():. myobj = ROOT.A(1, 2.). return ROOT.callfn(myobj.mA, myobj.mB). @numba.njit. def myfn2():. h = ROOT.TH1F(). return h.GetMean(). ```. Let me know if this (kind-of)works, if not, so that I can better understand what is the level of support for numba-jitting ROOT classes brought by this PR. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:32,safety,review,review,32,"Hi, I need to find some time to review the PR. Meanwhile, I see there are not tutorials yet and I think those would be necessary before merging. I will try now to write some pseudo-code that I *imagine* this PR would make possible to write. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct A{. int mA{};. float mB{};. }. void callfn(int a, float b). {. std::cout << a << "", "" << b << std::endl;. }. '''). @numba.njit. def myfn():. myobj = ROOT.A(1, 2.). return ROOT.callfn(myobj.mA, myobj.mB). @numba.njit. def myfn2():. h = ROOT.TH1F(). return h.GetMean(). ```. Let me know if this (kind-of)works, if not, so that I can better understand what is the level of support for numba-jitting ROOT classes brought by this PR. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:32,testability,review,review,32,"Hi, I need to find some time to review the PR. Meanwhile, I see there are not tutorials yet and I think those would be necessary before merging. I will try now to write some pseudo-code that I *imagine* this PR would make possible to write. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct A{. int mA{};. float mB{};. }. void callfn(int a, float b). {. std::cout << a << "", "" << b << std::endl;. }. '''). @numba.njit. def myfn():. myobj = ROOT.A(1, 2.). return ROOT.callfn(myobj.mA, myobj.mB). @numba.njit. def myfn2():. h = ROOT.TH1F(). return h.GetMean(). ```. Let me know if this (kind-of)works, if not, so that I can better understand what is the level of support for numba-jitting ROOT classes brought by this PR. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:641,testability,understand,understand,641,"Hi, I need to find some time to review the PR. Meanwhile, I see there are not tutorials yet and I think those would be necessary before merging. I will try now to write some pseudo-code that I *imagine* this PR would make possible to write. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct A{. int mA{};. float mB{};. }. void callfn(int a, float b). {. std::cout << a << "", "" << b << std::endl;. }. '''). @numba.njit. def myfn():. myobj = ROOT.A(1, 2.). return ROOT.callfn(myobj.mA, myobj.mB). @numba.njit. def myfn2():. h = ROOT.TH1F(). return h.GetMean(). ```. Let me know if this (kind-of)works, if not, so that I can better understand what is the level of support for numba-jitting ROOT classes brought by this PR. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:673,usability,support,support,673,"Hi, I need to find some time to review the PR. Meanwhile, I see there are not tutorials yet and I think those would be necessary before merging. I will try now to write some pseudo-code that I *imagine* this PR would make possible to write. ```python. import ROOT. ROOT.gInterpreter.Declare('''. struct A{. int mA{};. float mB{};. }. void callfn(int a, float b). {. std::cout << a << "", "" << b << std::endl;. }. '''). @numba.njit. def myfn():. myobj = ROOT.A(1, 2.). return ROOT.callfn(myobj.mA, myobj.mB). @numba.njit. def myfn2():. h = ROOT.TH1F(). return h.GetMean(). ```. Let me know if this (kind-of)works, if not, so that I can better understand what is the level of support for numba-jitting ROOT classes brought by this PR. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:556,safety,test,tests,556,"Hi @vepadulano, sorry for the very late reply. This is the part that works:. ```python. import ROOT, ROOT.NumbaExt, numba. ROOT.gInterpreter.Declare('''. struct A{. A(int A, float B) : mA(A), mB(B) {}. int mA{};. float mB{};. };. void callfn(int a, float b). {. std::cout << a << "", "" << b << std::endl;. }. '''). @numba.njit. def myfn(myobj):. return ROOT.callfn(myobj.mA, myobj.mB). # @numba.njit. # def myfn2(h):. # return h.GetMean(). obj = ROOT.A(1, 2.0). myfn(obj). # myfn2(ROOT.TH1F()). ```. The commented-out lines do not work. Also, I think these tests that I have added can give a better view of what works:. https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:556,testability,test,tests,556,"Hi @vepadulano, sorry for the very late reply. This is the part that works:. ```python. import ROOT, ROOT.NumbaExt, numba. ROOT.gInterpreter.Declare('''. struct A{. A(int A, float B) : mA(A), mB(B) {}. int mA{};. float mB{};. };. void callfn(int a, float b). {. std::cout << a << "", "" << b << std::endl;. }. '''). @numba.njit. def myfn(myobj):. return ROOT.callfn(myobj.mA, myobj.mB). # @numba.njit. # def myfn2(h):. # return h.GetMean(). obj = ROOT.A(1, 2.0). myfn(obj). # myfn2(ROOT.TH1F()). ```. The commented-out lines do not work. Also, I think these tests that I have added can give a better view of what works:. https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:125,energy efficiency,power,power,125,"> I am almost certain that non-critical changes won’t make it back upstream. I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:110,performance,time,time,110,"> I am almost certain that non-critical changes won’t make it back upstream. I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:584,availability,state,statements,584,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:788,availability,state,statements,788,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1353,availability,state,statement,1353,"ime in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1455,availability,state,statement,1455,"amespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince yo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1643,availability,state,statement,1643,"upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I hav",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2093,availability,state,statement,2093," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2488,availability,state,statements,2488," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2010,deployability,stack,stackoverflow,2010," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2326,deployability,version,versions,2326," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:133,energy efficiency,power,power,133,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2615,energy efficiency,schedul,schedule,2615," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:584,integrability,state,statements,584,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:788,integrability,state,statements,788,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1353,integrability,state,statement,1353,"ime in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1455,integrability,state,statement,1455,"amespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince yo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1643,integrability,state,statement,1643,"upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I hav",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2093,integrability,state,statement,2093," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2326,integrability,version,versions,2326," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2488,integrability,state,statements,2488," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1791,interoperability,bind,bindings,1791," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2305,interoperability,bind,binding,2305," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:968,modifiability,variab,variable,968,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1497,modifiability,variab,variable,1497,"been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1791,modifiability,bind,bindings,1791," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2296,modifiability,variab,variable,2296," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2305,modifiability,bind,binding,2305," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2326,modifiability,version,versions,2326," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:118,performance,time,time,118,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:357,performance,time,time,357,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1058,performance,cach,cache,1058,"it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1122,performance,cach,cache,1122,"d brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even thoug",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1232,performance,cach,cache,1232,"upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1319,performance,cach,cache,1319,"adulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the ne",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1346,performance,cach,cache,1346,"recious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2594,performance,time,time,2594," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2615,performance,schedul,schedule,2615," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1465,reliability,doe,doesn,1465," NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I wil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1948,reliability,doe,doesn,1948," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2351,reliability,doe,doesn,2351," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2713,reliability,doe,doesn,2713," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:365,safety,review,reviewing,365,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2627,safety,review,review,2627," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1005,security,Modif,Modifying,1005,"lmost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:365,testability,review,reviewing,365,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:514,testability,simpl,simplify,514,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1298,testability,understand,understand,1298,"ly grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variabl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2627,testability,review,review,2627," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:514,usability,simpl,simplify,514,"> > I am almost certain that non-critical changes won’t make it back upstream. > . > I think all of us appreciate the time and brain power Vincenzo invests in improving the code. I bet it's useful to propose changes coming out of this upstream where relevant, @sudo-panda ? Hi @Axel-Naumann ,. I am really grateful to @vepadulano for investing his precious time in reviewing this PR and suggesting changes to improve it. If not for his suggestions about the `namespace NumbaExt` code, I wouldn't have been able to simplify it. On the other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1530,usability,guid,guide,1530," other hand, @vgvassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:1825,usability,help,helpers,1825," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:2168,usability,experien,experienced,2168," Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python. cache = {}. def foo():. ..... .... Many lines of code ... ..... cache[""foo""] = 1. ..... .... Many lines of code ... ..... def bar():. ..... .... Many lines of code ... ..... cache[""bar""] = 2. ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment. **TL;DR:** I am thankful to Vincenzo for taking the time out of his busy schedule to review this PR. I have some counterpoints to his arguments against `global` and if he doesn't agree to them I will remove them ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:136,reliability,pra,practices,136,"Dear all,. I approved this PR a few days ago now, the 2 remaining comments were one curiosity and one suggestion regarding general best practices in programming, not strictly related to this particular piece of code. Nothing prevents this PR from merging and I believe the discussion is going further than needed at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:225,safety,prevent,prevents,225,"Dear all,. I approved this PR a few days ago now, the 2 remaining comments were one curiosity and one suggestion regarding general best practices in programming, not strictly related to this particular piece of code. Nothing prevents this PR from merging and I believe the discussion is going further than needed at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:225,security,preven,prevents,225,"Dear all,. I approved this PR a few days ago now, the 2 remaining comments were one curiosity and one suggestion regarding general best practices in programming, not strictly related to this particular piece of code. Nothing prevents this PR from merging and I believe the discussion is going further than needed at this point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11097:46,integrability,topic,topic,46,"I'll just close this, for me it's clearly off-topic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/pull/11097:10,usability,close,close,10,"I'll just close this, for me it's clearly off-topic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/pull/11097:34,usability,clear,clearly,34,"I'll just close this, for me it's clearly off-topic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/issues/11099:11,availability,sla,slac,11,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:700,availability,sli,slightly,700,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1200,energy efficiency,current,current,1200,"f. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:98,performance,memor,memory,98,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:540,performance,content,content,540,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1184,performance,content,contents,1184,"ith `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1217,performance,memor,memory,1217,"[documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1954,performance,Memor,Memory,1954,"test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2192,performance,Memor,Memory,2192," the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2263,performance,Memor,Memory,2263," mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2332,performance,Memor,Memory,2332," ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2401,performance,Memor,Memory,2401,"range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2470,performance,Memor,Memory,2470,"tr(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2539,performance,Memor,Memory,2539,"on"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2608,performance,Memor,Memory,2608,"his makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you wer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2677,performance,Memor,Memory,2677,"`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2746,performance,Memor,Memory,2746,"otfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2815,performance,Memor,Memory,2815,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2884,performance,Memor,Memory,2884,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2953,performance,Memor,Memory,2953,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3022,performance,Memor,Memory,3022,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3091,performance,Memor,Memory,3091,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3160,performance,Memor,Memory,3160,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3229,performance,Memor,Memory,3229,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3298,performance,Memor,Memory,3298,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3367,performance,Memor,Memory,3367,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3436,performance,Memor,Memory,3436,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3685,performance,memor,memory,3685,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:11,reliability,sla,slac,11,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:382,reliability,doe,does,382,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:700,reliability,sli,slightly,700,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:924,safety,test,testfile,924,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:957,safety,test,test,957,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2145,safety,test,test,2145,"n_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2177,safety,test,testfile,2177,"he contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:693,security,modif,modify,693,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:924,testability,test,testfile,924,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:957,testability,test,test,957,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2145,testability,test,test,2145,"n_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2177,testability,test,testfile,2177,"he contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:98,usability,memor,memory,98,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:221,usability,document,documentation,221,"Dear @andy-slac ,. Thank you for reaching out and for the easy reproducer! Indeed, I also see the memory leak with the code you posted. The issue seems to be with `TObjArray` rather than with `TMap` itself. In fact, the [documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1217,usability,memor,memory,1217,"[documentation](https://root.cern.ch/doc/master/classTObjArray.html) says that. > By default the [TObjArray](https://root.cern.ch/doc/master/classTObjArray.html) does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call:. myarr->SetOwner([kTRUE](https://root.cern.ch/doc/master/RtypesCore_8h.html#af2f51d30ccd86e85be3e3e69793a86ef));. Thus, if I modify slightly your reproducer as follows:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1756,usability,Close,Close,1756," import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1954,usability,Memor,Memory,1954,"test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). ann_obj.DeleteAll() # This deletes the contents of the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2192,usability,Memor,Memory,2192," the current map from memory. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2263,usability,Memor,Memory,2263," mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2332,usability,Memor,Memory,2332," ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2401,usability,Memor,Memory,2401,"range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2470,usability,Memor,Memory,2470,"tr(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2539,usability,Memor,Memory,2539,"on"")). value.Add(ROOT.TObjString(f""10000"")). value.SetOwner(True) # This makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2608,usability,Memor,Memory,2608,"his makes sure that all the `TObjString`s are owned by the `TObjArray`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you wer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2677,usability,Memor,Memory,2677,"`. map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2746,usability,Memor,Memory,2746,"otfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2815,usability,Memor,Memory,2815,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2884,usability,Memor,Memory,2884,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2953,usability,Memor,Memory,2953,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3022,usability,Memor,Memory,3022,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3091,usability,Memor,Memory,3091,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3160,usability,Memor,Memory,3160,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3229,usability,Memor,Memory,3229,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3298,usability,Memor,Memory,3298,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3367,usability,Memor,Memory,3367,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3436,usability,Memor,Memory,3436,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3685,usability,memor,memory,3685,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:3740,usability,confirm,confirm,3740,"mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. I get the following output. ```. Creating test root file /tmp/tmp8vyocdk_/testfile.root. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=77.00 MB VMS=76.89 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. Memory stat: RSS=325 MB, VMS=1220 MB. Delta RSS=0.00 MB VMS=0.00 MB. [...]. ```. TLDR: The `TObjArray`s that you were writing to the file did not own the `TObjString`s you were giving them. When reading them back, the `TObjString`s were leaked into memory because they were not owned by anybody. Can you confirm that you see the same results as me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:310,deployability,manag,manage,310,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:317,deployability,resourc,resources,317,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:310,energy efficiency,manag,manage,310,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:317,energy efficiency,resourc,resources,317,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:317,performance,resourc,resources,317,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:36,reliability,Doe,Does,36,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:310,safety,manag,manage,310,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:317,safety,resourc,resources,317,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:317,testability,resourc,resources,317,"@vepadulano, thanks for suggestion. Does it mean that `SetOwner` have to be called _before_ writing object to a file? The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1100,availability,down,down,1100,"n produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it wou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:554,deployability,depend,depends,554,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:951,deployability,manag,manage,951,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:958,deployability,resourc,resources,958,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1462,deployability,manag,management,1462," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1611,deployability,manag,manage,1611," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1618,deployability,resourc,resources,1618," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1714,deployability,manag,manage,1714," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1752,deployability,manag,manage,1752," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1894,deployability,manag,managing,1894," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:951,energy efficiency,manag,manage,951,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:958,energy efficiency,resourc,resources,958,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1462,energy efficiency,manag,management,1462," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1611,energy efficiency,manag,manage,1611," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1618,energy efficiency,resourc,resources,1618," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1714,energy efficiency,manag,manage,1714," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1752,energy efficiency,manag,manage,1752," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1894,energy efficiency,manag,managing,1894," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:554,integrability,depend,depends,554,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1774,interoperability,standard,standard,1774," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1852,interoperability,semant,semantics,1852," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:554,modifiability,depend,depends,554,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:466,performance,disk,disk,466,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:958,performance,resourc,resources,958,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1338,performance,time,time,1338," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1618,performance,resourc,resources,1618," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1726,performance,I/O,I/O,1726," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:77,reliability,doe,does,77,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:194,reliability,doe,doesn,194,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:554,safety,depend,depends,554,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:951,safety,manag,manage,951,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:958,safety,resourc,resources,958,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1047,safety,compl,completely,1047,"ther application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1462,safety,manag,management,1462," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1611,safety,manag,manage,1611," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1618,safety,resourc,resources,1618," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1681,safety,except,exceptions,1681," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1714,safety,manag,manage,1714," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1752,safety,manag,manage,1752," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1894,safety,manag,managing,1894," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1047,security,compl,completely,1047,"ther application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1903,security,access,access,1903," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:396,testability,understand,understand,396,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:554,testability,depend,depends,554,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:958,testability,resourc,resources,958,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1618,testability,resourc,resources,1618," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:213,usability,document,documentation,213,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:621,usability,user,user,621,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:643,usability,behavi,behaviour,643,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:721,usability,document,documented,721,"> The problem appears when I read data produced by other application. I see, does the other application produce data like in your reproducer above? If so, there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1870,usability,behavi,behaviour,1870," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1884,usability,close,closer,1884," there is a bug in that application, it doesn't follow the documentation that I linked above. I would suggest to open an issue with the developers in that case. > should not ROOT always set ownership for the data which is read from a file? I understand the confusion, for the case of objects that were stored on disk it might be better to already have ownership of everything inside of them. But, it depends on the type of data and most importantly on the particular user application. The behaviour of ROOT object ownership may not always be the expected one, but is documented in [the manual](https://root.cern/manual/object_ownership/) and in the relevant class references. There are applications that rely on that so it can't always be changed. > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. I can't say I completely agree with this sentence. Let me break it down:. * everything should be deallocated when Python object is deleted: do you mean when you call `del obj` ? Because in general that is not true, a Python object is deleted/deallocated when the garbage collector decides it is the right time. Then, here you don't have pure Python objects, but there are also C++ objects underneath. ROOT takes care of lifetime management of the object it knows about. In the code above the objects are not properly registered. * For Python it is quite unnatural to explicitly manage resources: in most cases I would agree. There are some notable exceptions, for example when you manage file I/O or even more when you manage databases (the standard Python `sqlite3` library comes to mind). In the case of `TFile`, the semantics and the behaviour are closer to managing access to a database than reading a text file. Finally, let me highlight that usage of `TObjArray` and such is [discouraged](https://root.cern/manual/root_collections/) nowadays, when possible it would be better to migrate to `std::vector` or similar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:131,deployability,manag,management,131,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:231,deployability,manag,management,231,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:856,deployability,updat,update,856,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:131,energy efficiency,manag,management,131,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:231,energy efficiency,manag,management,231,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:279,modifiability,responsibil,responsibility,279,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:482,modifiability,extens,extension,482,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:124,performance,memor,memory,124,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:224,performance,Memor,Memory,224,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:424,performance,memor,memory,424,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:525,performance,memor,memory,525,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:570,performance,memor,memory,570,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:671,performance,memor,memory,671,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:492,reliability,doe,does,492,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:131,safety,manag,management,131,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:231,safety,manag,management,231,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:564,safety,avoid,avoid,564,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:856,safety,updat,update,856,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:142,security,polic,policy,142,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:856,security,updat,update,856,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:588,testability,understand,understand,588,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:124,usability,memor,memory,124,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:224,usability,Memor,Memory,224,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:424,usability,memor,memory,424,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:525,usability,memor,memory,525,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:570,usability,memor,memory,570,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:671,usability,memor,memory,671,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:9,availability,sla,slac,9,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1388,availability,error,error,1388,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:828,deployability,manag,management,828,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1040,deployability,manag,manage,1040,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1047,deployability,resourc,resources,1047,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1243,deployability,manag,management,1243,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1489,deployability,manag,management,1489,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:828,energy efficiency,manag,management,828,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1040,energy efficiency,manag,manage,1040,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1047,energy efficiency,resourc,resources,1047,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1243,energy efficiency,manag,management,1243,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1489,energy efficiency,manag,management,1489,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:131,performance,time,time,131,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:821,performance,memor,memory,821,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1047,performance,resourc,resources,1047,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1217,performance,time,time,1217,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1236,performance,memor,memory,1236,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1388,performance,error,error,1388,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1482,performance,memor,memory,1482,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:9,reliability,sla,slac,9,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:17,reliability,Doe,Does,17,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:431,reliability,doe,does,431,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:828,safety,manag,management,828,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1040,safety,manag,manage,1040,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1047,safety,resourc,resources,1047,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1243,safety,manag,management,1243,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1388,safety,error,error,1388,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1489,safety,manag,management,1489,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1047,testability,resourc,resources,1047,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1402,testability,understand,understandable,1402,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:821,usability,memor,memory,821,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1236,usability,memor,memory,1236,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1383,usability,user,user,1383,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1388,usability,error,error,1388,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1482,usability,memor,memory,1482,"Hi @andy-slac! > Does it mean that `SetOwner` have to be called _before_ writing object to a file? No, you can also do that at any time, also after opening:. ```python. ann_obj = rootfile.Get(""annotations""). for key in ann_obj:. ann_obj.GetValue(key).SetOwner(True). ```. > The problem appears when I read data produced by other application, should not ROOT always set ownership for the data which is read from a file? Yes, and it does that indeed! The problem is that there is nested data inside the `TMap` that is read from the file: the `TObjArray` that points to some elements. PyROOT takes care of cleaning the `TMaps` for you. But the actual leak happens because the `TObjArray` on the C++ side, which has no idea that it should delete the elements it points to unless you tell it to with `SetOwner()` (yeah manual memory management in C++ is also not good, but these are old classes that can't be changed anymore because they are written to many existing files, as you say yourself). > For Python it is quite unnatural to explicitly manage resources, everything should be deallocated when Python object is deleted. That's right, but when the underlying C++ objects have no clue what they should do at deletion time because ROOTs memory management is easy to get wrong, PyROOT has not a remote chance to do the right thing. Closing this because it's not a PyROOT issue, just a user error (a very understandable one, nobody should expect to read the class docs just to get the memory management right :slightly_smiling_face: but hey, that's C++ from the 90s).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/pull/11100:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11100
https://github.com/root-project/root/pull/11102:55,interoperability,conflict,conflicts,55,Hey @dkpoult can you please rebase this branch and fix conflicts? :grimacing:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:89,deployability,Releas,ReleaseNotes,89,@dkpoult can you please add a note about the introduction of `root-readspeed` in `README/ReleaseNotes/v628/index.md`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11104:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:30,availability,error,errors,30,The CI fails due to unrelated errors.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:7,deployability,fail,fails,7,The CI fails due to unrelated errors.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:30,performance,error,errors,30,The CI fails due to unrelated errors.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:7,reliability,fail,fails,7,The CI fails due to unrelated errors.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:30,safety,error,errors,30,The CI fails due to unrelated errors.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:30,usability,error,errors,30,The CI fails due to unrelated errors.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11105:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11105
https://github.com/root-project/root/pull/11105:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/default, ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11105
https://github.com/root-project/root/pull/11105:11,deployability,build,build,11,"@phsft-bot build just on ROOT-ubuntu2204/default, ROOT-ubuntu2004/default, ROOT-ubuntu18.04/default with flags -Dtmva-sofie=On -Dxrootd=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11105
https://github.com/root-project/root/pull/11105:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11105
https://github.com/root-project/root/pull/11106:131,availability,down,downloading,131,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:73,deployability,version,version,73,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:73,integrability,version,version,73,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:73,modifiability,version,version,73,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:158,safety,avoid,avoid,158,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:12,security,hash,hash,12,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:133,availability,down,downloading,133,"> Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?). That's a good question! I asked some people here, we'll see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:75,deployability,version,version,75,"> Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?). That's a good question! I asked some people here, we'll see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:75,integrability,version,version,75,"> Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?). That's a good question! I asked some people here, we'll see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:75,modifiability,version,version,75,"> Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?). That's a good question! I asked some people here, we'll see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:160,safety,avoid,avoid,160,"> Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?). That's a good question! I asked some people here, we'll see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:14,security,hash,hash,14,"> Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?). That's a good question! I asked some people here, we'll see...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11106:28,usability,person,person,28,"OK, problem understood. The person who did the change came to my office, that should never happen again (hopefully).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11106
https://github.com/root-project/root/pull/11108:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11108
https://github.com/root-project/root/pull/11110:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/pull/11110:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/pull/11110:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/pull/11110:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/issues/11112:146,deployability,fail,failing,146,"As explained in https://github.com/root-project/root/pull/14751#issue-2138683572, the reason for this inconsistency was that the fit was actually failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:146,reliability,fail,failing,146,"As explained in https://github.com/root-project/root/pull/14751#issue-2138683572, the reason for this inconsistency was that the fit was actually failing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/pull/11113:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:68,availability,failur,failure,68,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:15,deployability,fail,failing,15,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:68,deployability,fail,failure,68,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:68,performance,failur,failure,68,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:15,reliability,fail,failing,15,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:68,reliability,fail,failure,68,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:23,safety,test,test,23,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:23,testability,test,test,23,Seems like the failing test was just a fluke. I also don't see that failure on my machine and I don't think it's related at all anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11115:28,deployability,updat,update,28,@MarkusFrankATcernch please update also `/geom/test/test_material_units.cxx` to catch this problem if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:28,safety,updat,update,28,@MarkusFrankATcernch please update also `/geom/test/test_material_units.cxx` to catch this problem if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:47,safety,test,test,47,@MarkusFrankATcernch please update also `/geom/test/test_material_units.cxx` to catch this problem if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:28,security,updat,update,28,@MarkusFrankATcernch please update also `/geom/test/test_material_units.cxx` to catch this problem if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:47,testability,test,test,47,@MarkusFrankATcernch please update also `/geom/test/test_material_units.cxx` to catch this problem if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:15,availability,failur,failures,15,Unrelated test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:15,deployability,fail,failures,15,Unrelated test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:15,performance,failur,failures,15,Unrelated test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:15,reliability,fail,failures,15,Unrelated test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:10,safety,test,test,10,Unrelated test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:10,testability,test,test,10,Unrelated test failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11116:21,deployability,updat,updated,21,(pending the related updated to roottest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:21,safety,updat,updated,21,(pending the related updated to roottest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:21,security,updat,updated,21,(pending the related updated to roottest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:12,testability,understand,understanding,12,"Just for my understanding, is the alphabetical ordering of snapshotted columns also present in 6.26 or was it only changed afterwards?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11118:80,security,sign,signature,80,"Merging as everyone marked as approved, Philippe if you feel strongly about the signature we can discuss further.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11118
https://github.com/root-project/root/pull/11120:61,reliability,doe,does,61,> we need to get rid of MakeDataFrameFromSpec in v6.28. that does not exist? ```. ~/R/master (df-rename-factories) rg -il fromspec. interpreter/llvm/src/tools/clang/include/clang/AST/ASTImporter.h. interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp. interpreter/llvm/src/tools/clang/lib/Sema/SemaInit.cpp. interpreter/llvm/src/tools/clang/lib/AST/ASTImporter.cpp. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11120
https://github.com/root-project/root/pull/11120:153,usability,tool,tools,153,> we need to get rid of MakeDataFrameFromSpec in v6.28. that does not exist? ```. ~/R/master (df-rename-factories) rg -il fromspec. interpreter/llvm/src/tools/clang/include/clang/AST/ASTImporter.h. interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp. interpreter/llvm/src/tools/clang/lib/Sema/SemaInit.cpp. interpreter/llvm/src/tools/clang/lib/AST/ASTImporter.cpp. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11120
https://github.com/root-project/root/pull/11120:219,usability,tool,tools,219,> we need to get rid of MakeDataFrameFromSpec in v6.28. that does not exist? ```. ~/R/master (df-rename-factories) rg -il fromspec. interpreter/llvm/src/tools/clang/include/clang/AST/ASTImporter.h. interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp. interpreter/llvm/src/tools/clang/lib/Sema/SemaInit.cpp. interpreter/llvm/src/tools/clang/lib/AST/ASTImporter.cpp. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11120
https://github.com/root-project/root/pull/11120:278,usability,tool,tools,278,> we need to get rid of MakeDataFrameFromSpec in v6.28. that does not exist? ```. ~/R/master (df-rename-factories) rg -il fromspec. interpreter/llvm/src/tools/clang/include/clang/AST/ASTImporter.h. interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp. interpreter/llvm/src/tools/clang/lib/Sema/SemaInit.cpp. interpreter/llvm/src/tools/clang/lib/AST/ASTImporter.cpp. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11120
https://github.com/root-project/root/pull/11120:334,usability,tool,tools,334,> we need to get rid of MakeDataFrameFromSpec in v6.28. that does not exist? ```. ~/R/master (df-rename-factories) rg -il fromspec. interpreter/llvm/src/tools/clang/include/clang/AST/ASTImporter.h. interpreter/llvm/src/tools/clang/lib/Sema/SemaDeclCXX.cpp. interpreter/llvm/src/tools/clang/lib/Sema/SemaInit.cpp. interpreter/llvm/src/tools/clang/lib/AST/ASTImporter.cpp. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11120
https://github.com/root-project/root/pull/11121:32,interoperability,conflict,conflicts,32,Rebased on top of #11314 to fix conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/issues/11124:117,deployability,version,version,117,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:182,deployability,version,version,182,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:229,deployability,version,version,229,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:52,integrability,Filter,Filters,52,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:117,integrability,version,version,117,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:182,integrability,version,version,182,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:229,integrability,version,version,229,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:117,modifiability,version,version,117,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:182,modifiability,version,version,182,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:229,modifiability,version,version,229,"Also, I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:54,integrability,Filter,Filters,54,"> Also, I am not sure if this is intentional, but all Filters and Histos are jitted. The tutorials are interpreted anyway right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:232,deployability,version,version,232,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:297,deployability,version,version,297,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:344,deployability,version,version,344,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:484,deployability,version,version,484,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:398,energy efficiency,optim,optimized,398,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:167,integrability,Filter,Filters,167,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:232,integrability,version,version,232,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:297,integrability,version,version,297,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:344,integrability,version,version,344,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:484,integrability,version,version,484,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:232,modifiability,version,version,232,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:297,modifiability,version,version,297,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:344,modifiability,version,version,344,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:484,modifiability,version,version,484,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:398,performance,optimiz,optimized,398,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:451,performance,perform,performance,451,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:848,safety,compl,complex,848,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:848,security,compl,complex,848,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:542,testability,understand,understand,542,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:424,usability,user,user-friendliness,424,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:451,usability,perform,performance,451,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:569,usability,user,user,569,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:624,usability,help,helper,624,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:675,usability,close,closer,675,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:827,usability,user,users,827,"> Quickfix: #include <ROOT/RDFHelpers.hxx>. Thank you @ikabadzhov , can you open a PR with the missing include please? > I am not sure if this is intentional, but all Filters and Histos are jitted. I am now writing a fully compiled version. I would suggest either having a separate fully compiled version, or directly migrate to fully compiled version. One consideration here is that tutorials are optimized for readability/user-friendliness, not for performance, so a fully compiled version is only interesting if it's more readable/easy to understand for the average user (could be, I don't know -- but typically a mix of helper C++ functions and expressions in strings is closer to the sweet spot). > The tutorials are interpreted anyway right? 2 of the RDF tutorials have includes and a `main` function in order to show to users how to compile complex RDF code. ```. $ ls *.C | wc -l. 34. $ rg -l 'int main' *.C | wc -l. 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/pull/11125:288,availability,consist,consists,288,"> rename ROOT.RDF.MakeNumpyDataFrame to ROOT.RDF.FromNumpy: @etejedor how do I deprecate a Python-only method? We can do the same as for the deprecation of `TTree.AsMatrix`, see [commit](https://github.com/root-project/root/commit/8b7ba03bf8fb843b018ea38b7c7cd163480e7a51#), which mainly consists in issuing a Python [FutureWarning](https://docs.python.org/3/library/exceptions.html#FutureWarning) for the old API during one release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:410,deployability,API,API,410,"> rename ROOT.RDF.MakeNumpyDataFrame to ROOT.RDF.FromNumpy: @etejedor how do I deprecate a Python-only method? We can do the same as for the deprecation of `TTree.AsMatrix`, see [commit](https://github.com/root-project/root/commit/8b7ba03bf8fb843b018ea38b7c7cd163480e7a51#), which mainly consists in issuing a Python [FutureWarning](https://docs.python.org/3/library/exceptions.html#FutureWarning) for the old API during one release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:425,deployability,releas,release,425,"> rename ROOT.RDF.MakeNumpyDataFrame to ROOT.RDF.FromNumpy: @etejedor how do I deprecate a Python-only method? We can do the same as for the deprecation of `TTree.AsMatrix`, see [commit](https://github.com/root-project/root/commit/8b7ba03bf8fb843b018ea38b7c7cd163480e7a51#), which mainly consists in issuing a Python [FutureWarning](https://docs.python.org/3/library/exceptions.html#FutureWarning) for the old API during one release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:410,integrability,API,API,410,"> rename ROOT.RDF.MakeNumpyDataFrame to ROOT.RDF.FromNumpy: @etejedor how do I deprecate a Python-only method? We can do the same as for the deprecation of `TTree.AsMatrix`, see [commit](https://github.com/root-project/root/commit/8b7ba03bf8fb843b018ea38b7c7cd163480e7a51#), which mainly consists in issuing a Python [FutureWarning](https://docs.python.org/3/library/exceptions.html#FutureWarning) for the old API during one release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:410,interoperability,API,API,410,"> rename ROOT.RDF.MakeNumpyDataFrame to ROOT.RDF.FromNumpy: @etejedor how do I deprecate a Python-only method? We can do the same as for the deprecation of `TTree.AsMatrix`, see [commit](https://github.com/root-project/root/commit/8b7ba03bf8fb843b018ea38b7c7cd163480e7a51#), which mainly consists in issuing a Python [FutureWarning](https://docs.python.org/3/library/exceptions.html#FutureWarning) for the old API during one release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:367,safety,except,exceptions,367,"> rename ROOT.RDF.MakeNumpyDataFrame to ROOT.RDF.FromNumpy: @etejedor how do I deprecate a Python-only method? We can do the same as for the deprecation of `TTree.AsMatrix`, see [commit](https://github.com/root-project/root/commit/8b7ba03bf8fb843b018ea38b7c7cd163480e7a51#), which mainly consists in issuing a Python [FutureWarning](https://docs.python.org/3/library/exceptions.html#FutureWarning) for the old API during one release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:288,usability,consist,consists,288,"> rename ROOT.RDF.MakeNumpyDataFrame to ROOT.RDF.FromNumpy: @etejedor how do I deprecate a Python-only method? We can do the same as for the deprecation of `TTree.AsMatrix`, see [commit](https://github.com/root-project/root/commit/8b7ba03bf8fb843b018ea38b7c7cd163480e7a51#), which mainly consists in issuing a Python [FutureWarning](https://docs.python.org/3/library/exceptions.html#FutureWarning) for the old API during one release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:38,availability,consist,consistent,38,I agree that `FromCSV` should be more consistent with our current api.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:66,deployability,api,api,66,I agree that `FromCSV` should be more consistent with our current api.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:58,energy efficiency,current,current,58,I agree that `FromCSV` should be more consistent with our current api.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:66,integrability,api,api,66,I agree that `FromCSV` should be more consistent with our current api.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:66,interoperability,api,api,66,I agree that `FromCSV` should be more consistent with our current api.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:38,usability,consist,consistent,38,I agree that `FromCSV` should be more consistent with our current api.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:76,deployability,updat,updating,76,"Thanks Enric, I took a quick look and there is a number of places that need updating in the bindings, let's take a look together when you are back :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:92,interoperability,bind,bindings,92,"Thanks Enric, I took a quick look and there is a number of places that need updating in the bindings, let's take a look together when you are back :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:92,modifiability,bind,bindings,92,"Thanks Enric, I took a quick look and there is a number of places that need updating in the bindings, let's take a look together when you are back :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:76,safety,updat,updating,76,"Thanks Enric, I took a quick look and there is a number of places that need updating in the bindings, let's take a look together when you are back :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:76,security,updat,updating,76,"Thanks Enric, I took a quick look and there is a number of places that need updating in the bindings, let's take a look together when you are back :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:80,safety,avoid,avoid,80,"While we are at it, should we call it `ROOT::RDF::Experimental::FromRNTuple` to avoid confusion with `TNtuple`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:306,reliability,doe,doesn,306,"@vepadulano I tried to get `FromSQLite` instead of `FromSqlite` but that would kind of require that we also rename `RSqliteDS.hxx` to `RSQLiteDS.hxx` and MacOS has a case-insensitive file-system which makes that really hard (because I'd like to have _both_ spellings in, deprecating the old one, but MacOS doesn't like that at all). I'd propose to address FromSqlite/FromSQLite in a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:8,availability,failur,failures,8,Windows failures are unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:8,deployability,fail,failures,8,Windows failures are unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:8,performance,failur,failures,8,Windows failures are unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:8,reliability,fail,failures,8,Windows failures are unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11127:82,interoperability,standard,standard,82,Closing since several compilers don't seem to agree with my interpretation of the standard.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11127
https://github.com/root-project/root/issues/11128:14,deployability,build,build,14,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:34,deployability,version,version,34,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:88,deployability,version,version,88,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:34,integrability,version,version,34,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:88,integrability,version,version,88,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:68,interoperability,share,share,68,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:34,modifiability,version,version,34,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:88,modifiability,version,version,88,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:0,reliability,Doe,Does,0,"Does it still build with an older version of Clang? Also, could you share your system's version of `libc`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:16,deployability,build,build,16,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:36,deployability,version,version,36,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:90,deployability,version,version,90,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:117,deployability,build,builds,117,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:36,integrability,version,version,36,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:90,integrability,version,version,90,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:70,interoperability,share,share,70,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:36,modifiability,version,version,36,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:90,modifiability,version,version,90,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:263,performance,time,time,263,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2,reliability,Doe,Does,2,"> Does it still build with an older version of Clang? Also, could you share your system's version of `libc`? Yes, it builds at least in Clang 15. I've talked about this with @vgvassilev , and we believe it is possibly a clang bug. I'm bisecting it, need a little time ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:541,availability,down,downgrades,541,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:557,availability,error,error,557,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:530,deployability,patch,patch,530,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:557,performance,error,error,557,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:140,reliability,diagno,diagnostic,140,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:65,safety,review,reviews,65,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:530,safety,patch,patch,530,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:557,safety,error,error,557,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:585,safety,review,reviews,585,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:530,security,patch,patch,530,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:65,testability,review,reviews,65,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:140,testability,diagno,diagnostic,140,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:585,testability,review,reviews,585,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:13,usability,confirm,confirm,13,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:315,usability,behavi,behavior,315,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:485,usability,behavi,behavior,485,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:557,usability,error,error,557,"So now I can confirm that this breakage is introduced in https://reviews.llvm.org/D130058 . However, it seems that it's not a bug but a new diagnostic clang recently added. According to the description:. > [DR2338](https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2338) clarified that it was undefined behavior to set the value outside the range of the enumerations values for an enum without a fixed underlying type. We may want to fix this in our code as it's undefined behavior, but if not there's also an ongoing patch that downgrades this error to a warning: https://reviews.llvm.org/D131307",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:74,testability,simpl,simple,74,"Wow, you were fast in spotting this :smiley: I think there's a relatively simple fix, see https://github.com/root-project/root/pull/11148",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:74,usability,simpl,simple,74,"Wow, you were fast in spotting this :smiley: I think there's a relatively simple fix, see https://github.com/root-project/root/pull/11148",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11130:49,deployability,upgrad,upgrading,49,"Hi @kgizdov! I had the same problem as you after upgrading Arch Linux last week. This PR fixed the problem for me:. https://github.com/root-project/root/pull/11111. I also backported it to the 6.26 branch, such that the next ROOT 6.26 patch release won't have the problem. Can you check if after this fix things work again for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:235,deployability,patch,patch,235,"Hi @kgizdov! I had the same problem as you after upgrading Arch Linux last week. This PR fixed the problem for me:. https://github.com/root-project/root/pull/11111. I also backported it to the 6.26 branch, such that the next ROOT 6.26 patch release won't have the problem. Can you check if after this fix things work again for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:241,deployability,releas,release,241,"Hi @kgizdov! I had the same problem as you after upgrading Arch Linux last week. This PR fixed the problem for me:. https://github.com/root-project/root/pull/11111. I also backported it to the 6.26 branch, such that the next ROOT 6.26 patch release won't have the problem. Can you check if after this fix things work again for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:49,modifiability,upgrad,upgrading,49,"Hi @kgizdov! I had the same problem as you after upgrading Arch Linux last week. This PR fixed the problem for me:. https://github.com/root-project/root/pull/11111. I also backported it to the 6.26 branch, such that the next ROOT 6.26 patch release won't have the problem. Can you check if after this fix things work again for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:235,safety,patch,patch,235,"Hi @kgizdov! I had the same problem as you after upgrading Arch Linux last week. This PR fixed the problem for me:. https://github.com/root-project/root/pull/11111. I also backported it to the 6.26 branch, such that the next ROOT 6.26 patch release won't have the problem. Can you check if after this fix things work again for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:235,security,patch,patch,235,"Hi @kgizdov! I had the same problem as you after upgrading Arch Linux last week. This PR fixed the problem for me:. https://github.com/root-project/root/pull/11111. I also backported it to the 6.26 branch, such that the next ROOT 6.26 patch release won't have the problem. Can you check if after this fix things work again for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:300,availability,error,error,300,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:370,availability,operat,operator,370,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:76,deployability,Build,Building,76,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:197,deployability,build,build,197,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:596,interoperability,convers,conversions,596,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:300,performance,error,error,300,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:144,safety,Test,TestStatistics,144,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:300,safety,error,error,300,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:542,safety,except,exceptions,542,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:897,safety,reme,remedy,897,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:144,testability,Test,TestStatistics,144,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:300,usability,error,error,300,"Almost, now I have a different problem having to do with json:. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. Any remedy for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:15,availability,error,error,15,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:132,deployability,releas,release,132,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:438,deployability,updat,update,438,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:519,deployability,version,version,519,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:658,energy efficiency,Optim,Optimally,658,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:519,integrability,version,version,519,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:519,modifiability,version,version,519,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:15,performance,error,error,15,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:15,safety,error,error,15,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:438,safety,updat,update,438,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:592,safety,reme,remembers,592,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:438,security,updat,update,438,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:15,usability,error,error,15,"Ah, I see that error too now, just needed to enable ROOT 7 in the cmake config. So the issue is related to the latest nlohmann json release, and comes from these two PRs:. * https://github.com/root-project/root/pull/9278 ROOT forward declares nlohmann json manually. * https://github.com/nlohmann/json/pull/3590 nlohmann json added an ABI-tagged inline namespace, breaking out forward declarations. This is unfortunate, and we can't just update the forward declarations because they will change with each nlohmann json version now. I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official `json_fwd` header can be used again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:69,deployability,releas,release,69,"Also marking this as critical, because we don't want to make any new release with broken compilation I guess",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:92,deployability,version,versions,92,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:161,deployability,version,versions,161,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:92,integrability,version,versions,92,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:161,integrability,version,versions,161,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:65,interoperability,incompatib,incompatible,65,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:148,interoperability,incompatib,incompatible,148,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:92,modifiability,version,versions,92,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:161,modifiability,version,versions,161,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:10,safety,test,test,10,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:10,testability,test,test,10,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:106,testability,simpl,simple,106,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:106,usability,simpl,simple,106,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions. The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:502,deployability,version,version,502,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:128,energy efficiency,Optim,Optimally,128,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:502,integrability,version,version,502,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:432,interoperability,distribut,distributions,432,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:502,modifiability,version,version,502,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:334,performance,time,time,334,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:446,reliability,doe,does,446,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:62,safety,reme,remembers,62,"> I assigned this issue to @Axel-Naumann, because probably he remembers best why the manual forward declaration was introduced. Optimally, we'll find a solution where the official json_fwd header can be used again. Main problem is *cling*. If `nlohmann/json.hpp` included in header files and parsed during dictionary generation, next time when such file ""seen"" by cling - it crashes. . Official `json_fwd` cannot be used while some distributions does not include it - making impossible to use external version of `nlohmann/json.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2,deployability,updat,updated,2,"I updated the issue description to talk about `nlohmann/json` instead of the (already solved) issue with glibc 2.36. For the forward declaration, I have a (hopefully clever) idea how we can solve this across versions, let me play with this today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:208,deployability,version,versions,208,"I updated the issue description to talk about `nlohmann/json` instead of the (already solved) issue with glibc 2.36. For the forward declaration, I have a (hopefully clever) idea how we can solve this across versions, let me play with this today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:208,integrability,version,versions,208,"I updated the issue description to talk about `nlohmann/json` instead of the (already solved) issue with glibc 2.36. For the forward declaration, I have a (hopefully clever) idea how we can solve this across versions, let me play with this today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:208,modifiability,version,versions,208,"I updated the issue description to talk about `nlohmann/json` instead of the (already solved) issue with glibc 2.36. For the forward declaration, I have a (hopefully clever) idea how we can solve this across versions, let me play with this today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2,safety,updat,updated,2,"I updated the issue description to talk about `nlohmann/json` instead of the (already solved) issue with glibc 2.36. For the forward declaration, I have a (hopefully clever) idea how we can solve this across versions, let me play with this today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2,security,updat,updated,2,"I updated the issue description to talk about `nlohmann/json` instead of the (already solved) issue with glibc 2.36. For the forward declaration, I have a (hopefully clever) idea how we can solve this across versions, let me play with this today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:165,deployability,version,versions,165,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:165,integrability,version,versions,165,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:165,modifiability,version,versions,165,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:226,modifiability,paramet,parameters,226,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:23,testability,understand,understand,23,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:140,testability,simpl,simply,140,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:140,usability,simpl,simply,140,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:50,deployability,version,version,50,"Original issue related to the fact, that each new version of `nlohmann/json.hpp` requires own forward declaration like it used in REveElement.hxx:. https://github.com/root-project/root/blob/master/graf3d/eve7/inc/ROOT/REveElement.hxx#L24-L37. Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:50,integrability,version,version,50,"Original issue related to the fact, that each new version of `nlohmann/json.hpp` requires own forward declaration like it used in REveElement.hxx:. https://github.com/root-project/root/blob/master/graf3d/eve7/inc/ROOT/REveElement.hxx#L24-L37. Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:50,modifiability,version,version,50,"Original issue related to the fact, that each new version of `nlohmann/json.hpp` requires own forward declaration like it used in REveElement.hxx:. https://github.com/root-project/root/blob/master/graf3d/eve7/inc/ROOT/REveElement.hxx#L24-L37. Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1716,availability,error,errors,1716,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2044,availability,error,error,2044,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:160,deployability,modul,module,160,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:197,deployability,modul,modules,197,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1763,deployability,modul,modules,1763,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1823,deployability,modul,module,1823,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2023,deployability,fail,fails,2023,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1333,energy efficiency,Alloc,AllocatorType,1333,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1570,energy efficiency,alloc,allocator,1570,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2050,integrability,messag,message,2050,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2050,interoperability,messag,message,2050,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:160,modifiability,modul,module,160,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:197,modifiability,modul,modules,197,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1763,modifiability,modul,modules,1763,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1808,modifiability,deco,decoupled,1808,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1823,modifiability,modul,module,1823,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:924,performance,memor,memory,924,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1716,performance,error,errors,1716,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2044,performance,error,error,2044,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2023,reliability,fail,fails,2023,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:160,safety,modul,module,160,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:197,safety,modul,modules,197,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1716,safety,error,errors,1716,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1763,safety,modul,modules,1763,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1823,safety,modul,module,1823,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2044,safety,error,error,2044,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2034,security,ident,identical,2034,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:3,testability,understand,understanding,3,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:924,usability,memor,memory,924,"My understanding is the following, please correct me: As soon as we include `nlohmann/json.hpp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1716,usability,error,errors,1716,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2044,usability,error,error,2044,"pp` into a header, all the classes become part of the corresponding module. So if headers from different modules include the header, like. ```diff. diff --git a/graf3d/eve/inc/TEveCalo.h b/graf3d/eve/inc/TEveCalo.h. index 9be7925a6b..3ca258105f 100644. --- a/graf3d/eve/inc/TEveCalo.h. +++ b/graf3d/eve/inc/TEveCalo.h. @@ -21,6 +21,8 @@. #include ""TEveCaloData.h"". #include <vector>. . +#include <nlohmann/json.hpp>. +. class TClass;. class TEveRGBAPalette;. . diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..fb237fdfb6 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. we get errors because the symbols are provided by two modules. The only way out would be to have a decoupled json module, but that is bad for other reasons. > Without llvm13 one cannot directly include `nlohmann/json.hpp` in header file. Not sure what's supposed to change with llvm13, but the diff I posted above fails with identical error message. And in my opinion, rightfully so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:227,deployability,modul,modules,227,"This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. . Why one cannot include same header file from different modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:227,modifiability,modul,modules,227,"This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. . Why one cannot include same header file from different modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:15,safety,test,tested,15,"This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. . Why one cannot include same header file from different modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:227,safety,modul,modules,227,"This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. . Why one cannot include same header file from different modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:15,testability,test,tested,15,"This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. . Why one cannot include same header file from different modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:480,availability,error,errors,480,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:581,availability,error,error,581,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:382,deployability,modul,modules,382,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:513,deployability,modul,modules,513,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:562,deployability,build,build,562,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:348,energy efficiency,load,loaded,348,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:382,modifiability,modul,modules,382,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:513,modifiability,modul,modules,513,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:348,performance,load,loaded,348,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:480,performance,error,errors,480,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:581,performance,error,error,581,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:17,safety,test,tested,17,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:382,safety,modul,modules,382,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:480,safety,error,errors,480,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:513,safety,modul,modules,513,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:581,safety,error,error,581,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:17,testability,test,tested,17,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:480,usability,error,errors,480,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:581,usability,error,error,581,"> This should be tested - I compile llvm13 branch, replace forward declaration in eve7 and add TJSONFile with nlohmann/json in header. It works, but makes lot of warnings. Indeed, placing `#include <nlohmann/json.hpp>` into one of the existing `io/` headers seems to work; but already with `master` / LLVM9. Maybe it's because RIO is ""special"" and loaded during generation of other modules? Anyway, adding the include to `tree/dataframe/inc/ROOT/RDataFrame.hxx` leads to the same errors during generation of `lib/modules.idx` (which btw is not recognized by the build system as an error...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:231,availability,error,error,231,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code. But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:177,energy efficiency,load,load,177,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code. But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:177,performance,load,load,177,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code. But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:231,performance,error,error,231,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code. But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:231,safety,error,error,231,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code. But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:203,security,session,session,203,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code. But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:231,usability,error,error,231,"> Indeed, placing #include <nlohmann/json.hpp> into one of the existing io/ headers seems to work. Not really. One can generate dictionary and compile code. But if one tries to load such include in ROOT session, it terminates with error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:82,deployability,patch,patch,82,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:145,deployability,instal,install,145,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:264,deployability,version,version,264,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:264,integrability,version,version,264,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:264,modifiability,version,version,264,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:82,safety,patch,patch,82,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:82,security,patch,patch,82,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:162,usability,user,users,162,"@linev @hahnjo I wonder if there is something I could do in the meantime to quick patch it and compile it as is. I would like at least a working install for Arch users while this is fixed. Unfortunately, as you know on Arch, it's not trivial to switch to an older version of `nlohnmann-json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1013,energy efficiency,Alloc,AllocatorType,1013,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1250,energy efficiency,alloc,allocator,1250,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:52,modifiability,pac,package,52,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:130,modifiability,pac,package,130,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:604,performance,memor,memory,604,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1390,safety,test,tested,1390,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1390,testability,test,tested,1390,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:94,usability,user,user,94,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:604,usability,memor,memory,604,"@kgizdov I suppose you're asking for the Arch Linux package in particular? (thanks btw, I'm a user myself) As the `nlohmann-json` package ships with the `json_fwd.hpp` header, you can (temporarily) apply the following:. ```diff. diff --git a/graf3d/eve7/inc/ROOT/REveElement.hxx b/graf3d/eve7/inc/ROOT/REveElement.hxx. index 2a127888a2..9deb3af147 100644. --- a/graf3d/eve7/inc/ROOT/REveElement.hxx. +++ b/graf3d/eve7/inc/ROOT/REveElement.hxx. @@ -16,26 +16,13 @@. #include <ROOT/REveVector.hxx>. #include <ROOT/REveProjectionBases.hxx>. . +#include <nlohmann/json_fwd.hpp>. +. #include <map>. #include <memory>. . class TGeoMatrix;. . -namespace nlohmann {. -template<typename T, typename SFINAE>. -struct adl_serializer;. -. -template <template <typename U, typename V, typename... Args> class ObjectType,. - template <typename U, typename... Args> class ArrayType, class StringType, class BooleanType,. - class NumberIntegerType, class NumberUnsignedType, class NumberFloatType,. - template <typename U> class AllocatorType, template <typename T, typename SFINAE = void> class JSONSerializer,. - class BinaryType>. -class basic_json;. -. -using json = basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, double, std::allocator,. - adl_serializer, std::vector<std::uint8_t>>;. -} // namespace nlohmann. -. namespace ROOT {. namespace Experimental {. . ```. (tested on `master`, but should also apply for 6.26)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:117,deployability,instal,installs,117,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:402,deployability,version,version,402,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:425,deployability,continu,continue,425,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:532,deployability,version,versions,532,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:402,integrability,version,version,402,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:532,integrability,version,versions,532,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:402,modifiability,version,version,402,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:532,modifiability,version,versions,532,"uh, @Axel-Naumann @linev since https://github.com/nlohmann/json/pull/3679 (included in 3.11.2), `nlohmann-json` also installs `json_fwd.hpp` in case of `JSON_MultipleHeaders=OFF` (which btw changed its default to `ON` in https://github.com/nlohmann/json/pull/3532 for 3.11.0). What this means is that we can check for the header and use it if present. If it's not there, we can assume we have an older version (pre 3.11) and continue to use the forward declaration as it's written now. This would leave a small range of unsupported versions (3.11.0 and 3.11.1 built with `JSON_MultipleHeaders=OFF`), but I think that would be fine. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:240,deployability,version,versions,240,"@hahnjo CMake can natively check if a specific bit of code compiles - I think if you have a check on the forward declaration snippet and flip a flag based on successful compilation or not, it would be better and will not suffer unsupported versions, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:240,integrability,version,versions,240,"@hahnjo CMake can natively check if a specific bit of code compiles - I think if you have a check on the forward declaration snippet and flip a flag based on successful compilation or not, it would be better and will not suffer unsupported versions, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:38,interoperability,specif,specific,38,"@hahnjo CMake can natively check if a specific bit of code compiles - I think if you have a check on the forward declaration snippet and flip a flag based on successful compilation or not, it would be better and will not suffer unsupported versions, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:240,modifiability,version,versions,240,"@hahnjo CMake can natively check if a specific bit of code compiles - I think if you have a check on the forward declaration snippet and flip a flag based on successful compilation or not, it would be better and will not suffer unsupported versions, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:179,availability,avail,available,179,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:62,deployability,version,versions,62,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:254,deployability,version,version,254,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:62,integrability,version,versions,62,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:254,integrability,version,version,254,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:62,modifiability,version,versions,62,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:254,modifiability,version,version,254,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:179,reliability,availab,available,179,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:334,reliability,doe,doesn,334,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:179,safety,avail,available,179,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:179,security,availab,available,179,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:413,usability,clear,clear,413,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:45,interoperability,specif,specify,45,"Another ""simple"" approach to compile ROOT is specify `-Droot7=OFF`. This will disable eve7 compilation which has such problem with forward declarations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:9,testability,simpl,simple,9,"Another ""simple"" approach to compile ROOT is specify `-Droot7=OFF`. This will disable eve7 compilation which has such problem with forward declarations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:9,usability,simpl,simple,9,"Another ""simple"" approach to compile ROOT is specify `-Droot7=OFF`. This will disable eve7 compilation which has such problem with forward declarations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:182,modifiability,variab,variable,182,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:103,performance,time,time,103,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:20,safety,test,test,20,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:157,safety,test,test,157,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:20,testability,test,test,20,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:157,testability,test,test,157,"@hahnjo, your CMake test will either compile or not. It can't both compile and not compile at the same time. If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:421,availability,error,error,421,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:157,modifiability,variab,variable,157,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:6,performance,time,time,6,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:421,performance,error,error,421,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:317,reliability,doe,doesn,317,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:132,safety,test,test,132,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:421,safety,error,error,421,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:132,testability,test,test,132,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:421,usability,error,error,421,"Third time's a charm: https://github.com/root-project/root/pull/11205. @kgizdov . > If including the forward declaration in a CMake test compiles, you set a variable that enables it in the code; otherwise, the forward declaration is switched off in the code. What am I missing? The case where the forward declaration doesn't work *and* the `json_fwd.hpp` header is not provided. In the PR linked above, I propose to just error out in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:465,deployability,build,builds,465,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:171,integrability,messag,message,171,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:247,integrability,messag,message,247,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:350,integrability,messag,message,350,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:171,interoperability,messag,message,171,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:247,interoperability,messag,message,247,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:350,interoperability,messag,message,350,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:457,modifiability,pac,package,457,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:511,usability,help,help,511,"well, that's easily fixed as well:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(""using the special code that nlohmann 3.11.0 needs""). endif(). ```. But it's up to you. Arch Linux package builds now, so I am satisfied. Thanks for the help and quick response!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:184,availability,error,errors,184,The problem is I don't know what `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` could be; we cannot forward declare and we cannot include `json_fwd.hpp` nor the full `json.hpp`. The last PR just errors in this case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:184,performance,error,errors,184,The problem is I don't know what `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` could be; we cannot forward declare and we cannot include `json_fwd.hpp` nor the full `json.hpp`. The last PR just errors in this case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:184,safety,error,errors,184,The problem is I don't know what `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` could be; we cannot forward declare and we cannot include `json_fwd.hpp` nor the full `json.hpp`. The last PR just errors in this case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:184,usability,error,errors,184,The problem is I don't know what `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` could be; we cannot forward declare and we cannot include `json_fwd.hpp` nor the full `json.hpp`. The last PR just errors in this case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:645,availability,error,error,645,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:439,deployability,version,version,439,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:528,deployability,releas,releases,528,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:558,deployability,instal,install,558,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:576,deployability,version,version,576,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:676,deployability,version,version,676,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:701,deployability,instal,installed,701,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:799,deployability,version,version,799,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:55,integrability,messag,message,55,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:200,integrability,messag,message,200,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:276,integrability,messag,message,276,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:379,integrability,messag,message,379,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:439,integrability,version,version,439,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:576,integrability,version,version,576,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:634,integrability,messag,message,634,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:676,integrability,version,version,676,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:799,integrability,version,version,799,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:55,interoperability,messag,message,55,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:200,interoperability,messag,message,200,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:276,interoperability,messag,message,276,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:379,interoperability,messag,message,379,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:634,interoperability,messag,message,634,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:439,modifiability,version,version,439,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:576,modifiability,version,version,576,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:676,modifiability,version,version,676,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:799,modifiability,version,version,799,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:645,performance,error,error,645,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:645,safety,error,error,645,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:645,usability,error,error,645,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:868,usability,behavi,behaviour,868,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:. ```cmake. try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp). try_compile(FWD_HEADER MYBINDIR forward_header.cpp). if(FWD_DECLARE). message(""Using forward declaration for nlohmann_json""). elseif(FWD_HEADER). message(""Using forward header from nlohmann_json""). else(). set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON). message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""). endif(). ```. but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:35,performance,time,time,35,"But that's what I'm saying all the time and what the (already merged) PR does... Except that we don't need it so convoluted, we know when our forward declaration breaks (and will be broken forever).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:73,reliability,doe,does,73,"But that's what I'm saying all the time and what the (already merged) PR does... Except that we don't need it so convoluted, we know when our forward declaration breaks (and will be broken forever).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:81,safety,Except,Except,81,"But that's what I'm saying all the time and what the (already merged) PR does... Except that we don't need it so convoluted, we know when our forward declaration breaks (and will be broken forever).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:21,deployability,depend,depend,21,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:35,deployability,version,version,35,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:21,integrability,depend,depend,21,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:35,integrability,version,version,35,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:21,modifiability,depend,depend,21,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:35,modifiability,version,version,35,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:123,reliability,doe,doesn,123,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:21,safety,depend,depend,21,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:21,testability,depend,depend,21,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:50,usability,behavi,behaviour,50,"The point was not to depend on the version if the behaviour changes in the future. Again, it's a finer point; probably, it doesn't matter. Thanks for fixing it so quickly!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/pull/11131:30,interoperability,format,format,30,I intentionally did not clang format (because I saw that majority of other tutorials are not as well ... + formatting especially on the places needed looks worse to me),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11131
https://github.com/root-project/root/pull/11131:107,interoperability,format,formatting,107,I intentionally did not clang format (because I saw that majority of other tutorials are not as well ... + formatting especially on the places needed looks worse to me),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11131
https://github.com/root-project/root/issues/11135:28,deployability,build,build,28,"Disabling LTO for the whole build avoids the problem, but this is of course only a stopgap measure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:91,energy efficiency,measur,measure,91,"Disabling LTO for the whole build avoids the problem, but this is of course only a stopgap measure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:34,safety,avoid,avoids,34,"Disabling LTO for the whole build avoids the problem, but this is of course only a stopgap measure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:83,usability,stop,stopgap,83,"Disabling LTO for the whole build avoids the problem, but this is of course only a stopgap measure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:109,deployability,configurat,configuration,109,"As said in https://github.com/root-project/root/issues/10777#issuecomment-1207995020, LTO is not a supported configuration for building ROOT. Some of that is probably due to the upstream LLVM issue, so I don't see what should be done from our side...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:127,deployability,build,building,127,"As said in https://github.com/root-project/root/issues/10777#issuecomment-1207995020, LTO is not a supported configuration for building ROOT. Some of that is probably due to the upstream LLVM issue, so I don't see what should be done from our side...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:109,integrability,configur,configuration,109,"As said in https://github.com/root-project/root/issues/10777#issuecomment-1207995020, LTO is not a supported configuration for building ROOT. Some of that is probably due to the upstream LLVM issue, so I don't see what should be done from our side...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:109,modifiability,configur,configuration,109,"As said in https://github.com/root-project/root/issues/10777#issuecomment-1207995020, LTO is not a supported configuration for building ROOT. Some of that is probably due to the upstream LLVM issue, so I don't see what should be done from our side...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:109,security,configur,configuration,109,"As said in https://github.com/root-project/root/issues/10777#issuecomment-1207995020, LTO is not a supported configuration for building ROOT. Some of that is probably due to the upstream LLVM issue, so I don't see what should be done from our side...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:99,usability,support,supported,99,"As said in https://github.com/root-project/root/issues/10777#issuecomment-1207995020, LTO is not a supported configuration for building ROOT. Some of that is probably due to the upstream LLVM issue, so I don't see what should be done from our side...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:145,energy efficiency,optim,optimization,145,"Already mentioned that:. - Detect CXXFLAGS including LTO, issue a warning. - Provide an option to disable LTO for LLVM. LTO is more than just an optimization. It allows to find numerous coding issues which are only visible with whole program analysis, e.g. ODR violations, out-of-bound accesses across TUs, ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:145,performance,optimiz,optimization,145,"Already mentioned that:. - Detect CXXFLAGS including LTO, issue a warning. - Provide an option to disable LTO for LLVM. LTO is more than just an optimization. It allows to find numerous coding issues which are only visible with whole program analysis, e.g. ODR violations, out-of-bound accesses across TUs, ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:27,safety,Detect,Detect,27,"Already mentioned that:. - Detect CXXFLAGS including LTO, issue a warning. - Provide an option to disable LTO for LLVM. LTO is more than just an optimization. It allows to find numerous coding issues which are only visible with whole program analysis, e.g. ODR violations, out-of-bound accesses across TUs, ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:27,security,Detect,Detect,27,"Already mentioned that:. - Detect CXXFLAGS including LTO, issue a warning. - Provide an option to disable LTO for LLVM. LTO is more than just an optimization. It allows to find numerous coding issues which are only visible with whole program analysis, e.g. ODR violations, out-of-bound accesses across TUs, ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:286,security,access,accesses,286,"Already mentioned that:. - Detect CXXFLAGS including LTO, issue a warning. - Provide an option to disable LTO for LLVM. LTO is more than just an optimization. It allows to find numerous coding issues which are only visible with whole program analysis, e.g. ODR violations, out-of-bound accesses across TUs, ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:14,deployability,build,building,14,Closing since building with LTO is not supported.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:39,usability,support,supported,39,Closing since building with LTO is not supported.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/pull/11137:100,deployability,instal,installing,100,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:76,integrability,sub,subprocess,76,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:14,safety,test,tested,14,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:14,testability,test,tested,14,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:87,usability,command,commands,87,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:209,usability,user,users,209,"@vgvassilev I tested this on Ubuntu 20.04, and I'm not sure if I should add subprocess commands for installing libncurses5, debuild and debhelper. It was an empty VM instance that's why, I'm not sure if other users would need this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:35,modifiability,pac,package,35,I was also able to obtain a debian package through these changes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:46,modifiability,pac,package,46,Can you split the flake8 commits from the deb package commits and also squash the revert commits?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11141:15,availability,error,error,15,Unrelated test error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:15,performance,error,error,15,Unrelated test error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:10,safety,test,test,10,Unrelated test error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:15,safety,error,error,15,Unrelated test error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:10,testability,test,test,10,Unrelated test error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:15,usability,error,error,15,Unrelated test error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/issues/11143:672,availability,error,error,672,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:544,energy efficiency,Draw,Draw,544,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:556,energy efficiency,Draw,Draw,556,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:672,performance,error,error,672,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:12,safety,test,tested,12,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:111,safety,test,test,111,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:124,safety,test,test,124,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:221,safety,test,test,221,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:236,safety,test,test,236,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:672,safety,error,error,672,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:1097,safety,avoid,avoid,1097,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:12,testability,test,tested,12,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:111,testability,test,test,111,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:124,testability,test,test,124,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:221,testability,test,test,221,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:236,testability,test,test,236,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11143:672,usability,error,error,672,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```. // File: test.cxx. // test TH1::Chisquare function. Pearson Chi2 is calculated as expected. // To run the script: root test.cxx. void test(). {. int nbins = 100;. double xmin =-5;. double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");. double nentries = 1000;. double binwidth = (xmax-xmin)/nbins;. f->SetParameters(nentries*binwidth,0.,1.);. f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);. h->FillRandom(""f2"",nentries);. h->Draw();. f->Draw(""same"");. //-- Chi2 Pearson. double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ). double chi2_P = 0.;. for (int i = 1; i <= h->GetNbinsX(); i++) {. double v = f->Eval(h->GetBinCenter(i));. if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);. }. std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";. std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }. ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/issues/11146:61,deployability,patch,patched,61,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:69,deployability,version,version,69,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:139,deployability,patch,patches,139,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:214,deployability,patch,patches,214,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:299,deployability,patch,patches,299,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:69,integrability,version,version,69,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:69,modifiability,version,version,69,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:61,safety,patch,patched,61,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:139,safety,patch,patches,139,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:214,safety,patch,patches,214,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:299,safety,patch,patches,299,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:61,security,patch,patched,61,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:139,security,patch,patches,139,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:214,security,patch,patches,214,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:299,security,patch,patches,299,"This is expected, `builtin_llvm=OFF` can only be used with a patched version of LLVM from https://github.com/vgvassilev/llvm/commits/cling-patches. Same for `builtin_clang=OFF`, where Cling needs quite a number of patches on top of ""vanilla"" Clang: https://github.com/vgvassilev/clang/commits/cling-patches",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:206,deployability,instal,install,206,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:237,deployability,build,build-options,237,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:270,deployability,Build,Build,270,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:304,deployability,build,build,304,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:438,deployability,Build,Build,438,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:45,interoperability,incompatib,incompatible,45,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:122,interoperability,incompatib,incompatible,122,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:69,safety,detect,detect,69,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:69,security,detect,detect,69,"This is obviously not expected:. 1. If it is incompatible, it should detect this when CMake runs. 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:117,deployability,log,logic,117,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:140,deployability,patch,patch,140,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:298,deployability,instal,install,298,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:329,deployability,build,build-options,329,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:628,deployability,upgrad,upgrade,628,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:697,deployability,build,build,697,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:11,interoperability,incompatib,incompatible,11,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:154,interoperability,distribut,distribute,154,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:214,interoperability,incompatib,incompatible,214,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:628,modifiability,upgrad,upgrade,628,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:35,safety,detect,detect,35,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:107,safety,detect,detection,107,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:117,safety,log,logic,117,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:140,safety,patch,patch,140,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:35,security,detect,detect,35,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:107,security,detect,detection,107,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:117,security,log,logic,117,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:140,security,patch,patch,140,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:117,testability,log,logic,117,"> If it is incompatible, it should detect this when CMake runs. I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. I *think* this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. but the situation will again change with the upgrade to LLVM 13, where it should *hopefully* again be possible to build against vanilla LLVM...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:388,availability,mainten,maintenance,388,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:125,deployability,log,logic,125,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:148,deployability,patch,patch,148,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:249,deployability,version,version,249,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:663,deployability,instal,install,663,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:694,deployability,build,build-options,694,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1011,deployability,upgrad,upgrade,1011,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1080,deployability,build,build,1080,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:249,integrability,version,version,249,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:13,interoperability,incompatib,incompatible,13,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:162,interoperability,distribut,distribute,162,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:579,interoperability,incompatib,incompatible,579,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:249,modifiability,version,version,249,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:257,modifiability,variab,variable,257,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1011,modifiability,upgrad,upgrade,1011,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:535,performance,time,time,535,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:388,reliability,mainten,maintenance,388,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:37,safety,detect,detect,37,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:115,safety,detect,detection,115,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:125,safety,log,logic,125,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:148,safety,patch,patch,148,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:315,safety,detect,detection,315,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:37,security,detect,detect,37,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:115,security,detect,detection,115,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:125,security,log,logic,125,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:148,security,patch,patch,148,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:315,security,detect,detection,315,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:342,security,modif,modification,342,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:125,testability,log,logic,125,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:370,usability,help,help,370,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:434,usability,behavi,behavior,434,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1110,usability,Support,Support,1110,"> > If it is incompatible, it should detect this when CMake runs. > . > I don't think it's feasible to write CMake detection logic for every single patch that we distribute on top of LLVM and Clang. Doing a catchall should be doable. Add some extra version variable to llvm-config, or similar. But also, doing such detection for every single modification would actually help in long term maintenance, making any expected deviation in behavior explicit. Though, adding this in retrospective for something on the way out is probably not time spent well. . > > If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options. > . > I _think_ this list of options is autogenerated, but not sure. We could add another warning similar to `builtin_clang`'s. > . > https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/CMakeLists.txt#L2-L4. > . > but the situation will again change with the upgrade to LLVM 13, where it should _hopefully_ again be possible to build against vanilla LLVM... Support for vanilla LLVM 13 (and hopefully newer) would be a very welcome change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/pull/11147:80,energy efficiency,core,core,80,@vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:116,energy efficiency,core,core,116,@vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:40,testability,context,context,40,@vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:51,deployability,releas,release,51,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:189,energy efficiency,core,core,189,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:225,energy efficiency,core,core,225,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:524,energy efficiency,model,model,524,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:951,energy efficiency,current,current,951,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:559,integrability,interfac,interfaces,559,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:559,interoperability,interfac,interfaces,559,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:846,interoperability,specif,specific,846,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:360,modifiability,pac,package,360,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:368,modifiability,maintain,maintainers,368,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:559,modifiability,interfac,interfaces,559,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:752,reliability,doe,does,752,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:368,safety,maintain,maintainers,368,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:391,safety,compl,complaining,391,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:391,security,compl,complaining,391,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:524,security,model,model,524,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:149,testability,context,context,149,"@chrisburr, would it be okay to ship the next ROOT release requiring llvm to be built with `rtti` enabled? > @vgvassilev the bigger question in this context is probably if we should merge `core/metacling/src/TCling.cxx` and `core/metacling/src/TClingCallbacks.cxx` or at least rethink their separation... I believe this story has not ended. I suspect that the package maintainers will start complaining about that switch (has not yet happened) and we will have to revert again to no-rtti environment... . Perhaps the utopic model would be to use the `llvm-c` interfaces when communicating with llvm (or at least crossing the rtti/no-rtti worlds). The separation between `TCling` and `TClingCallbacks` and Cling standalone in software engineering terms does not really exist. The motivation for `TClingCallbacks` was to keep cling clean from ROOT-specific features that might make its potential upstreaming harder. I am not sure how we can improve the current setup but if you have particular ideas I am happy to participate discussing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:74,deployability,build,build,74,"@vgvassilev what's the conclusion on this? Shall we keep this, even if we build LLVM with RTTI and it will likely not work to build ROOT against a non-RTTI version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:126,deployability,build,build,126,"@vgvassilev what's the conclusion on this? Shall we keep this, even if we build LLVM with RTTI and it will likely not work to build ROOT against a non-RTTI version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:156,deployability,version,version,156,"@vgvassilev what's the conclusion on this? Shall we keep this, even if we build LLVM with RTTI and it will likely not work to build ROOT against a non-RTTI version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:156,integrability,version,version,156,"@vgvassilev what's the conclusion on this? Shall we keep this, even if we build LLVM with RTTI and it will likely not work to build ROOT against a non-RTTI version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:156,modifiability,version,version,156,"@vgvassilev what's the conclusion on this? Shall we keep this, even if we build LLVM with RTTI and it will likely not work to build ROOT against a non-RTTI version?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:83,deployability,build,build,83,"Perhaps we should discuss that with a broader audience? The fact that we ""have to"" build with `rtti` hints towards some lack of abstraction. I still expect some push back from ROOT's clients and package maintainers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:128,integrability,abstract,abstraction,128,"Perhaps we should discuss that with a broader audience? The fact that we ""have to"" build with `rtti` hints towards some lack of abstraction. I still expect some push back from ROOT's clients and package maintainers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:128,modifiability,abstract,abstraction,128,"Perhaps we should discuss that with a broader audience? The fact that we ""have to"" build with `rtti` hints towards some lack of abstraction. I still expect some push back from ROOT's clients and package maintainers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:195,modifiability,pac,package,195,"Perhaps we should discuss that with a broader audience? The fact that we ""have to"" build with `rtti` hints towards some lack of abstraction. I still expect some push back from ROOT's clients and package maintainers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:203,modifiability,maintain,maintainers,203,"Perhaps we should discuss that with a broader audience? The fact that we ""have to"" build with `rtti` hints towards some lack of abstraction. I still expect some push back from ROOT's clients and package maintainers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:203,safety,maintain,maintainers,203,"Perhaps we should discuss that with a broader audience? The fact that we ""have to"" build with `rtti` hints towards some lack of abstraction. I still expect some push back from ROOT's clients and package maintainers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:101,usability,hint,hints,101,"Perhaps we should discuss that with a broader audience? The fact that we ""have to"" build with `rtti` hints towards some lack of abstraction. I still expect some push back from ROOT's clients and package maintainers...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:0,availability,ping,ping,0,"ping, what do we do with this one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:152,integrability,interfac,interfaces,152,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:152,interoperability,interfac,interfaces,152,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:73,modifiability,layer,layering,73,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:152,modifiability,interfac,interfaces,152,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:228,safety,except,except,228,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:287,safety,compl,complained,287,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:287,security,compl,complained,287,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:18,usability,clear,clear,18,"Ok, if there's no clear way here, I will close this for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:41,usability,close,close,41,"Ok, if there's no clear way here, I will close this for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:92,safety,compl,complains,92,"I was weakly in favor of this PR, just making sure we don't forget to revert it if somebody complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:92,security,compl,complains,92,"I was weakly in favor of this PR, just making sure we don't forget to revert it if somebody complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11148:69,availability,state,statement,69,A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See ac36d879629fd67cf6fc9e955923ec9f98a2361c). I am guessing to avoid this we might also want to apply something like:. ```. switch (static_cast<Int_t>(fVal->fCase)) {. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:69,integrability,state,statement,69,A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See ac36d879629fd67cf6fc9e955923ec9f98a2361c). I am guessing to avoid this we might also want to apply something like:. ```. switch (static_cast<Int_t>(fVal->fCase)) {. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:22,safety,compl,complaining,22,A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See ac36d879629fd67cf6fc9e955923ec9f98a2361c). I am guessing to avoid this we might also want to apply something like:. ```. switch (static_cast<Int_t>(fVal->fCase)) {. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:172,safety,avoid,avoid,172,A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See ac36d879629fd67cf6fc9e955923ec9f98a2361c). I am guessing to avoid this we might also want to apply something like:. ```. switch (static_cast<Int_t>(fVal->fCase)) {. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:22,security,compl,complaining,22,A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See ac36d879629fd67cf6fc9e955923ec9f98a2361c). I am guessing to avoid this we might also want to apply something like:. ```. switch (static_cast<Int_t>(fVal->fCase)) {. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2,usability,tool,tool,2,A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See ac36d879629fd67cf6fc9e955923ec9f98a2361c). I am guessing to avoid this we might also want to apply something like:. ```. switch (static_cast<Int_t>(fVal->fCase)) {. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:71,availability,state,statement,71,"> A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See [ac36d87](https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c)). I am guessing to avoid this we might also want to apply something like:. > . > ```. > switch (static_cast<Int_t>(fVal->fCase)) {. > ```. Unless I'm looking at the wrong data structure, `fCase` *already is* a `UInt_t`:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/io/io/inc/TGenCollectionProxy.h#L64. I don't think casting will change anything here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:71,integrability,state,statement,71,"> A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See [ac36d87](https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c)). I am guessing to avoid this we might also want to apply something like:. > . > ```. > switch (static_cast<Int_t>(fVal->fCase)) {. > ```. Unless I'm looking at the wrong data structure, `fCase` *already is* a `UInt_t`:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/io/io/inc/TGenCollectionProxy.h#L64. I don't think casting will change anything here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:24,safety,compl,complaining,24,"> A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See [ac36d87](https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c)). I am guessing to avoid this we might also want to apply something like:. > . > ```. > switch (static_cast<Int_t>(fVal->fCase)) {. > ```. Unless I'm looking at the wrong data structure, `fCase` *already is* a `UInt_t`:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/io/io/inc/TGenCollectionProxy.h#L64. I don't think casting will change anything here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:229,safety,avoid,avoid,229,"> A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See [ac36d87](https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c)). I am guessing to avoid this we might also want to apply something like:. > . > ```. > switch (static_cast<Int_t>(fVal->fCase)) {. > ```. Unless I'm looking at the wrong data structure, `fCase` *already is* a `UInt_t`:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/io/io/inc/TGenCollectionProxy.h#L64. I don't think casting will change anything here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:24,security,compl,complaining,24,"> A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See [ac36d87](https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c)). I am guessing to avoid this we might also want to apply something like:. > . > ```. > switch (static_cast<Int_t>(fVal->fCase)) {. > ```. Unless I'm looking at the wrong data structure, `fCase` *already is* a `UInt_t`:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/io/io/inc/TGenCollectionProxy.h#L64. I don't think casting will change anything here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4,usability,tool,tool,4,"> A tool (Coverity) was complaining that the values used in the switch statement did not belong to the enum. (See [ac36d87](https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c)). I am guessing to avoid this we might also want to apply something like:. > . > ```. > switch (static_cast<Int_t>(fVal->fCase)) {. > ```. Unless I'm looking at the wrong data structure, `fCase` *already is* a `UInt_t`:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/io/io/inc/TGenCollectionProxy.h#L64. I don't think casting will change anything here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:111,availability,error,error,111,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:503,energy efficiency,core,core,503,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:670,energy efficiency,core,core,670,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:137,integrability,messag,message,137,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:137,interoperability,messag,message,137,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:111,performance,error,error,111,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:111,safety,error,error,111,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:261,safety,valid,valid,261,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:111,usability,error,error,111,"I don't know if I'm misinterpreting something, but I noticed something very interesting:. For this compilation error, clang gives a note message:. ```. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. ```. Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from . https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , . but if I try the below cases, it told me that *this enum type `EProperty`* from . https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:189,availability,operat,operator,189,> I don't think casting will change anything here. You a right. I am guessing that Coverity noticed that some of the case value were EProperty and complained that some weren't (since there operator `|`ed values.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:147,safety,compl,complained,147,> I don't think casting will change anything here. You a right. I am guessing that Coverity noticed that some of the case value were EProperty and complained that some weren't (since there operator `|`ed values.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:147,security,compl,complained,147,> I don't think casting will change anything here. You a right. I am guessing that Coverity noticed that some of the case value were EProperty and complained that some weren't (since there operator `|`ed values.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:258,performance,time,time,258,"> ""case value is not a constant expression"". Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. ```. EProperty(kIsPointer | kBIT_ISSTRING). and. kIsPointer | kBIT_ISSTRING. ```. are ""constant"" (i.e calculatable at compile time). > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"" . > That may said, the compiler got confused about these two types that have same name? That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. ```. case ::EProperty(kBIT_ISSTRING):. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:313,safety,valid,valid,313,"> ""case value is not a constant expression"". Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. ```. EProperty(kIsPointer | kBIT_ISSTRING). and. kIsPointer | kBIT_ISSTRING. ```. are ""constant"" (i.e calculatable at compile time). > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"" . > That may said, the compiler got confused about these two types that have same name? That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. ```. case ::EProperty(kBIT_ISSTRING):. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:490,safety,compl,complaints,490,"> ""case value is not a constant expression"". Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. ```. EProperty(kIsPointer | kBIT_ISSTRING). and. kIsPointer | kBIT_ISSTRING. ```. are ""constant"" (i.e calculatable at compile time). > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"" . > That may said, the compiler got confused about these two types that have same name? That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. ```. case ::EProperty(kBIT_ISSTRING):. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:490,security,compl,complaints,490,"> ""case value is not a constant expression"". Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. ```. EProperty(kIsPointer | kBIT_ISSTRING). and. kIsPointer | kBIT_ISSTRING. ```. are ""constant"" (i.e calculatable at compile time). > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"" . > That may said, the compiler got confused about these two types that have same name? That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. ```. case ::EProperty(kBIT_ISSTRING):. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:69,testability,understand,understand,69,"> ""case value is not a constant expression"". Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. ```. EProperty(kIsPointer | kBIT_ISSTRING). and. kIsPointer | kBIT_ISSTRING. ```. are ""constant"" (i.e calculatable at compile time). > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"" . > That may said, the compiler got confused about these two types that have same name? That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. ```. case ::EProperty(kBIT_ISSTRING):. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:441,availability,error,error,441,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3156,availability,error,error,3156,"). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5062,availability,error,error,5062,"lude -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5254,availability,error,error,5254,"-compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5440,availability,error,error,5440,"dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6445,availability,Error,Error,6445,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6504,availability,failur,failure,6504,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3243,deployability,FAIL,FAILED,3243,"| kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3319,deployability,Build,Build,3319,"G | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3374,deployability,Build,Build,3374,");. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3422,deployability,Build,Build,3422,");. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3500,deployability,Build,Build,3500,"ements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clinguti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3549,deployability,Build,Build,3549,"ss:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3638,deployability,Build,Build,3638,"operty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3741,deployability,Build,Build,3741,"e ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3788,deployability,Build,Build,3788,".ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3836,deployability,Build,Build,3836,"erty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4301,deployability,Build,Build,4301,e/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected exp,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4892,deployability,Build,Build,4892,"+/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template no",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5026,deployability,Build,Build,5026,"0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5218,deployability,Build,Build,5218,"pilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5404,deployability,Build,Build,5404,"/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initialize",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6471,deployability,Build,Build,6471,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6504,deployability,fail,failure,6504,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6532,deployability,Build,Build,6532,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6644,deployability,build,build,6644,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6670,deployability,fail,failed,6670,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3668,energy efficiency,Core,Core,3668,"ad_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/de",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4373,energy efficiency,core,core,4373,uild/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4408,energy efficiency,core,core,4408,un/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4452,energy efficiency,core,core,4452,ake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matc,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4490,energy efficiency,core,core,4490,ev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4531,energy efficiency,core,core,4531,me/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_lim,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4571,energy efficiency,core,core,4571,tbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/g,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4608,energy efficiency,core,core,4608,odule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4642,energy efficiency,core,core,4642,lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4677,energy efficiency,core,core,4677,xcludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function temp,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4712,energy efficiency,core,core,4712,udePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 argumen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4747,energy efficiency,core,core,4747,"nclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4781,energy efficiency,core,core,4781,"root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4816,energy efficiency,core,core,4816,"home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:4857,energy efficiency,core,core,4857,"ptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6659,integrability,sub,subcommand,6659,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:441,performance,error,error,441,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3156,performance,error,error,3156,"). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5062,performance,error,error,5062,"lude -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5254,performance,error,error,5254,"-compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5440,performance,error,error,5440,"dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6445,performance,Error,Error,6445,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6504,performance,failur,failure,6504,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3243,reliability,FAIL,FAILED,3243,"| kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6504,reliability,fail,failure,6504,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6670,reliability,fail,failed,6670,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:50,safety,valid,valid,50,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:234,safety,compl,complaints,234,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:441,safety,error,error,441,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3156,safety,error,error,3156,"). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5062,safety,error,error,5062,"lude -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5254,safety,error,error,5254,"-compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5440,safety,error,error,5440,"dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6445,safety,Error,Error,6445,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:234,security,compl,complaints,234,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:418,usability,confirm,confirm,418,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:441,usability,error,error,441,"> > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. I can confirm this fixes the error, using the diff below:. ```. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index da045d2035..dd255f42a5 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b));. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. DOLOOP(i->read_std_string_pointer(b));. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. @@ -442,20 +442,20 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. DOLOOP(i->read_std_string(b)). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. fDestruct(fEnv->fStart,fEnv->fSize);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. fFeed(fEnv->fStart,fEnv->fObj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3156,usability,error,error,3156,"). fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. DOLOOP(i->read_tstring_pointer(vsn3, b));. fFeed(fEnv->fStart,fEnv->fObject,fEnv->fSize);. break;. @@ -864,16 +864,16 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case EProperty(kBIT_ISSTRING):. + case ::EProperty(kBIT_ISSTRING):. i->read_std_string(b);. break;. - case EProperty(kIsPointer | kIsClass):. + case ::EProperty(kIsPointer | kIsClass):. i->set(b.ReadObjectAny(v->fType));. break;. - case EProperty(kIsPointer | kBIT_ISSTRING):. + case ::EProperty(kIsPointer | kBIT_ISSTRING):. i->read_std_string_pointer(b);. break;. - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. i->read_tstring_pointer(vsn3, b);. break;. }. ```. However, then another error occured:. ```. [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5062,usability,error,error,5062,"lude -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5254,usability,error,error,5254,"-compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:5440,usability,error,error,5440,"dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6445,usability,Error,Error,6445,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:6650,usability,stop,stopped,6650,"/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. In file included from input_line_10:3:. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ~~~~~^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^. /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. ^~~~~. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(const _Tp&, const _Tp&);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. max(const _Tp&, const _Tp&, _Compare);. ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. max(initializer_list<_Tp> __l). ^. /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. max(initializer_list<_Tp> __l, _Compare __comp). ^. Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. ninja: build stopped: subcommand failed. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:112,availability,error,error,112,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2482,availability,error,error,2482,"ms altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case EProperty(kIsPointer | kIsClass):. > + case ::EProperty(kIsPointer | kIsClass):. > DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. > - case EProperty(kIsPointer | kBIT_ISSTRING):. > + case ::EProperty(kIsPointer | kBIT_ISSTRING):. > DOLOOP(i->read_std_string_pointer(b));. > - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > DOLOOP(i->read",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:518,energy efficiency,core,core,518,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:681,energy efficiency,core,core,681,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:138,integrability,messag,message,138,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:138,interoperability,messag,message,138,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:864,modifiability,inherit,inherits,864,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1445,modifiability,portab,portable,1445," `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:112,performance,error,error,112,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1278,performance,time,time,1278,"e of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints al",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2482,performance,error,error,2482,"ms altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case EProperty(kIsPointer | kIsClass):. > + case ::EProperty(kIsPointer | kIsClass):. > DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. > - case EProperty(kIsPointer | kBIT_ISSTRING):. > + case ::EProperty(kIsPointer | kBIT_ISSTRING):. > DOLOOP(i->read_std_string_pointer(b));. > - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > DOLOOP(i->read",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:112,safety,error,error,112,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:270,safety,valid,valid,270,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1321,safety,review,reviews,1321,". > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coveri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1468,safety,avoid,avoids,1468,"tps://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1550,safety,valid,valid,1550,"ut if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1734,safety,compl,complaints,1734," may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2071,safety,valid,valid,2071,"stand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case E",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2267,safety,compl,complaints,2267,"mpile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case EProperty(kIsPointer | kIsClass):. > + case ::EProperty(kIsPointer | kIsClass):. > DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. > - case EProperty(kIsPointer | kBIT_ISSTRING):. > + case ::EProperty",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2482,safety,error,error,2482,"ms altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case EProperty(kIsPointer | kIsClass):. > + case ::EProperty(kIsPointer | kIsClass):. > DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. > - case EProperty(kIsPointer | kBIT_ISSTRING):. > + case ::EProperty(kIsPointer | kBIT_ISSTRING):. > DOLOOP(i->read_std_string_pointer(b));. > - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > DOLOOP(i->read",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1734,security,compl,complaints,1734," may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2267,security,compl,complaints,2267,"mpile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case EProperty(kIsPointer | kIsClass):. > + case ::EProperty(kIsPointer | kIsClass):. > DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. > - case EProperty(kIsPointer | kBIT_ISSTRING):. > + case ::EProperty",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1069,testability,understand,understand,1069,"ery interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the val",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1321,testability,review,reviews,1321,". > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coveri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:112,usability,error,error,112,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:964,usability,close,closer,964,"> I don't know if I'm misinterpreting something, but I noticed something very interesting: For this compilation error, clang gives a note message:. > . > ```. > /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. > ```. > . > Is this enum type `EProperty` really only range from 0 - 63? clangd told me that the definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1422,usability,stop,stop,1422," definition of first case `kIsClass` is from https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , but if I try the below cases, it told me that _this enum type `EProperty`_ from https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ??? > . > That may said, the compiler got confused about these two types that have same name? That's interesting: `TGenCollectionStreamer` inherits from `TVirtualCollectionProxy` (via `TGenCollectionProxy`), so that `EProperty` is indeed ""closer"" than `::EProperty`. > > ""case value is not a constant expression"". > . > Humm ... either I don't understand the meaning or Clang is 'wrong' on this part. Both. > . > ```. > EProperty(kIsPointer | kBIT_ISSTRING). > and. > kIsPointer | kBIT_ISSTRING. > ```. > . > are ""constant"" (i.e calculatable at compile time). As discussed post-commit in https://reviews.llvm.org/D130058, the check is indeed questionable in a few corner cases. But that shouldn't stop us from finding a portable solution that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2459,usability,confirm,confirm,2459,"that avoids the problems altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case EProperty(kIsPointer | kIsClass):. > + case ::EProperty(kIsPointer | kIsClass):. > DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. > - case EProperty(kIsPointer | kBIT_ISSTRING):. > + case ::EProperty(kIsPointer | kBIT_ISSTRING):. > DOLOOP(i->read_std_string_pointer(b));. > - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsCla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2482,usability,error,error,2482,"ms altogether. > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > That may said, the compiler got confused about these two types that have same name? > . > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > . > ```. > case ::EProperty(kBIT_ISSTRING):. > ```. The range checks of that new warning are also known bad for some cases, not sure if that is one of them... > > > ""note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type"". > > > That may said, the compiler got confused about these two types that have same name? > > . > > . > > That is likely the cause of the complaints albeit it is the developer (and possibly Coverity too) that got confused here as it was meant to be written as:. > > ```. > > case ::EProperty(kBIT_ISSTRING):. > > ```. > . > I can confirm this fixes the error, using the diff below:. > . > ```. > diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. > index da045d2035..dd255f42a5 100644. > --- a/io/io/src/TGenCollectionStreamer.cxx. > +++ b/io/io/src/TGenCollectionStreamer.cxx. > @@ -389,13 +389,13 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. > switch (fVal->fCase) {. > case kIsClass:. > DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. > - case EProperty(kBIT_ISSTRING):. > + case ::EProperty(kBIT_ISSTRING):. > DOLOOP(i->read_std_string(b));. > - case EProperty(kIsPointer | kIsClass):. > + case ::EProperty(kIsPointer | kIsClass):. > DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. > - case EProperty(kIsPointer | kBIT_ISSTRING):. > + case ::EProperty(kIsPointer | kBIT_ISSTRING):. > DOLOOP(i->read_std_string_pointer(b));. > - case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > + case ::EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. > DOLOOP(i->read",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:24,availability,error,error,24,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1946,availability,error,error,1946," -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2144,availability,error,error,2144,"/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2336,availability,error,error,2336,"se/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3371,availability,Error,Error,3371,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3430,availability,failur,failure,3430,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:121,deployability,FAIL,FAILED,121,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:197,deployability,Build,Build,197,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:252,deployability,Build,Build,252,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:302,deployability,Build,Build,302,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:380,deployability,Build,Build,380,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:429,deployability,Build,Build,429,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:518,deployability,Build,Build,518,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:621,deployability,Build,Build,621,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:668,deployability,Build,Build,668,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:716,deployability,Build,Build,716,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1181,deployability,Build,Build,1181,jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': ex,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1772,deployability,Build,Build,1772,"+/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1910,deployability,Build,Build,1910,"include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2108,deployability,Build,Build,2108,"/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initia",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2300,deployability,Build,Build,2300,"/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3397,deployability,Build,Build,3397,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3430,deployability,fail,failure,3430,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3458,deployability,Build,Build,3458,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3574,deployability,build,build,3574,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3600,deployability,fail,failed,3600,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:548,energy efficiency,Core,Core,548,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1253,energy efficiency,core,core,1253,ld/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1288,energy efficiency,core,core,1288,un/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1332,energy efficiency,core,core,1332,ake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1370,energy efficiency,core,core,1370,ev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1411,energy efficiency,core,core,1411,me/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { retur,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1451,energy efficiency,core,core,1451,tbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1488,energy efficiency,core,core,1488,odule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1522,energy efficiency,core,core,1522,lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1557,energy efficiency,core,core,1557,xcludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: c,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1592,energy efficiency,core,core,1592,udePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viab,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1627,energy efficiency,core,core,1627,"nclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 wer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1661,energy efficiency,core,core,1661,"root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, cons",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1696,energy efficiency,core,core,1696,"home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1737,energy efficiency,core,core,1737,"ptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3589,integrability,sub,subcommand,3589,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:24,performance,error,error,24,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1946,performance,error,error,1946," -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2144,performance,error,error,2144,"/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2336,performance,error,error,2336,"se/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3371,performance,Error,Error,3371,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3430,performance,failur,failure,3430,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:121,reliability,FAIL,FAILED,121,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3430,reliability,fail,failure,3430,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3600,reliability,fail,failed,3600,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:24,safety,error,error,24,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1946,safety,error,error,1946," -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2144,safety,error,error,2144,"/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2336,safety,error,error,2336,"se/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3371,safety,Error,Error,3371,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:24,usability,error,error,24,"> However, then another error occured:. > . > ```. > [19/1526] Generating G__ROOTVecOps.cxx, ../../lib/ROOTVecOps.pcm. > FAILED: math/vecops/G__ROOTVecOps.cxx lib/ROOTVecOps.pcm /home/jun/dev/root/Build/math/vecops/G__ROOTVecOps.cxx /home/jun/dev/root/Build/lib/ROOTVecOps.pcm. > cd /home/jun/dev/root/Build/math/vecops && /usr/bin/cmake -E env LD_LIBRARY_PATH=/home/jun/dev/root/Build/lib: ROOTIGNOREPREFIX=1 /home/jun/dev/root/Build/bin/rootcling -rootbuild -v2 -f G__ROOTVecOps.cxx -cxxmodule -s /home/jun/dev/root/Build/lib/libROOTVecOps.so -m Core.pcm -excludePath /home/jun/dev/root -excludePath /home/jun/dev/root/Build/ginclude -excludePath /home/jun/dev/root/Build/externals -excludePath /home/jun/dev/root/Build/builtins -writeEmptyRootPCM -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace '",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:1946,usability,error,error,1946," -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/home/jun/opt/clang/lib/clang/16.0.0/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2144,usability,error,error,2144,"/usr/include -I/home/jun/dev/root/Build/include -I/home/jun/dev/root/math/vecops/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:2336,usability,error,error,2336,"se/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3371,usability,Error,Error,3371,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:3580,usability,stop,stopped,3580,"v/root/core/base/inc -I/home/jun/dev/root/Build/ginclude ROOT/RVec.hxx /home/jun/dev/root/math/vecops/inc/LinkDef.h. > In file included from input_line_10:3:. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:39: error: no member named 'numeric_limits' in namespace 'std'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ~~~~~^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:54: error: unexpected type name 'Size_T': expected expression. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^. > /home/jun/dev/root/Build/include/ROOT/RVec.hxx:135:61: error: no matching function for call to 'max'. > size_t SizeTypeMax() { return std::numeric_limits<Size_T>::max(); }. > ^~~~~. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:407:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(const _Tp&, const _Tp&);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/algorithmfwd.h:412:5: note: candidate function template not viable: requires 3 arguments, but 0 were provided. > max(const _Tp&, const _Tp&, _Compare);. > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3461:5: note: candidate function template not viable: requires single argument '__l', but no arguments were provided. > max(initializer_list<_Tp> __l). > ^. > /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algo.h:3467:5: note: candidate function template not viable: requires 2 arguments, but 0 were provided. > max(initializer_list<_Tp> __l, _Compare __comp). > ^. > Error: /home/jun/dev/root/Build/bin/rootcling: compilation failure (/home/jun/dev/root/Build/lib/libROOTVecOps578190a973_dictUmbrella.h). > [40/1526] Generating G__Hist.cxx, ../../lib/Hist.pcm. > ninja: build stopped: subcommand failed. > ```. This is actually a different, unrelated problem. Should be fixed by https://github.com/root-project/root/pull/11152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:233,availability,sli,slicing,233,"> The range checks of that new warning are also known bad for some cases, not sure if that is one of them... In this case it ended being relevant as indeed the wrong enum type was being used and it could (theoretically) have lead to slicing the value. > Bit-wise combinations of enum values are not enum values themselves... However, in this case, they are ""semantically"" part of the enums values. > However, as said before, the type of fCase is an integer anyway,. That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:358,interoperability,semant,semantically,358,"> The range checks of that new warning are also known bad for some cases, not sure if that is one of them... In this case it ended being relevant as indeed the wrong enum type was being used and it could (theoretically) have lead to slicing the value. > Bit-wise combinations of enum values are not enum values themselves... However, in this case, they are ""semantically"" part of the enums values. > However, as said before, the type of fCase is an integer anyway,. That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:233,reliability,sli,slicing,233,"> The range checks of that new warning are also known bad for some cases, not sure if that is one of them... In this case it ended being relevant as indeed the wrong enum type was being used and it could (theoretically) have lead to slicing the value. > Bit-wise combinations of enum values are not enum values themselves... However, in this case, they are ""semantically"" part of the enums values. > However, as said before, the type of fCase is an integer anyway,. That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:479,safety,prevent,prevent,479,"> The range checks of that new warning are also known bad for some cases, not sure if that is one of them... In this case it ended being relevant as indeed the wrong enum type was being used and it could (theoretically) have lead to slicing the value. > Bit-wise combinations of enum values are not enum values themselves... However, in this case, they are ""semantically"" part of the enums values. > However, as said before, the type of fCase is an integer anyway,. That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:501,safety,compl,complaining,501,"> The range checks of that new warning are also known bad for some cases, not sure if that is one of them... In this case it ended being relevant as indeed the wrong enum type was being used and it could (theoretically) have lead to slicing the value. > Bit-wise combinations of enum values are not enum values themselves... However, in this case, they are ""semantically"" part of the enums values. > However, as said before, the type of fCase is an integer anyway,. That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:479,security,preven,prevent,479,"> The range checks of that new warning are also known bad for some cases, not sure if that is one of them... In this case it ended being relevant as indeed the wrong enum type was being used and it could (theoretically) have lead to slicing the value. > Bit-wise combinations of enum values are not enum values themselves... However, in this case, they are ""semantically"" part of the enums values. > However, as said before, the type of fCase is an integer anyway,. That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:501,security,compl,complaining,501,"> The range checks of that new warning are also known bad for some cases, not sure if that is one of them... In this case it ended being relevant as indeed the wrong enum type was being used and it could (theoretically) have lead to slicing the value. > Bit-wise combinations of enum values are not enum values themselves... However, in this case, they are ""semantically"" part of the enums values. > However, as said before, the type of fCase is an integer anyway,. That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:114,interoperability,semant,semantically,114,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:177,interoperability,semant,semantically,177,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:154,reliability,Doe,Doesn,154,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:411,safety,prevent,prevent,411,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:433,safety,compl,complaining,433,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:594,safety,compl,complains,594,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:411,security,preven,prevent,411,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:433,security,compl,complaining,433,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:594,security,compl,complains,594,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:287,testability,understand,understand,287,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:255,usability,behavi,behavior,255,"> > Bit-wise combinations of enum values are not enum values themselves... > . > However, in this case, they are ""semantically"" part of the enums values. Doesn't matter what we semantically want them to be. For the compiler they aren't, so it's undefined behavior (at least that's how I understand the entire discussion). > > However, as said before, the type of fCase is an integer anyway,. > . > That did not prevent Coverity from complaining that some of the case value where from an enum and some where numerical value (that it assumed were unrelated). I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now, and it seems you don't disagree with this point, do you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:162,deployability,updat,update,162,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:177,deployability,log,log,177,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:39,safety,compl,complains,39,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:162,safety,updat,update,162,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:177,safety,log,log,177,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:39,security,compl,complains,39,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:162,security,updat,update,162,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:177,security,log,log,177,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:177,testability,log,log,177,> I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:170,deployability,updat,update,170,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:185,deployability,log,log,185,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:41,safety,compl,complains,41,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:170,safety,updat,update,170,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:185,safety,log,log,185,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:41,security,compl,complains,41,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:170,security,updat,update,170,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:185,security,log,log,185,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:185,testability,log,log,185,"> > I don't care what Coverity thinks or complains about. I'm arguing that having integer constants is more correct than what we do right now. > . > Fair enough. Can you update the git log to reflect that the 'reversion' (instead of tweak) of the previous commit is intentional (and needed). Done. I've also mentioned the ambiguity between `EProperty` and `::EProperty`, should we ever come across this code again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:55,interoperability,format,format,55,"> Thanks, that looks good but maybe we can apply clang-format? If I run `git-clang-format HEAD^`, the result is. ```diff. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index a2acf0b8d0..9979884dae 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,14 +389,10 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case kBIT_ISSTRING:. - DOLOOP(i->read_std_string(b));. - case kIsPointer | kIsClass:. - DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case kIsPointer | kBIT_ISSTRING:. - DOLOOP(i->read_std_string_pointer(b));. - case kIsPointer | kBIT_ISTSTRING | kIsClass:. - DOLOOP(i->read_tstring_pointer(vsn3, b));. + case kBIT_ISSTRING: DOLOOP(i->read_std_string(b));. + case kIsPointer | kIsClass: DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. + case kIsPointer | kBIT_ISSTRING: DOLOOP(i->read_std_string_pointer(b));. + case kIsPointer | kBIT_ISTSTRING | kIsClass: DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. break;. @@ -864,18 +860,10 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case kBIT_ISSTRING:. - i->read_std_string(b);. - break;. - case kIsPointer | kIsClass:. - i->set(b.ReadObjectAny(v->fType));. - break;. - case kIsPointer | kBIT_ISSTRING:. - i->read_std_string_pointer(b);. - break;. - case kIsPointer | kBIT_ISTSTRING | kIsClass:. - i->read_tstring_pointer(vsn3, b);. - break;. + case kBIT_ISSTRING: i->read_std_string(b); break;. + case kIsPointer | kIsClass: i->set(b.ReadObjectAny(v->fType)); break;. + case kIsPointer | kBIT_ISSTRING: i->read_std_string_pointer(b); break;. + case kIsPointer | kBIT_ISTSTRING | kIsClass: i->read_tstring_pointer(vsn3, b); break;. }. v = fVal;. addr += fValOffset;. ```. which I find *much* worse to re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:83,interoperability,format,format,83,"> Thanks, that looks good but maybe we can apply clang-format? If I run `git-clang-format HEAD^`, the result is. ```diff. diff --git a/io/io/src/TGenCollectionStreamer.cxx b/io/io/src/TGenCollectionStreamer.cxx. index a2acf0b8d0..9979884dae 100644. --- a/io/io/src/TGenCollectionStreamer.cxx. +++ b/io/io/src/TGenCollectionStreamer.cxx. @@ -389,14 +389,10 @@ void TGenCollectionStreamer::ReadObjects(int nElements, TBuffer &b, const TClass. switch (fVal->fCase) {. case kIsClass:. DOLOOP(b.StreamObject(i, fVal->fType, onFileValClass ));. - case kBIT_ISSTRING:. - DOLOOP(i->read_std_string(b));. - case kIsPointer | kIsClass:. - DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. - case kIsPointer | kBIT_ISSTRING:. - DOLOOP(i->read_std_string_pointer(b));. - case kIsPointer | kBIT_ISTSTRING | kIsClass:. - DOLOOP(i->read_tstring_pointer(vsn3, b));. + case kBIT_ISSTRING: DOLOOP(i->read_std_string(b));. + case kIsPointer | kIsClass: DOLOOP(i->set(b.ReadObjectAny(fVal->fType)));. + case kIsPointer | kBIT_ISSTRING: DOLOOP(i->read_std_string_pointer(b));. + case kIsPointer | kBIT_ISTSTRING | kIsClass: DOLOOP(i->read_tstring_pointer(vsn3, b));. }. #undef DOLOOP. break;. @@ -864,18 +860,10 @@ void TGenCollectionStreamer::ReadMap(int nElements, TBuffer &b, const TClass *on. case kIsClass:. b.StreamObject(i, v->fType);. break;. - case kBIT_ISSTRING:. - i->read_std_string(b);. - break;. - case kIsPointer | kIsClass:. - i->set(b.ReadObjectAny(v->fType));. - break;. - case kIsPointer | kBIT_ISSTRING:. - i->read_std_string_pointer(b);. - break;. - case kIsPointer | kBIT_ISTSTRING | kIsClass:. - i->read_tstring_pointer(vsn3, b);. - break;. + case kBIT_ISSTRING: i->read_std_string(b); break;. + case kIsPointer | kIsClass: i->set(b.ReadObjectAny(v->fType)); break;. + case kIsPointer | kBIT_ISSTRING: i->read_std_string_pointer(b); break;. + case kIsPointer | kBIT_ISTSTRING | kIsClass: i->read_tstring_pointer(vsn3, b); break;. }. v = fVal;. addr += fValOffset;. ```. which I find *much* worse to re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:69,interoperability,format,formatted,69,> which I find much worse to read... I agree ... let's keep the code formatted as is.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11149:102,safety,review,review,102,"rebased to fix issues with xrootd, but the only new commits are the last 3, which address some of the review comments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:102,testability,review,review,102,"rebased to fix issues with xrootd, but the only new commits are the last 3, which address some of the review comments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11151:38,integrability,buffer,buffer,38,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:137,integrability,buffer,buffer,137,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:616,integrability,interfac,interface,616,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:616,interoperability,interfac,interface,616,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:26,modifiability,reu,reusing,26,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:616,modifiability,interfac,interface,616,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:111,performance,memor,memory,111,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:15,safety,review,review,15,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:15,testability,review,review,15,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:111,usability,memor,memory,111,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks! By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11155:19,safety,review,review,19,"Nice work, @Eug9! (review comments coming soon). :slightly_smiling_face: . I hope that you enjoyed your internship at CERN!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11155
https://github.com/root-project/root/pull/11155:19,testability,review,review,19,"Nice work, @Eug9! (review comments coming soon). :slightly_smiling_face: . I hope that you enjoyed your internship at CERN!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11155
https://github.com/root-project/root/pull/11157:33,energy efficiency,core,core,33,@hahnjo which of the variable in core/io were you concerned about?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:21,modifiability,variab,variable,21,@hahnjo which of the variable in core/io were you concerned about?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:50,modifiability,concern,concerned,50,@hahnjo which of the variable in core/io were you concerned about?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:50,testability,concern,concerned,50,@hahnjo which of the variable in core/io were you concerned about?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:35,energy efficiency,core,core,35,"> @hahnjo which of the variable in core/io were you concerned about? The ones you commented on, at least these instances felt odd...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:23,modifiability,variab,variable,23,"> @hahnjo which of the variable in core/io were you concerned about? The ones you commented on, at least these instances felt odd...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:52,modifiability,concern,concerned,52,"> @hahnjo which of the variable in core/io were you concerned about? The ones you commented on, at least these instances felt odd...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:52,testability,concern,concerned,52,"> @hahnjo which of the variable in core/io were you concerned about? The ones you commented on, at least these instances felt odd...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11158:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11158
https://github.com/root-project/root/issues/11160:42,availability,restor,restored,42,"Hi @alusiani, thanks for reporting. We've restored the original xrootd archive on the server, so the hash should again be valid and the build should succeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:136,deployability,build,build,136,"Hi @alusiani, thanks for reporting. We've restored the original xrootd archive on the server, so the hash should again be valid and the build should succeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:42,reliability,restor,restored,42,"Hi @alusiani, thanks for reporting. We've restored the original xrootd archive on the server, so the hash should again be valid and the build should succeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:122,safety,valid,valid,122,"Hi @alusiani, thanks for reporting. We've restored the original xrootd archive on the server, so the hash should again be valid and the build should succeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:101,security,hash,hash,101,"Hi @alusiani, thanks for reporting. We've restored the original xrootd archive on the server, so the hash should again be valid and the build should succeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/pull/11161:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11161
https://github.com/root-project/root/pull/11163:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:178,availability,servic,services,178,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:371,availability,servic,services,371,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:608,availability,servic,services,608,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:2,deployability,Build,Build,2,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:8,deployability,fail,failed,8,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:133,deployability,build,build,133,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:178,deployability,servic,services,178,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:230,deployability,build,build,230,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:262,deployability,Fail,Failing,262,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:371,deployability,servic,services,371,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:423,deployability,build,build,423,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:608,deployability,servic,services,608,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:660,deployability,build,build,660,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:178,integrability,servic,services,178,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:371,integrability,servic,services,371,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:608,integrability,servic,services,608,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:178,modifiability,servic,services,178,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:371,modifiability,servic,services,371,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:608,modifiability,servic,services,608,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:23,performance,perform,performance-,23,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:8,reliability,fail,failed,8,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:262,reliability,Fail,Failing,262,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:270,safety,test,tests,270,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:436,safety,test,testReport,436,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:673,safety,test,testReport,673,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:270,testability,test,tests,270,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:436,testability,test,testReport,436,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:673,testability,test,testReport,673,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11163:23,usability,perform,performance-,23,"> Build failed on ROOT-performance-centos8-multicore/cxx17. > Running on olbdw-01.cern.ch:/data/sftnight/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/console). >. > ### Failing tests:. > . > * [projectroot.runtutorials.tutorial_roostats_rs701_BayesianCalculator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs701_BayesianCalculator/). > . > * [projectroot.runtutorials.tutorial_roostats_rs401c_FeldmanCousins](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151655/testReport/projectroot/runtutorials/tutorial_roostats_rs401c_FeldmanCousins/). This is the ""known"" problem about `llvm::identify_magic`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11163
https://github.com/root-project/root/pull/11166:130,availability,servic,services,130,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:211,availability,Error,Errors,211,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:329,availability,error,error,329,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:905,availability,error,error,905,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1532,availability,error,error,1532,"ibRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2037,availability,error,error,2037,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2461,availability,error,error,2461,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2,deployability,Build,Build,2,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:8,deployability,fail,failed,8,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:54,deployability,build,build,54,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:88,deployability,build,build,88,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:130,deployability,servic,services,130,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:182,deployability,build,build,182,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:258,deployability,build,build,258,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:292,deployability,build,build,292,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:298,deployability,build,build,298,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:371,deployability,build,build,371,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:405,deployability,build,build,405,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:411,deployability,build,build,411,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:484,deployability,build,build,484,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:518,deployability,build,build,518,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:524,deployability,build,build,524,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:555,deployability,Build,Building,555,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:579,deployability,build,build,579,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:613,deployability,build,build,613,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:673,deployability,build,build,673,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:721,deployability,build,build,721,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:755,deployability,build,build,755,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:761,deployability,build,build,761,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:798,deployability,build,build,798,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:832,deployability,build,build,832,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:838,deployability,build,build,838,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1393,deployability,build,build,1393,"requests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1427,deployability,build,build,1427,"g\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1433,deployability,build,build,1433,"Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1898,deployability,build,build,1898,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1932,deployability,build,build,1932,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1938,deployability,build,build,1938,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2297,deployability,build,build,2297,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2331,deployability,build,build,2331,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2337,deployability,build,build,2337,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2390,deployability,build,build,2390,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2424,deployability,build,build,2424,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2430,deployability,build,build,2430,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2503,deployability,build,build,2503,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2537,deployability,build,build,2537,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2543,deployability,build,build,2543,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:417,energy efficiency,core,core,417,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:624,energy efficiency,core,core,624,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1439,energy efficiency,core,core,1439,".vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1944,energy efficiency,core,core,1944,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2343,energy efficiency,core,core,2343,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2549,energy efficiency,core,core,2549,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:130,integrability,servic,services,130,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:948,integrability,pub,public,948,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1176,integrability,pub,public,1176,"ts-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1575,integrability,pub,public,1575,"/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2080,integrability,pub,public,2080,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1229,interoperability,plug,plugin,1229,"2-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1329,interoperability,plug,plugin,1329,"or LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:130,modifiability,servic,services,130,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:211,performance,Error,Errors,211,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:329,performance,error,error,329,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:905,performance,error,error,905,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1532,performance,error,error,1532,"ibRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1613,performance,Multiplex,MultiplexExternalRMVSource,1613,"re/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1787,performance,Multiplex,MultiplexExternalRMVSource,1787,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2037,performance,error,error,2037,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2118,performance,Multiplex,MultiplexExternalRMVSource,2118,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2235,performance,Multiplex,MultiplexExternalRMVSource,2235,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2461,performance,error,error,2461,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:8,reliability,fail,failed,8,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:211,safety,Error,Errors,211,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:329,safety,error,error,329,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:905,safety,error,error,905,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1532,safety,error,error,1532,"ibRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2037,safety,error,error,2037,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2461,safety,error,error,2461,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:211,usability,Error,Errors,211,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:329,usability,error,error,329,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:564,usability,Custom,Custom,564,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:905,usability,error,error,905,"> Build failed on windows10/cxx14. Running on null:C:\build\workspace\root-pullrequests-build [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151667/console). > ### Errors:. > . > * [2022-08-10T11:41:30.438Z] C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. ```. 14:41:28 RIO.vcxproj -> C:\build\workspace\root-pullrequests-build\build\bin\libRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:1532,usability,error,error,1532,"ibRIO.dll. 14:41:28 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/metacling/src/CMakeLists.txt. 14:41:28 Auto build dll exports. 14:41:30 Creating library C:/build/workspace/root-pullrequests-build/build/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2037,usability,error,error,2037,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2461,usability,error,error,2461,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:2593,usability,Command,Command,2593,"/lib/libCling.lib and object C:/build/workspace/root-pullrequests-build/build/lib/libCling.exp. 14:41:30 cladPlugin.lib(ClangPlugin.obj) : error LNK2019: unresolved external symbol ""public: struct clad::DerivativeAndOverload __thiscall clad::DerivativeBuilder::Derive(class clad::DiffRequest const &)"" (?Derive@DerivativeBuilder@clad@@QAE?AUDerivativeAndOverload@2@ABVDiffRequest@2@@Z) referenced in function ""public: class clang::FunctionDecl * __thiscall clad::plugin::CladPlugin::ProcessDiffRequest(struct clad::DiffRequest &)"" (?ProcessDiffRequest@CladPlugin@plugin@clad@@QAEPAVFunctionDecl@clang@@AAUDiffRequest@3@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActAfterParsingDiffArgs(struct clad::DiffRequest const &,class llvm::SmallVector<class clang::ValueDecl const *,16> &)"" (?ActAfterParsingDiffArgs@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@AAV?$SmallVector@PBVValueDecl@clang@@$0BA@@llvm@@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 cladDifferentiator.lib(ReverseModeVisitor.obj) : error LNK2001: unresolved external symbol ""public: virtual void __thiscall clad::MultiplexExternalRMVSource::ActOnStartOfDerivedFnBody(struct clad::DiffRequest const &)"" (?ActOnStartOfDerivedFnBody@MultiplexExternalRMVSource@clad@@UAEXABUDiffRequest@2@@Z) [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 C:\build\workspace\root-pullrequests-build\build\bin\libCling.dll : fatal error LNK1120: 3 unresolved externals [C:\build\workspace\root-pullrequests-build\build\core\metacling\src\Cling.vcxproj]. 14:41:30 Command exited with the value: 1. ```. Hi @bellenot, do you have an idea what needs to be fixed here? Is it that I need to add something to the list of the libCling exports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:12,deployability,build,build,12,"@phsft-bot, build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:29,deployability,releas,release,29,Seems like we are good for a release. Thanks again @bellenot for the windows patch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:77,deployability,patch,patch,77,Seems like we are good for a release. Thanks again @bellenot for the windows patch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:77,safety,patch,patch,77,Seems like we are good for a release. Thanks again @bellenot for the windows patch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11166:77,security,patch,patch,77,Seems like we are good for a release. Thanks again @bellenot for the windows patch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11166
https://github.com/root-project/root/pull/11167:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11167
https://github.com/root-project/root/pull/11171:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:430,deployability,manag,manage,430,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:430,energy efficiency,manag,manage,430,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:53,integrability,messag,messages,53,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:170,integrability,messag,message,170,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:327,integrability,messag,message,327,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:400,integrability,messag,message,400,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:467,integrability,messag,message,467,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:53,interoperability,messag,messages,53,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:170,interoperability,messag,message,170,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:327,interoperability,messag,message,327,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:400,interoperability,messag,message,400,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:467,interoperability,messag,message,467,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:430,safety,manag,manage,430,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 . You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will. You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11171:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11171
https://github.com/root-project/root/pull/11172:42,performance,memor,memory,42,"Thanks, `std::max_align_t` is indeed what memory code should align for (plus it gets rid of the split between 32- and 64-bit code paths).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11172
https://github.com/root-project/root/pull/11172:42,usability,memor,memory,42,"Thanks, `std::max_align_t` is indeed what memory code should align for (plus it gets rid of the split between 32- and 64-bit code paths).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11172
https://github.com/root-project/root/pull/11172:0,availability,Failur,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11172
https://github.com/root-project/root/pull/11172:0,deployability,Fail,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11172
https://github.com/root-project/root/pull/11172:0,performance,Failur,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11172
https://github.com/root-project/root/pull/11172:0,reliability,Fail,Failures,0,Failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11172
https://github.com/root-project/root/issues/11173:104,availability,consist,consistency,104,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:605,availability,sli,slightly,605,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:797,availability,consist,consistent,797,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:389,energy efficiency,current,current,389,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:740,energy efficiency,current,currently,740,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:85,integrability,filter,filter,85,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:605,reliability,sli,slightly,605,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:104,usability,consist,consistency,104,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:438,usability,user,user-images,438,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:639,usability,user,user-images,639,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:797,usability,consist,consistent,797,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:824,usability,clear,clear,824,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:. ```. <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>. ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:. ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:. ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/issues/11173:46,usability,user,user-defined,46,2. sounds good since action names can also be user-defined sometimes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11173
https://github.com/root-project/root/pull/11174:63,availability,error,error,63,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:7,deployability,manag,managed,7,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1225,deployability,version,version,1225,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:7,energy efficiency,manag,managed,7,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1225,integrability,version,version,1225,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1225,modifiability,version,version,1225,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:63,performance,error,error,63,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:179,performance,Memor,MemoryBuffer,179,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:435,performance,Memor,MemoryBuffer,435,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:552,performance,Memor,MemoryBuffer,552,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:767,performance,Memor,MemoryBuffer,767,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:7,safety,manag,managed,7,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:63,safety,error,error,63,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1035,safety,input,input,1035,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1101,safety,input,input,1101,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1324,safety,avoid,avoid,1324,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:63,usability,error,error,63,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:171,usability,Support,Support,171,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:179,usability,Memor,MemoryBuffer,179,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:435,usability,Memor,MemoryBuffer,435,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:552,usability,Memor,MemoryBuffer,552,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:767,usability,Memor,MemoryBuffer,767,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1035,usability,input,input,1035,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:1101,usability,input,input,1101,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:. ```c++. #include <llvm/ADT/Twine.h>. #include <llvm/BinaryFormat/Magic.h>. #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {. if (argc < 2) {. std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;. return 1;. }. llvm::Twine Path(argv[1]);. auto FileOrError =. #ifdef FIXED. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/true,. /*IsVolatile=*/true);. #else. llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,. /*RequiresNullTerminator=*/false);. #endif. if (!FileOrError) {. std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;. return 1;. }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);. sleep(5);. llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;. }. ```. Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:164,performance,Memor,MemoryBuffer,164,"> For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:164,usability,Memor,MemoryBuffer,164,"> For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:172,performance,Memor,MemoryBuffer,172,"> > For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. > . > what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)? It's plain C++ and we can guarantee that it's not using `mmap`. For `llvm::MemoryBuffer::getFile` I had to look at the source code because I would have argued that `IsVolatile=true` is enough, but it also requires `RequiresNullTerminator=true` to read in the file contents immediately. Additionally, `getFile` would try to read in the entire file, which we don't need here (and the reason why `mmap` is so efficient).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:296,performance,Memor,MemoryBuffer,296,"> > For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. > . > what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)? It's plain C++ and we can guarantee that it's not using `mmap`. For `llvm::MemoryBuffer::getFile` I had to look at the source code because I would have argued that `IsVolatile=true` is enough, but it also requires `RequiresNullTerminator=true` to read in the file contents immediately. Additionally, `getFile` would try to read in the entire file, which we don't need here (and the reason why `mmap` is so efficient).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:485,performance,content,contents,485,"> > For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. > . > what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)? It's plain C++ and we can guarantee that it's not using `mmap`. For `llvm::MemoryBuffer::getFile` I had to look at the source code because I would have argued that `IsVolatile=true` is enough, but it also requires `RequiresNullTerminator=true` to read in the file contents immediately. Additionally, `getFile` would try to read in the entire file, which we don't need here (and the reason why `mmap` is so efficient).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:172,usability,Memor,MemoryBuffer,172,"> > For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. > . > what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)? It's plain C++ and we can guarantee that it's not using `mmap`. For `llvm::MemoryBuffer::getFile` I had to look at the source code because I would have argued that `IsVolatile=true` is enough, but it also requires `RequiresNullTerminator=true` to read in the file contents immediately. Additionally, `getFile` would try to read in the entire file, which we don't need here (and the reason why `mmap` is so efficient).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:296,usability,Memor,MemoryBuffer,296,"> > For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. > . > what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)? It's plain C++ and we can guarantee that it's not using `mmap`. For `llvm::MemoryBuffer::getFile` I had to look at the source code because I would have argued that `IsVolatile=true` is enough, but it also requires `RequiresNullTerminator=true` to read in the file contents immediately. Additionally, `getFile` would try to read in the entire file, which we don't need here (and the reason why `mmap` is so efficient).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:627,usability,efficien,efficient,627,"> > For Cling, I decided to just go with a std::ifstream to read the first 128 bytes. > . > what is the advantage over the solution in the reproducer you have (using llvm::MemoryBuffer::getFile with different arguments)? It's plain C++ and we can guarantee that it's not using `mmap`. For `llvm::MemoryBuffer::getFile` I had to look at the source code because I would have argued that `IsVolatile=true` is enough, but it also requires `RequiresNullTerminator=true` to read in the file contents immediately. Additionally, `getFile` would try to read in the entire file, which we don't need here (and the reason why `mmap` is so efficient).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:449,deployability,upgrad,upgrade,449,"> @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:449,modifiability,upgrad,upgrade,449,"> @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:202,performance,concurren,concurrently,202,"> @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:274,safety,detect,detect,274,"> @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:193,security,modif,modified,193,"> @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:274,security,detect,detect,274,"> @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:228,testability,understand,understand,228,"> @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:457,deployability,upgrad,upgrade,457,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:638,deployability,infrastructur,infrastructure,638,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:457,modifiability,upgrad,upgrade,457,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:210,performance,concurren,concurrently,210,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:282,safety,detect,detect,282,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:484,safety,valid,valid,484,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:201,security,modif,modified,201,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:282,security,detect,detect,282,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:236,testability,understand,understand,236,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:517,testability,plan,planning,517,"> > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > . > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:469,deployability,upgrad,upgrade,469,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:656,deployability,infrastructur,infrastructure,656,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:469,modifiability,upgrad,upgrade,469,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:222,performance,concurren,concurrently,222,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:294,safety,detect,detect,294,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:502,safety,valid,valid,502,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:213,security,modif,modified,213,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:294,security,detect,detect,294,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:248,testability,understand,understand,248,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:535,testability,plan,planning,535,"> > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > . > > . > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > . > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. Ok, I've added a `TODO` comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:477,deployability,upgrad,upgrade,477,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:674,deployability,infrastructur,infrastructure,674,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:477,modifiability,upgrad,upgrade,477,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:230,performance,concurren,concurrently,230,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:302,safety,detect,detect,302,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:520,safety,valid,valid,520,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:221,security,modif,modified,221,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:302,security,detect,detect,302,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:256,testability,understand,understand,256,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:553,testability,plan,planning,553,"> > > > @hahnjo, this looks good to me but can we not fix the `llvm::identify_magic` as well or instead? > > > . > > > . > > > The question is whether `llvm::identify_magic` should be prepared to deal with files that are modified concurrently. As far as I understand, Cling uses this code path to auto-detect libraries and distinguish them from random binary files. If the answer is yes, then I can try to fix `llvm::identify_magic` upstream so we get it with some future LLVM upgrade. > > . > > . > > I think this is a valid use-case. Moreover, we are planning to upstream that functionality from cling which suggests which library is needed on a missing symbol to the jit infrastructure. > . > Ok, I've added a `TODO` comment. Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:242,deployability,upgrad,upgrade,242,"> > Ok, I've added a `TODO` comment. > . > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:309,deployability,build,building,309,"> > Ok, I've added a `TODO` comment. > . > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:290,interoperability,distribut,distributions,290,"> > Ok, I've added a `TODO` comment. > . > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:242,modifiability,upgrad,upgrade,242,"> > Ok, I've added a `TODO` comment. > . > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:281,safety,prevent,prevents,281,"> > Ok, I've added a `TODO` comment. > . > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:281,security,preven,prevents,281,"> > Ok, I've added a `TODO` comment. > . > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:657,usability,prefer,prefer,657,"> > Ok, I've added a `TODO` comment. > . > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:260,deployability,upgrad,upgrade,260,"> > > Ok, I've added a `TODO` comment. > > . > > . > > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. > . > We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. > . > I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder. Thanks for the clarification. Let's keep it as it is now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:327,deployability,build,building,327,"> > > Ok, I've added a `TODO` comment. > > . > > . > > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. > . > We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. > . > I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder. Thanks for the clarification. Let's keep it as it is now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:308,interoperability,distribut,distributions,308,"> > > Ok, I've added a `TODO` comment. > > . > > . > > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. > . > We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. > . > I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder. Thanks for the clarification. Let's keep it as it is now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:260,modifiability,upgrad,upgrade,260,"> > > Ok, I've added a `TODO` comment. > > . > > . > > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. > . > We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. > . > I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder. Thanks for the clarification. Let's keep it as it is now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:299,safety,prevent,prevents,299,"> > > Ok, I've added a `TODO` comment. > > . > > . > > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. > . > We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. > . > I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder. Thanks for the clarification. Let's keep it as it is now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:299,security,preven,prevents,299,"> > > Ok, I've added a `TODO` comment. > > . > > . > > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. > . > We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. > . > I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder. Thanks for the clarification. Let's keep it as it is now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/pull/11174:681,usability,prefer,prefer,681,"> > > Ok, I've added a `TODO` comment. > > . > > . > > Note that we can fix it now, and backport the change. Otherwise I fear the `TODO` will just stay forever there. > . > We could, but I don't think this is the right approach: We're in the middle of an LLVM upgrade already and any change to LLVM prevents distributions from building against their vanilla LLVM libraries in the future. Moreover, I'm still not 100% convinced that it should be the original `llvm::identify_magic` that needs to handle this situation. In principle this would mean that `mmap` must never be used in LLVM since any file could randomly be truncated. > . > I can remove the `TODO` comment again if you prefer, I only added it because it sounded like you want a reminder. Thanks for the clarification. Let's keep it as it is now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11174
https://github.com/root-project/root/issues/11177:41,reliability,alert,alert,41,"Closing this issue for now, it's a false alert because a forum post led me to believe that the results should be identical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11177
https://github.com/root-project/root/issues/11177:41,safety,aler,alert,41,"Closing this issue for now, it's a false alert because a forum post led me to believe that the results should be identical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11177
https://github.com/root-project/root/issues/11177:113,security,ident,identical,113,"Closing this issue for now, it's a false alert because a forum post led me to believe that the results should be identical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11177
https://github.com/root-project/root/issues/11179:4,deployability,upgrad,upgrade,4,"The upgrade to oneTBB is now done, thanks to @dpiparo:. * https://github.com/root-project/root/pull/13724.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11179
https://github.com/root-project/root/issues/11179:4,modifiability,upgrad,upgrade,4,"The upgrade to oneTBB is now done, thanks to @dpiparo:. * https://github.com/root-project/root/pull/13724.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11179
https://github.com/root-project/root/pull/11180:39,availability,failur,failures,39,"@osschar You can merge PR if you want, failures has nothing to do with your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11180
https://github.com/root-project/root/pull/11180:39,deployability,fail,failures,39,"@osschar You can merge PR if you want, failures has nothing to do with your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11180
https://github.com/root-project/root/pull/11180:39,performance,failur,failures,39,"@osschar You can merge PR if you want, failures has nothing to do with your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11180
https://github.com/root-project/root/pull/11180:39,reliability,fail,failures,39,"@osschar You can merge PR if you want, failures has nothing to do with your changes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11180
https://github.com/root-project/root/pull/11180:8,security,authoriz,authorized,8,I'm not authorized ... can you please do it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11180
https://github.com/root-project/root/pull/11181:105,deployability,observ,observables,105,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:707,deployability,compos,composite,707,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:798,energy efficiency,model,model,798,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:805,energy efficiency,model,model,805,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:814,energy efficiency,model,model,814,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:934,energy efficiency,model,model,934,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:1061,energy efficiency,model,model,1061,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:1129,energy efficiency,model,model,1129,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:707,modifiability,compos,composite,707,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:224,security,sign,signal,224,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:755,security,sign,signal,755,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:798,security,model,model,798,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:805,security,model,model,805,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:814,security,model,model,814,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:934,security,model,model,934,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:1061,security,model,model,1061,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:1129,security,model,model,1129,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:105,testability,observ,observables,105,"The problem that is underlying the remaining differences can be reproduced with this:. ```c++. // Create observables. RooRealVar x(""x"", ""x"", -5, 5);. RooRealVar y(""y"", ""y"", -5, 5);. RooRealVar z(""z"", ""z"", -5, 5);. // Create signal pdf gauss(x)*gauss(y)*gauss(z). RooGaussian gx(""gx"", ""gx"", x, 0.0, 1.0);. RooGaussian gy(""gy"", ""gy"", y, 0.0, 1.0);. RooGaussian gz(""gz"", ""gz"", z, 0.0, 1.0);. RooProdPdf sig(""sig"", ""sig"", RooArgSet(gx, gy, gz));. // Create background pdf poly(x)*poly(y)*poly(z). RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));. RooPolynomial py(""py"", ""py"", y, RooArgSet(0.1, -0.004));. RooPolynomial pz(""pz"", ""pz"", z);. RooProdPdf bkg(""bkg"", ""bkg"", RooArgSet(px, py, pz));. // Create composite pdf sig+bkg. RooRealVar fsig(""fsig"", ""signal fraction"", 0.1, 0., 1.);. RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);. RooArgSet vars(x, y, z);. // This is somehow not respected in the compiled graph. model.fixAddCoefNormalization(vars);. //integ->fixAddCoefNormalization(vars);. auto model2 = RooFit::Detail::compileForNormSet(model, {x});. model2->recursiveRedirectServers(vars);. std::cout << model.getVal({x}) << std::endl;. std::cout << model2->getVal(x) << std::endl;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11181:35,reliability,doe,doesn,35,Closing this PR because it somehow doesn't sync with the branch anymore (maybe a bug in GitHub).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11181
https://github.com/root-project/root/pull/11183:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11183
https://github.com/root-project/root/pull/11185:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11185
https://github.com/root-project/root/issues/11188:165,safety,avoid,avoid,165,"Hi, thanks for reporting! The `RooRealProxy` move constructor makes no sense, that's why it is now explicitly deleted in ROOT master. I have opened a PR in CMSSW to avoid using these deleted function:. https://github.com/cms-sw/cmssw/pull/39066",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11188
https://github.com/root-project/root/issues/11188:88,usability,close,closed,88,"As https://github.com/cms-sw/cmsdist/pull/8020 is now merged, I think this issue can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11188
https://github.com/root-project/root/pull/11189:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11189
https://github.com/root-project/root/issues/11190:996,deployability,build,build-foo,996,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:859,interoperability,share,shared,859,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:894,interoperability,xml,xml,894,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:728,safety,except,exceptions,728,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:176,security,Team,Team,176,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:873,security,ssl,ssl,873,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:605,testability,assert,asserts,605,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:380,usability,help,help,380,"Weird, works for me:. ```. ~ root. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 15 2022, 12:41:54 |. | From heads/df-rename-factories@v6-25-02-2003-g2c2661d55f |. | With c++ (GCC) 12.1.1 20220730 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] #. root [1] #. root [2] #. root [3]. ```. ```. ~ root-config --features. cxx17 asimage asserts builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_xrootd ccache clad dataframe exceptions fftw3 fitsio gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 webgui root7 rpath runtime_cxxmodules shared sqlite ssl spectrum vdt x11 xml xrootd. ```. ```. ~ root-config --cflags. -pthread -std=c++17 -m64 -I/home/blue/ROOT/master/cmake-build-foo/include. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:28,deployability,build,builds,28,I have three different ROOT builds - also with llvm13. All are crashing. Is it has something to do with `-Ddev=ON`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:80,interoperability,specif,specified,80,"> Is it has something to do with -Ddev=ON. Indeed, ROOT crashes when `-Ddev=ON` specified.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/issues/11190:0,availability,Ping,Ping,0,Ping - problem is still there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11190
https://github.com/root-project/root/pull/11193:0,deployability,Depend,Depends,0,Depends on #10850,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11193
https://github.com/root-project/root/pull/11193:0,integrability,Depend,Depends,0,Depends on #10850,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11193
https://github.com/root-project/root/pull/11193:0,modifiability,Depend,Depends,0,Depends on #10850,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11193
https://github.com/root-project/root/pull/11193:0,safety,Depend,Depends,0,Depends on #10850,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11193
https://github.com/root-project/root/pull/11193:0,testability,Depend,Depends,0,Depends on #10850,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11193
https://github.com/root-project/root/pull/11196:50,deployability,API,API,50,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:278,deployability,modul,module,278,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:50,integrability,API,API,50,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:243,integrability,pub,public,243,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:50,interoperability,API,API,50,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:54,interoperability,compatib,compatible,54,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:101,interoperability,bind,bind,101,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:101,modifiability,bind,bind,101,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:278,modifiability,modul,module,278,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:278,safety,modul,module,278,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:145,usability,User,Users,145,"Two issues with this approach:. 1. It's not fully API compatible with the old argument types (cannot bind to references of a different type). 2. Users cannot overwrite the functions anymore; if that's needed, we can make `REveJsonWrapper.hxx` public while keeping it out of the module (?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:155,availability,operat,operations,155,Problem is not only eve7 - where derived classes used in examples. nlohmann/json used in TBufferJSON and planned for usage with TJSONFile. There much more operations used with it. Idea to wait for llvm13 where one fully can avoid forward declarations and use directly `nlohmann::json`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:224,safety,avoid,avoid,224,Problem is not only eve7 - where derived classes used in examples. nlohmann/json used in TBufferJSON and planned for usage with TJSONFile. There much more operations used with it. Idea to wait for llvm13 where one fully can avoid forward declarations and use directly `nlohmann::json`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:105,testability,plan,planned,105,Problem is not only eve7 - where derived classes used in examples. nlohmann/json used in TBufferJSON and planned for usage with TJSONFile. There much more operations used with it. Idea to wait for llvm13 where one fully can avoid forward declarations and use directly `nlohmann::json`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:140,deployability,modul,modules,140,"@linev no, usage of `nlohmann/json` in source / implementation files is completely fine. The *only* problem is with its usage in headers -> modules. Regarding llvm13, I still don't understand; see my comment https://github.com/root-project/root/issues/11130#issuecomment-1216633037",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:140,modifiability,modul,modules,140,"@linev no, usage of `nlohmann/json` in source / implementation files is completely fine. The *only* problem is with its usage in headers -> modules. Regarding llvm13, I still don't understand; see my comment https://github.com/root-project/root/issues/11130#issuecomment-1216633037",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:72,safety,compl,completely,72,"@linev no, usage of `nlohmann/json` in source / implementation files is completely fine. The *only* problem is with its usage in headers -> modules. Regarding llvm13, I still don't understand; see my comment https://github.com/root-project/root/issues/11130#issuecomment-1216633037",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:140,safety,modul,modules,140,"@linev no, usage of `nlohmann/json` in source / implementation files is completely fine. The *only* problem is with its usage in headers -> modules. Regarding llvm13, I still don't understand; see my comment https://github.com/root-project/root/issues/11130#issuecomment-1216633037",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:72,security,compl,completely,72,"@linev no, usage of `nlohmann/json` in source / implementation files is completely fine. The *only* problem is with its usage in headers -> modules. Regarding llvm13, I still don't understand; see my comment https://github.com/root-project/root/issues/11130#issuecomment-1216633037",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:181,testability,understand,understand,181,"@linev no, usage of `nlohmann/json` in source / implementation files is completely fine. The *only* problem is with its usage in headers -> modules. Regarding llvm13, I still don't understand; see my comment https://github.com/root-project/root/issues/11130#issuecomment-1216633037",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:48,deployability,API,APIs,48,Not the right approach as we might want to have APIs that take `nlohmann::json` arguments; https://github.com/root-project/root/issues/11130 provides a fix for the current problems with versions 3.11+,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:186,deployability,version,versions,186,Not the right approach as we might want to have APIs that take `nlohmann::json` arguments; https://github.com/root-project/root/issues/11130 provides a fix for the current problems with versions 3.11+,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:164,energy efficiency,current,current,164,Not the right approach as we might want to have APIs that take `nlohmann::json` arguments; https://github.com/root-project/root/issues/11130 provides a fix for the current problems with versions 3.11+,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:48,integrability,API,APIs,48,Not the right approach as we might want to have APIs that take `nlohmann::json` arguments; https://github.com/root-project/root/issues/11130 provides a fix for the current problems with versions 3.11+,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:186,integrability,version,versions,186,Not the right approach as we might want to have APIs that take `nlohmann::json` arguments; https://github.com/root-project/root/issues/11130 provides a fix for the current problems with versions 3.11+,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:48,interoperability,API,APIs,48,Not the right approach as we might want to have APIs that take `nlohmann::json` arguments; https://github.com/root-project/root/issues/11130 provides a fix for the current problems with versions 3.11+,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11196:186,modifiability,version,versions,186,Not the right approach as we might want to have APIs that take `nlohmann::json` arguments; https://github.com/root-project/root/issues/11130 provides a fix for the current problems with versions 3.11+,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11196
https://github.com/root-project/root/pull/11198:37,modifiability,required chang,required changes,37,"Hello @lmoneta , I have made all the required changes and tested locally , it works fine and all the tests passes. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11198:58,safety,test,tested,58,"Hello @lmoneta , I have made all the required changes and tested locally , it works fine and all the tests passes. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11198:101,safety,test,tests,101,"Hello @lmoneta , I have made all the required changes and tested locally , it works fine and all the tests passes. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11198:58,testability,test,tested,58,"Hello @lmoneta , I have made all the required changes and tested locally , it works fine and all the tests passes. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11198:101,testability,test,tests,101,"Hello @lmoneta , I have made all the required changes and tested locally , it works fine and all the tests passes. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11198:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11198:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11198:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11198
https://github.com/root-project/root/pull/11205:116,deployability,version,version,116,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:178,deployability,build,builds,178,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:116,integrability,version,version,116,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:320,integrability,pub,public,320,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:332,integrability,interfac,interfaces,332,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:63,interoperability,distribut,distributions,63,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:332,interoperability,interfac,interfaces,332,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:116,modifiability,version,version,116,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:259,modifiability,variab,variables,259,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:332,modifiability,interfac,interfaces,332,`json_fwd.hpp` exists since a while and included in many early distributions. . My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:116,deployability,version,version,116,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:184,deployability,build,builds,184,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:469,deployability,version,version,469,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:116,integrability,version,version,116,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:326,integrability,pub,public,326,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:338,integrability,interfac,interfaces,338,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:469,integrability,version,version,469,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:65,interoperability,distribut,distributions,65,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:338,interoperability,interfac,interfaces,338,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:116,modifiability,version,version,116,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:265,modifiability,variab,variables,265,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:338,modifiability,interfac,interfaces,338,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:469,modifiability,version,version,469,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:449,usability,user,users,449,"> `json_fwd.hpp` exists since a while and included in many early distributions. My OpenSUSE has `nlohmann/json.hpp` version 3.10.5 with such forward declaration. > . > Problem is ROOT builds where `nlohmann/json.hpp` can be found only with extra settings for shell variables. In such cases none of its includes can be used in public ROOT interfaces. I know, but we have to do something, and as agreed on Wednesday, we actually *want* to ensure that users have the same version of `nlohmann/json`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:140,deployability,build,build,140,Does this merit a backport into 6.26 branch since it prevents compilation? Just wondering from a packager's point of view keeping an eye on build issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:97,modifiability,pac,packager,97,Does this merit a backport into 6.26 branch since it prevents compilation? Just wondering from a packager's point of view keeping an eye on build issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:0,reliability,Doe,Does,0,Does this merit a backport into 6.26 branch since it prevents compilation? Just wondering from a packager's point of view keeping an eye on build issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:53,safety,prevent,prevents,53,Does this merit a backport into 6.26 branch since it prevents compilation? Just wondering from a packager's point of view keeping an eye on build issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:53,security,preven,prevents,53,Does this merit a backport into 6.26 branch since it prevents compilation? Just wondering from a packager's point of view keeping an eye on build issues.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:146,deployability,releas,released,146,"@wdconinc yes, I already posted https://github.com/root-project/root/pull/11225 (currently waiting for Jenkins to finish before merging). Will be released as 6.26/08 (no date planned yet AFAIK), or you can pick the middle commit yourself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:81,energy efficiency,current,currently,81,"@wdconinc yes, I already posted https://github.com/root-project/root/pull/11225 (currently waiting for Jenkins to finish before merging). Will be released as 6.26/08 (no date planned yet AFAIK), or you can pick the middle commit yourself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11205:175,testability,plan,planned,175,"@wdconinc yes, I already posted https://github.com/root-project/root/pull/11225 (currently waiting for Jenkins to finish before merging). Will be released as 6.26/08 (no date planned yet AFAIK), or you can pick the middle commit yourself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11205
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/default with flags -Dtmva-sofie=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/nortcxxmod.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:324,deployability,version,version,324,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:602,deployability,contain,contains,602,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:255,energy efficiency,load,loading,255,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:509,energy efficiency,load,loading,509,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:324,integrability,version,version,324,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:674,integrability,messag,message,674,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:711,integrability,messag,message,711,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:674,interoperability,messag,message,674,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:711,interoperability,messag,message,711,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:272,modifiability,pac,packages,272,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:324,modifiability,version,version,324,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:526,modifiability,pac,packages,526,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:255,performance,load,loading,255,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:509,performance,load,loading,509,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:897,performance,time,time,897,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:989,performance,time,time,989,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:428,reliability,pra,practically,428,"> There seems to be some problem with the new commit structure. Take for example this commit. > . > [124dfb5](https://github.com/root-project/root/commit/124dfb5bf6ef077134458ef12bf8c6adfef41542). > . > The title is. > . > ```. > [tmva][sofie-gnn] Fix on loading required packages (sonnet, graph_nets) and restricting numpy version. > ```. > . > But the diff is much larger than that. From the github diff I can see that commit practically touches all the files of the PR, not only the ones needed to `fix on loading required packages...`. Please revisit your commit layout and make sure each one only contains atomic changes, for the files touched by what the commit title/message say. I think the full commit message describes the changes for that commit that is a merge of several ones. This is probably the main change. I think it is difficult to describe in a line several things at the same time. If we want atomic commit we need to go back to 50 or more. I would not waste too much time on this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:27,safety,review,review,27,"Thanks @vepadulano for the review, it is then ready to be merged! Thank you @sanjibansg for this big contribution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11208:27,testability,review,review,27,"Thanks @vepadulano for the review, it is then ready to be merged! Thank you @sanjibansg for this big contribution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11208
https://github.com/root-project/root/pull/11209:52,deployability,updat,updated,52,@guitargeek thank you for the comments. . The PR is updated now!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11209
https://github.com/root-project/root/pull/11209:52,safety,updat,updated,52,@guitargeek thank you for the comments. . The PR is updated now!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11209
https://github.com/root-project/root/pull/11209:52,security,updat,updated,52,@guitargeek thank you for the comments. . The PR is updated now!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11209
https://github.com/root-project/root/pull/11211:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11211
https://github.com/root-project/root/pull/11211:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11211
https://github.com/root-project/root/issues/11212:927,deployability,log,logarithmic,927,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:939,deployability,scale,scale,939,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:734,energy efficiency,Draw,Draw,734,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:747,energy efficiency,Draw,Draw,747,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:778,energy efficiency,Draw,Draw,778,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:791,energy efficiency,Draw,Draw,791,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:939,energy efficiency,scale,scale,939,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:939,modifiability,scal,scale,939,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:939,performance,scale,scale,939,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:74,safety,test,testProblem,74,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:927,safety,log,logarithmic,927,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:927,security,log,logarithmic,927,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:74,testability,test,testProblem,74,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/issues/11212:927,testability,log,logarithmic,927,"It has to do with the bin width. See this smaller reproducer: . ```. void testProblem(){. int nb = 26; // 25 is ok. float x2 = 0.005;. float x1 = 0;. auto h1 = new TH1F(""h1"",""h1"",nb,x1,x2);. double xr1 = h1->GetXaxis()->GetBinLowEdge(2);. h1->GetXaxis()->SetNdivisions(5);. h1->GetXaxis()->SetRangeUser(xr1,x2);. h1->SetMaximum(1100);. auto h2 = new TH1F(""h2"",""h2"",nb,x1,x2);. h2->GetXaxis()->SetNdivisions(5);. h2->SetFillColor(1002);. gStyle->SetOptStat(0);. for (int j = 1; j <= nb; j++) {. float w = 200-j;. if (j==1) w = 1000.;. if (j==2) w = 600.;. if (j<3) cout << ""bin # = "" << j << "", value = "" << w << endl;. h2->SetBinContent(j, w );. }. auto c1 = new TCanvas;. c1->Divide(2,1);. c1->SetLogx();. c1->cd(1)->SetLogx();. h1->Draw();. h2->Draw(""same"");. c1->cd(2);. h1->Draw();. h2->Draw(""same"");. }. ```. if the number of bins is 25 the plot is ok, 26 is wrong. I guess there is some rounding issue in the case of the logarithmic scale.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11212
https://github.com/root-project/root/pull/11214:78,deployability,modul,modular,78,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:114,energy efficiency,profil,profiling,114,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:78,integrability,modular,modular,78,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:78,modifiability,modul,modular,78,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:114,performance,profil,profiling,114,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:11,safety,review,review,11,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:78,safety,modul,modular,78,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:11,testability,review,review,11,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:78,testability,modula,modular,78,"Just had a review with @vepadulano , congratulations on this very elegant and modular solution for collecting the profiling information!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11214:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11214
https://github.com/root-project/root/pull/11216:19,deployability,version,version,19,Force-pushed a new version of the last commit with the clang-format fixes applied.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:19,integrability,version,version,19,Force-pushed a new version of the last commit with the clang-format fixes applied.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:61,interoperability,format,format,61,Force-pushed a new version of the last commit with the clang-format fixes applied.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:19,modifiability,version,version,19,Force-pushed a new version of the last commit with the clang-format fixes applied.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:4,deployability,patch,patch,4,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:52,deployability,version,version,52,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:52,integrability,version,version,52,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:52,modifiability,version,version,52,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:208,performance,I/O,I/O,208,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:4,safety,patch,patch,4,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:67,safety,test,test,67,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:4,security,patch,patch,4,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:129,security,hack,hack,129,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:67,testability,test,test,67,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/pull/11216:234,testability,understand,understand,234,"The patch is exactly the same, I force-pushed a new version of the test that uses a `vector<XYZTVector>` instead of the previous hack with a `std::pair`. ~~However that causes a bunch of (seemingly harmless) I/O warnings that I don't understand -- I'll see with Philippe before merging.~~ Understood, all good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11216
https://github.com/root-project/root/issues/11221:247,performance,time,time,247,"Hi, thanks for opening this issue! Could you verify that this PR fixes the remaining issues also on your environment? https://github.com/root-project/root/pull/11228. Thanks! I would really like to not close the issue prematurely, unlike the last time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:45,testability,verif,verify,45,"Hi, thanks for opening this issue! Could you verify that this PR fixes the remaining issues also on your environment? https://github.com/root-project/root/pull/11228. Thanks! I would really like to not close the issue prematurely, unlike the last time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:202,usability,close,close,202,"Hi, thanks for opening this issue! Could you verify that this PR fixes the remaining issues also on your environment? https://github.com/root-project/root/pull/11228. Thanks! I would really like to not close the issue prematurely, unlike the last time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:159,deployability,fail,fails,159,"@guitargeek https://github.com/root-project/root/pull/11228 fixes `gtest-roofit-roostats-test-testSPlot`, but `tutorial-roofit-rf110_normintegration-py` still fails with the same function stack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:188,deployability,stack,stack,188,"@guitargeek https://github.com/root-project/root/pull/11228 fixes `gtest-roofit-roostats-test-testSPlot`, but `tutorial-roofit-rf110_normintegration-py` still fails with the same function stack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:159,reliability,fail,fails,159,"@guitargeek https://github.com/root-project/root/pull/11228 fixes `gtest-roofit-roostats-test-testSPlot`, but `tutorial-roofit-rf110_normintegration-py` still fails with the same function stack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:89,safety,test,test-testSPlot,89,"@guitargeek https://github.com/root-project/root/pull/11228 fixes `gtest-roofit-roostats-test-testSPlot`, but `tutorial-roofit-rf110_normintegration-py` still fails with the same function stack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:89,testability,test,test-testSPlot,89,"@guitargeek https://github.com/root-project/root/pull/11228 fixes `gtest-roofit-roostats-test-testSPlot`, but `tutorial-roofit-rf110_normintegration-py` still fails with the same function stack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:248,availability,failur,failure,248,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:317,availability,failur,failure,317,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:352,availability,ERROR,ERROR,352,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:558,availability,ERROR,ERROR,558,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1793,availability,ERROR,ERROR,1793,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:248,deployability,fail,failure,248,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:317,deployability,fail,failure,317,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:339,deployability,stack,stack,339,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:960,deployability,build,build,960,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1141,deployability,build,build,1141,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1315,deployability,build,build,1315,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1516,deployability,build,build,1516,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1717,deployability,build,build,1717,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:451,interoperability,share,shared,451,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:248,performance,failur,failure,248,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:317,performance,failur,failure,317,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:352,performance,ERROR,ERROR,352,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:558,performance,ERROR,ERROR,558,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1793,performance,ERROR,ERROR,1793,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:248,reliability,fail,failure,248,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:317,reliability,fail,failure,317,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:184,safety,test,test,184,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:196,safety,test,test,196,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:352,safety,ERROR,ERROR,352,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:558,safety,ERROR,ERROR,558,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1793,safety,ERROR,ERROR,1793,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:184,testability,test,test,184,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:196,testability,test,test,196,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:352,usability,ERROR,ERROR,352,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:558,usability,ERROR,ERROR,558,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:1793,usability,ERROR,ERROR,1793,"Thanks for checking! Hmm that is surprising, maybe the Pythonizations don't get correctly reinstalled when you reinstall ROOT. But probably I made a mistake... But how do you run this test Python test correctly? When I try:. ```. ctest --output-on-failure -R ""tutorial-roofit-rf110_normintegration-py"" . ```. I get a failure at an earlier stack:. ```. ERROR: ld.so: object 'libclang_rt.asan-x86_64.so' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored. =================================================================. ==561461==ERROR: AddressSanitizer: use-after-poison on address 0x555b05d51920 at pc 0x7fb562864119 bp 0x7ffd502cd720 sp 0x7ffd502cd710. READ of size 8 at 0x555b05d51920 thread T0. #0 0x7fb562864118 in void std::__insertion_sort<llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter>(llvm::Attribute*, llvm::Attribute*, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0] (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c64118). #1 0x7fb56286a08f in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::Attribute>) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6a08f). #2 0x7fb56286ca42 in llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&) (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c6ca42). #3 0x7fb5628944b3 in llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c944b3). #4 0x7fb5628958f1 in llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const (/home/rembserj/spaces/master-asan/root/src/build/lib/libCling.so+0x14c958f1). .... ```. Probably it's related to this `ERROR`. You have an idea how I could fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:26,deployability,build,build,26,"Yes, I did an incremental build only. I can try a full clean build during lunch break if you think that could help... For `libclang_rt.asan-x86_64.so`, you have to install the `compiler-rt` package on Arch Linux. Also, what compiler are you building with, Clang or GCC?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:61,deployability,build,build,61,"Yes, I did an incremental build only. I can try a full clean build during lunch break if you think that could help... For `libclang_rt.asan-x86_64.so`, you have to install the `compiler-rt` package on Arch Linux. Also, what compiler are you building with, Clang or GCC?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:164,deployability,instal,install,164,"Yes, I did an incremental build only. I can try a full clean build during lunch break if you think that could help... For `libclang_rt.asan-x86_64.so`, you have to install the `compiler-rt` package on Arch Linux. Also, what compiler are you building with, Clang or GCC?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:241,deployability,build,building,241,"Yes, I did an incremental build only. I can try a full clean build during lunch break if you think that could help... For `libclang_rt.asan-x86_64.so`, you have to install the `compiler-rt` package on Arch Linux. Also, what compiler are you building with, Clang or GCC?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:190,modifiability,pac,package,190,"Yes, I did an incremental build only. I can try a full clean build during lunch break if you think that could help... For `libclang_rt.asan-x86_64.so`, you have to install the `compiler-rt` package on Arch Linux. Also, what compiler are you building with, Clang or GCC?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:110,usability,help,help,110,"Yes, I did an incremental build only. I can try a full clean build during lunch break if you think that could help... For `libclang_rt.asan-x86_64.so`, you have to install the `compiler-rt` package on Arch Linux. Also, what compiler are you building with, Clang or GCC?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:21,deployability,build,build,21,"No need to do a full build, just make sure that the RooAbsReal pythonization file got copied to the install directory correctly:. ```. cp root_src/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py root_install/lib/ROOT/_pythonization/_roofit/_rooabsreal.py. ```. Okay I installed the `compiler-rt` package and it still doesn't work. I'm using GCC. Should I use Clang for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:100,deployability,instal,install,100,"No need to do a full build, just make sure that the RooAbsReal pythonization file got copied to the install directory correctly:. ```. cp root_src/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py root_install/lib/ROOT/_pythonization/_roofit/_rooabsreal.py. ```. Okay I installed the `compiler-rt` package and it still doesn't work. I'm using GCC. Should I use Clang for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:301,deployability,instal,installed,301,"No need to do a full build, just make sure that the RooAbsReal pythonization file got copied to the install directory correctly:. ```. cp root_src/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py root_install/lib/ROOT/_pythonization/_roofit/_rooabsreal.py. ```. Okay I installed the `compiler-rt` package and it still doesn't work. I'm using GCC. Should I use Clang for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:147,interoperability,bind,bindings,147,"No need to do a full build, just make sure that the RooAbsReal pythonization file got copied to the install directory correctly:. ```. cp root_src/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py root_install/lib/ROOT/_pythonization/_roofit/_rooabsreal.py. ```. Okay I installed the `compiler-rt` package and it still doesn't work. I'm using GCC. Should I use Clang for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:147,modifiability,bind,bindings,147,"No need to do a full build, just make sure that the RooAbsReal pythonization file got copied to the install directory correctly:. ```. cp root_src/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py root_install/lib/ROOT/_pythonization/_roofit/_rooabsreal.py. ```. Okay I installed the `compiler-rt` package and it still doesn't work. I'm using GCC. Should I use Clang for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:329,modifiability,pac,package,329,"No need to do a full build, just make sure that the RooAbsReal pythonization file got copied to the install directory correctly:. ```. cp root_src/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py root_install/lib/ROOT/_pythonization/_roofit/_rooabsreal.py. ```. Okay I installed the `compiler-rt` package and it still doesn't work. I'm using GCC. Should I use Clang for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:350,reliability,doe,doesn,350,"No need to do a full build, just make sure that the RooAbsReal pythonization file got copied to the install directory correctly:. ```. cp root_src/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py root_install/lib/ROOT/_pythonization/_roofit/_rooabsreal.py. ```. Okay I installed the `compiler-rt` package and it still doesn't work. I'm using GCC. Should I use Clang for that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:71,deployability,updat,updated,71,"By the way if you also have this problem that Pythonizations don't get updated in incremental builds, we should probably open an issue about it. But maybe it's just a particularity on my setup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:94,deployability,build,builds,94,"By the way if you also have this problem that Pythonizations don't get updated in incremental builds, we should probably open an issue about it. But maybe it's just a particularity on my setup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:71,safety,updat,updated,71,"By the way if you also have this problem that Pythonizations don't get updated in incremental builds, we should probably open an issue about it. But maybe it's just a particularity on my setup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:71,security,updat,updated,71,"By the way if you also have this problem that Pythonizations don't get updated in incremental builds, we should probably open an issue about it. But maybe it's just a particularity on my setup",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:26,deployability,updat,update,26,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:160,deployability,build,build,160,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:261,deployability,build,build,261,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:297,deployability,instal,installed,297,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:442,deployability,build,builds,442,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:37,interoperability,bind,bindings,37,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:37,modifiability,bind,bindings,37,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:323,modifiability,pac,package,323,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:344,reliability,doe,doesn,344,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:26,safety,updat,update,26,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:209,safety,test,test,209,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:26,security,updat,update,26,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/issues/11221:209,testability,test,test,209,"Indeed, the Pythonization update of `bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_rooabsreal.py` did *not* get correctly propagated to my build directory! I've now copied it manually and test passes; please create an issue for that so the build system can be fixed. > Okay I installed the compiler-rt package and it still doesn't work. I'm using GCC. Should I use Clang for that? Clang is generally recommended for ASan builds. I had a quick look and it appears that `libclang_rt.asan-x86_64.so` is hard-coded, so this setup cannot work for GCC (where the lib is apparently named just `libasan.so`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11221
https://github.com/root-project/root/pull/11223:79,availability,state,state,79,"As described in https://github.com/root-project/root/issues/11236, the current state in `master` causes problems if there is a system installation of `json_fwd.hpp` that is incompatible with the builtin. Can we get this merged to solve the problem? For the same reason, we probably also want a backport to v6.26...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11223
https://github.com/root-project/root/pull/11223:134,deployability,instal,installation,134,"As described in https://github.com/root-project/root/issues/11236, the current state in `master` causes problems if there is a system installation of `json_fwd.hpp` that is incompatible with the builtin. Can we get this merged to solve the problem? For the same reason, we probably also want a backport to v6.26...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11223
https://github.com/root-project/root/pull/11223:71,energy efficiency,current,current,71,"As described in https://github.com/root-project/root/issues/11236, the current state in `master` causes problems if there is a system installation of `json_fwd.hpp` that is incompatible with the builtin. Can we get this merged to solve the problem? For the same reason, we probably also want a backport to v6.26...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11223
https://github.com/root-project/root/pull/11223:79,integrability,state,state,79,"As described in https://github.com/root-project/root/issues/11236, the current state in `master` causes problems if there is a system installation of `json_fwd.hpp` that is incompatible with the builtin. Can we get this merged to solve the problem? For the same reason, we probably also want a backport to v6.26...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11223
https://github.com/root-project/root/pull/11223:173,interoperability,incompatib,incompatible,173,"As described in https://github.com/root-project/root/issues/11236, the current state in `master` causes problems if there is a system installation of `json_fwd.hpp` that is incompatible with the builtin. Can we get this merged to solve the problem? For the same reason, we probably also want a backport to v6.26...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11223
https://github.com/root-project/root/pull/11224:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11224
https://github.com/root-project/root/pull/11226:256,modifiability,inherit,inherited,256,"> If I read this correctly, all entries in `ARG_ENVIRONMENT` reach CMD, PRE and POST (+ERR etc), and `CMD_ENV` only reaches CMD? Correct, `ARG_ENVIRONMENT` is passed via the `ENV` argument and is used to modify the environment of the driver process, hence inherited by all child processes. The new `CMD_ENV` is only propagated to `CMD`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11226
https://github.com/root-project/root/pull/11226:204,security,modif,modify,204,"> If I read this correctly, all entries in `ARG_ENVIRONMENT` reach CMD, PRE and POST (+ERR etc), and `CMD_ENV` only reaches CMD? Correct, `ARG_ENVIRONMENT` is passed via the `ENV` argument and is used to modify the environment of the driver process, hence inherited by all child processes. The new `CMD_ENV` is only propagated to `CMD`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11226
https://github.com/root-project/root/pull/11228:173,availability,failur,failures,173,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:173,deployability,fail,failures,173,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:298,deployability,build,build,298,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:173,performance,failur,failures,173,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:173,reliability,fail,failures,173,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:268,safety,test,test,268,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:268,testability,test,test,268,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:23,usability,statu,status,23,"@guitargeek what's the status of this? Reading through the comments in https://github.com/root-project/root/issues/11221, I think this actually addresses the remaining ASan failures. Is there anything from the RooFit side holding this up, or shall I give this another test? (after I fixed the ASan build in general...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:74,performance,time,time,74,"Hi! I'm still not 100 % sure this is the right fix, and I didn't have the time to think more about this so far. I will come back to this, but right now this PR is not ready yet. I'll change it to a draft to make this clear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11228:217,usability,clear,clear,217,"Hi! I'm still not 100 % sure this is the right fix, and I didn't have the time to think more about this so far. I will come back to this, but right now this PR is not ready yet. I'll change it to a draft to make this clear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11228
https://github.com/root-project/root/pull/11230:25,availability,failur,failure,25,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:25,deployability,fail,failure,25,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:104,deployability,patch,patch,104,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:25,performance,failur,failure,25,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:25,reliability,fail,failure,25,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:57,safety,test,test,57,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:104,safety,patch,patch,104,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:128,safety,test,test,128,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:104,security,patch,patch,104,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:57,testability,test,test,57,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:128,testability,test,test,128,Thank you @j-mathe ! The failure in the `dataframe_misc` test in roottest looks real. Before/after this patch the output of the test is:. ```. -Sum b2 init: 2471. -Sum dv init: 1491. +Sum b2 init: 2470. +Sum dv init: 1490. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:38,interoperability,format,format,38,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:92,interoperability,format,format,92,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:137,interoperability,format,format,137,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:167,interoperability,format,formatting,167,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:333,interoperability,format,format,333,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:375,interoperability,format,format,375,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:283,safety,review,review,283,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:614,safety,test,tests,614,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:668,safety,review,review,668,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:283,testability,review,review,283,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:614,testability,test,tests,614,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:640,testability,simpl,simpler,640,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:668,testability,review,review,668,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:448,usability,interact,interactive,448,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11230:640,usability,simpl,simpler,640,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11230
https://github.com/root-project/root/pull/11231:85,deployability,VERSION,VERSION,85,"I would recommend not setting each policy, but instead using `cmake_minimum_required(VERSION 3.16...3.24)` (FYI, `FATAL_ERROR` hasn't done anything since CMake 2.6), and then setting any policies to `OLD` that fail when you try it on 3.24.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11231
https://github.com/root-project/root/pull/11231:210,deployability,fail,fail,210,"I would recommend not setting each policy, but instead using `cmake_minimum_required(VERSION 3.16...3.24)` (FYI, `FATAL_ERROR` hasn't done anything since CMake 2.6), and then setting any policies to `OLD` that fail when you try it on 3.24.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11231
https://github.com/root-project/root/pull/11231:85,integrability,VERSION,VERSION,85,"I would recommend not setting each policy, but instead using `cmake_minimum_required(VERSION 3.16...3.24)` (FYI, `FATAL_ERROR` hasn't done anything since CMake 2.6), and then setting any policies to `OLD` that fail when you try it on 3.24.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11231
https://github.com/root-project/root/pull/11231:85,modifiability,VERSION,VERSION,85,"I would recommend not setting each policy, but instead using `cmake_minimum_required(VERSION 3.16...3.24)` (FYI, `FATAL_ERROR` hasn't done anything since CMake 2.6), and then setting any policies to `OLD` that fail when you try it on 3.24.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11231
https://github.com/root-project/root/pull/11231:210,reliability,fail,fail,210,"I would recommend not setting each policy, but instead using `cmake_minimum_required(VERSION 3.16...3.24)` (FYI, `FATAL_ERROR` hasn't done anything since CMake 2.6), and then setting any policies to `OLD` that fail when you try it on 3.24.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11231
https://github.com/root-project/root/pull/11231:35,security,polic,policy,35,"I would recommend not setting each policy, but instead using `cmake_minimum_required(VERSION 3.16...3.24)` (FYI, `FATAL_ERROR` hasn't done anything since CMake 2.6), and then setting any policies to `OLD` that fail when you try it on 3.24.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11231
https://github.com/root-project/root/pull/11231:187,security,polic,policies,187,"I would recommend not setting each policy, but instead using `cmake_minimum_required(VERSION 3.16...3.24)` (FYI, `FATAL_ERROR` hasn't done anything since CMake 2.6), and then setting any policies to `OLD` that fail when you try it on 3.24.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11231
https://github.com/root-project/root/pull/11232:40,availability,failur,failure,40,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:12,deployability,log,logs,12,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:40,deployability,fail,failure,40,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:40,performance,failur,failure,40,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:40,reliability,fail,failure,40,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:12,safety,log,logs,12,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:35,safety,test,test,35,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:12,security,log,logs,12,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:12,testability,log,logs,12,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:35,testability,test,test,35,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/pull/11232:181,usability,behavi,behavior,181,"The jenkins logs are gone, but the test failure is due to certain RDF warnings being printed out that were not printed before. I'll have to investigate why (and whether the correct behavior is warning or no warning).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11232
https://github.com/root-project/root/issues/11233:229,deployability,instal,install,229,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:252,deployability,version,version,252,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:306,deployability,instal,install,306,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:415,deployability,instal,install,415,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:588,deployability,build,build,588,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:252,integrability,version,version,252,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:252,modifiability,version,version,252,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:556,reliability,doe,does,556,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:615,reliability,doe,does,615,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:336,usability,COMMAND,COMMAND,336,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11233:445,usability,COMMAND,COMMAND,445,"I'm not sure how to achieve this with CMake, @bellenot ? Now the python sources are inserted in a list, like:. ```cmake. set(py_sources. ROOT/__init__.py. ROOT/_application.py. ... ```. and then that list is used to make sure we install their compiled version:. ```cmake. foreach(py_source ${py_sources}). install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""). install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""). endforeach(). ```. but CMake does not copy them again to the build directory unless one does `cmake .`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11233
https://github.com/root-project/root/issues/11236:280,deployability,version,version,280,"This is caused by having two (incompatible) `nlohmann/json` libraries, the builtin one from `/home/cburgard/Physics/root/src/builtins/nlohmann/json.hpp` and the system one from `/usr/include/nlohmann/json_fwd.hpp`. You can either just use the builtin one (should compile now with version 3.11+) or the builtin one will be fixed by https://github.com/root-project/root/pull/11223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11236
https://github.com/root-project/root/issues/11236:280,integrability,version,version,280,"This is caused by having two (incompatible) `nlohmann/json` libraries, the builtin one from `/home/cburgard/Physics/root/src/builtins/nlohmann/json.hpp` and the system one from `/usr/include/nlohmann/json_fwd.hpp`. You can either just use the builtin one (should compile now with version 3.11+) or the builtin one will be fixed by https://github.com/root-project/root/pull/11223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11236
https://github.com/root-project/root/issues/11236:30,interoperability,incompatib,incompatible,30,"This is caused by having two (incompatible) `nlohmann/json` libraries, the builtin one from `/home/cburgard/Physics/root/src/builtins/nlohmann/json.hpp` and the system one from `/usr/include/nlohmann/json_fwd.hpp`. You can either just use the builtin one (should compile now with version 3.11+) or the builtin one will be fixed by https://github.com/root-project/root/pull/11223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11236
https://github.com/root-project/root/issues/11236:280,modifiability,version,version,280,"This is caused by having two (incompatible) `nlohmann/json` libraries, the builtin one from `/home/cburgard/Physics/root/src/builtins/nlohmann/json.hpp` and the system one from `/usr/include/nlohmann/json_fwd.hpp`. You can either just use the builtin one (should compile now with version 3.11+) or the builtin one will be fixed by https://github.com/root-project/root/pull/11223",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11236
https://github.com/root-project/root/issues/11238:60,safety,Compl,Complete,60,Still the case in master. Issue probably in `Int_t TTabCom::Complete`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11238
https://github.com/root-project/root/issues/11238:60,security,Compl,Complete,60,Still the case in master. Issue probably in `Int_t TTabCom::Complete`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11238
https://github.com/root-project/root/issues/11245:5,usability,confirm,confirming,5,Just confirming that the `-O` works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11245
https://github.com/root-project/root/pull/11246:347,deployability,configurat,configurations,347,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:388,deployability,build,build,388,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:436,deployability,version,version,436,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:456,deployability,instal,installed,456,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:1018,deployability,patch,patch,1018,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:347,integrability,configur,configurations,347,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:436,integrability,version,version,436,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:666,integrability,configur,configure,666,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:705,integrability,configur,configure,705,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:347,modifiability,configur,configurations,347,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:436,modifiability,version,version,436,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:484,modifiability,pac,package,484,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:666,modifiability,configur,configure,666,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:705,modifiability,configur,configure,705,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:770,modifiability,pac,package,770,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:402,reliability,doe,doesn,402,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:1018,safety,patch,patch,1018,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:173,security,polic,policy,173,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:347,security,configur,configurations,347,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:637,security,modif,modified,637,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:666,security,configur,configure,666,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:705,security,configur,configure,705,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:1018,security,patch,patch,1018,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/pull/11246:161,usability,help,help,161,"Unfortunately this change was not fortunate for every single external. :frowning:. As we found in the ATLAS externals, setting [CMP0135](https://cmake.org/cmake/help/latest/policy/CMP0135.html) to `NEW` with autoconf/automake based externals is a very bad idea. Because it has a very high chance of making those projects want to re-generate their configurations with automake. But if the build machine doesn't have **exactly** the same version of automake installed that the external package was generated with originally, you run into issues like:. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. ```. As it happens, we'll have to patch ROOT for this in: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/976",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11246
https://github.com/root-project/root/issues/11250:104,energy efficiency,Draw,Drawing,104,"The [TMultiGraph](https://root.cern/doc/master/classTMultiGraph.html) documentation says:. MultiGraphs' Drawing. The drawing options are the same as for [TGraph](https://root.cern/doc/master/classTGraph.html). Like for [TGraph](https://root.cern/doc/master/classTGraph.html), the painting is performed thanks to the [TGraphPainter](https://root.cern/doc/master/classTGraphPainter.html) class. Maybe it could be clarified, or maybe it's just me that gets confused with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11250
https://github.com/root-project/root/issues/11250:117,energy efficiency,draw,drawing,117,"The [TMultiGraph](https://root.cern/doc/master/classTMultiGraph.html) documentation says:. MultiGraphs' Drawing. The drawing options are the same as for [TGraph](https://root.cern/doc/master/classTGraph.html). Like for [TGraph](https://root.cern/doc/master/classTGraph.html), the painting is performed thanks to the [TGraphPainter](https://root.cern/doc/master/classTGraphPainter.html) class. Maybe it could be clarified, or maybe it's just me that gets confused with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11250
https://github.com/root-project/root/issues/11250:292,performance,perform,performed,292,"The [TMultiGraph](https://root.cern/doc/master/classTMultiGraph.html) documentation says:. MultiGraphs' Drawing. The drawing options are the same as for [TGraph](https://root.cern/doc/master/classTGraph.html). Like for [TGraph](https://root.cern/doc/master/classTGraph.html), the painting is performed thanks to the [TGraphPainter](https://root.cern/doc/master/classTGraphPainter.html) class. Maybe it could be clarified, or maybe it's just me that gets confused with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11250
https://github.com/root-project/root/issues/11250:70,usability,document,documentation,70,"The [TMultiGraph](https://root.cern/doc/master/classTMultiGraph.html) documentation says:. MultiGraphs' Drawing. The drawing options are the same as for [TGraph](https://root.cern/doc/master/classTGraph.html). Like for [TGraph](https://root.cern/doc/master/classTGraph.html), the painting is performed thanks to the [TGraphPainter](https://root.cern/doc/master/classTGraphPainter.html) class. Maybe it could be clarified, or maybe it's just me that gets confused with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11250
https://github.com/root-project/root/issues/11250:292,usability,perform,performed,292,"The [TMultiGraph](https://root.cern/doc/master/classTMultiGraph.html) documentation says:. MultiGraphs' Drawing. The drawing options are the same as for [TGraph](https://root.cern/doc/master/classTGraph.html). Like for [TGraph](https://root.cern/doc/master/classTGraph.html), the painting is performed thanks to the [TGraphPainter](https://root.cern/doc/master/classTGraphPainter.html) class. Maybe it could be clarified, or maybe it's just me that gets confused with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11250
https://github.com/root-project/root/pull/11252:20,safety,test,test,20,"@smuzaffar, can you test this PR in cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:20,testability,test,test,20,"@smuzaffar, can you test this PR in cmssw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:14,safety,test,tests,14,started cmssw tests here https://github.com/cms-sw/root/pull/175,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:14,testability,test,tests,14,started cmssw tests here https://github.com/cms-sw/root/pull/175,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:948,availability,error,error,948,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8667,availability,error,errors,8667,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8701,availability,ERROR,ERROR,8701,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8720,availability,error,errors,8720,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4,deployability,fail,failing,4,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:80,deployability,build,build,80,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:101,deployability,releas,release-master,101,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1984,deployability,depend,depends,1984,"2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2194,deployability,build,build,2194,"lingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2215,deployability,releas,release-master,2215,"e -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2440,deployability,build,build,2440,"nsWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicB",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2461,deployability,releas,release-master,2461,"fine\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2699,deployability,build,build,2699," ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::Assump",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2720,deployability,releas,release-master,2720,"space -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetL",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3070,deployability,build,build,3070,"entPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3091,deployability,releas,release-master,3091,":Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CC",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3260,deployability,build,build,3260,"93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3281,deployability,releas,release-master,3281,"pace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3517,deployability,build,build,3517,"nonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3538,deployability,releas,release-master,3538,"tantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitial",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3878,deployability,build,build,3878,"rgetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3899,deployability,releas,release-master,3899,"lvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x312",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4024,deployability,build,build,4024,"llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4045,deployability,releas,release-master,4045,"nstant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address rang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4159,deployability,build,build,4159,"FoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large ran",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4180,deployability,releas,release-master,4180,"truction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d00",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4276,deployability,Modul,Module,4276,"t-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4290,deployability,build,build,4290,"er/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4311,deployability,releas,release-master,4311,"765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4409,deployability,Modul,Module,4409,"m::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set ad",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4423,deployability,build,build,4423,"Impl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range pe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4444,deployability,releas,release-master,4444," llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4581,deployability,build,build,4581,"0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Wa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4602,deployability,releas,release-master,4602,"tionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7558,deployability,build,build,7558,"range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --trac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7579,deployability,releas,release-master,7579,"a000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see wher",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7741,deployability,build,build,7741,"e range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7762,deployability,releas,release-master,7762,"ae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3768,energy efficiency,Optim,OptimizationRemarkEmitter,3768,"nymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3829,energy efficiency,Profil,ProfileSummaryInfo,3829,"t const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==2276",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6380,energy efficiency,load,load,6380,"ss). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. Maybe you need to load the corresponding shared library? ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7958,energy efficiency,alloc,allocs,7958,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7999,energy efficiency,alloc,allocated,7999,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8779,energy efficiency,core,core,8779,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1984,integrability,depend,depends,1984,"2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6929,integrability,rout,routine,6929,"access). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. Maybe you need to load the corresponding shared library? ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6403,interoperability,share,shared,6403,"set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. Maybe you need to load the corresponding shared library? ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1984,modifiability,depend,depends,1984,"2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4276,modifiability,Modul,Module,4276,"t-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4409,modifiability,Modul,Module,4409,"m::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set ad",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:941,performance,memor,memory,941,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:948,performance,error,error,948,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3768,performance,Optimiz,OptimizationRemarkEmitter,3768,"nymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3829,performance,Profil,ProfileSummaryInfo,3829,"t const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==2276",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6380,performance,load,load,6380,"ss). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. Maybe you need to load the corresponding shared library? ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8521,performance,memor,memory,8521,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8667,performance,error,errors,8667,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8701,performance,ERROR,ERROR,8701,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8720,performance,error,errors,8720,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4,reliability,fail,failing,4,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:12,safety,test,test,12,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:948,safety,error,error,948,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:954,safety,detect,detector,954,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1984,safety,depend,depends,1984,"2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4276,safety,Modul,Module,4276,"t-release-master/lib/libCling.so). ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4409,safety,Modul,Module,4409,"m::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== . ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). ==22765== Warning: set ad",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8643,safety,detect,detected,8643,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8667,safety,error,errors,8667,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8701,safety,ERROR,ERROR,8701,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8720,safety,error,errors,8720,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:954,security,detect,detector,954,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7029,security,sign,signal,7029,". ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. Maybe you need to load the corresponding shared library? ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). terminate called after throwing an instance of 'cling::InvalidDerefException'. what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8643,security,detect,detected,8643,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:12,testability,test,test,12,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:894,testability,assert,assertSparseSelection,894,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1874,testability,assert,assertSparseSelection,1874,"-q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::Target",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1922,testability,assert,assertSparseSelection,1922,"heck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Co",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1984,testability,depend,depends,1984,"2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8734,testability,context,contexts,8734,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:941,usability,memor,memory,941,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:948,usability,error,error,948,"The failing test seems to trigger some llvm bug:. ```. valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on unini",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1126,usability,Command,Command,1126,"oot.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. ==22765== Memcheck, a memory error detector. ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. ==22765== . Processing assertSparseSelection.C... ==22765== Conditional jump or move depends on uninitialised value(s). ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8521,usability,memor,memory,8521,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8667,usability,error,errors,8667,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8701,usability,ERROR,ERROR,8701,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8720,usability,error,errors,8720,"nce null pointer or trying to call routine taking non-null arguments. ==22765== . ==22765== Process terminating with default action of signal 6 (SIGABRT). ==22765== at 0x546E18B: raise (raise.c:51). ==22765== by 0x544D92D: abort (abort.c:100). ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DFF3CC: ??? ==22765== by 0x1FFEFFBB3F: ??? ==22765== by 0xB60A6A5548AF56FF: ??? ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). ==22765== by 0x4DEB03F: ??? ==22765== . ==22765== HEAP SUMMARY:. ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. ==22765== . ==22765== LEAK SUMMARY:. ==22765== definitely lost: 0 bytes in 0 blocks. ==22765== indirectly lost: 0 bytes in 0 blocks. ==22765== possibly lost: 7,728 bytes in 66 blocks. ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. ==22765== of which reachable via heuristic:. ==22765== stdstring : 111 bytes in 1 blocks. ==22765== multipleinheritance: 7,776 bytes in 10 blocks. ==22765== suppressed: 278,964 bytes in 3,461 blocks. ==22765== Rerun with --leak-check=full to see details of leaked memory. ==22765== . ==22765== Use --track-origins=yes to see where uninitialised values come from. ==22765== For lists of detected and suppressed errors, rerun with: -s. ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). Aborted (core dumped). ```. @hahnjo, do you have a clue what to do here? PS: It seems similar to RadeonOpenCompute/ROCm#1179",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:960,availability,error,error,960,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8835,availability,error,errors,8835,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8871,availability,ERROR,ERROR,8871,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8890,availability,error,errors,8890,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6,deployability,fail,failing,6,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:90,deployability,build,build,90,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:111,deployability,releas,release-master,111,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2012,deployability,depend,depends,2012," GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2224,deployability,build,build,2224,"ndLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2245,deployability,releas,release-master,2245,"\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2472,deployability,build,build,2472,"Auto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2493,deployability,releas,release-master,2493,"kAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::In",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2733,deployability,build,build,2733,"NoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2754,deployability,releas,release-master,2754,"\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3106,deployability,build,build,3106,"(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3127,deployability,releas,release-master,3127,"ant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3298,deployability,build,build,3298,"A: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassMana",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3319,deployability,releas,release-master,3319,":SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Mo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3557,deployability,build,build,3557,"us namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3578,deployability,releas,release-master,3578,"ldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3920,deployability,build,build,3920,"braryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3941,deployability,releas,release-master,3941,"mallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4068,deployability,build,build,4068,"nstant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4089,deployability,releas,release-master,4089," >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warni",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4205,deployability,build,build,4205,"ruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address ra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4226,deployability,releas,release-master,4226,"*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4324,deployability,Modul,Module,4324,"master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4338,deployability,build,build,4338,"Cling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4359,deployability,releas,release-master,4359," 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4459,deployability,Modul,Module,4459,"rSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4473,deployability,build,build,4473,":BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4494,deployability,releas,release-master,4494,"tCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4633,deployability,build,build,4633," combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4654,deployability,releas,release-master,4654,"unction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== War",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7680,deployability,build,build,7680,"000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7701,deployability,releas,release-master,7701,"5== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7871,deployability,build,build,7871,"0) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7892,deployability,releas,release-master,7892,"e called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors fr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3810,energy efficiency,Optim,OptimizationRemarkEmitter,3810," namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set add",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3871,energy efficiency,Profil,ProfileSummaryInfo,3871,"t*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6472,energy efficiency,load,load,6472,"ng: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! > You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. > Maybe you need to load the corresponding shared library? > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8098,energy efficiency,alloc,allocs,8098," terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8139,energy efficiency,alloc,allocated,8139,"6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8951,energy efficiency,core,core,8951,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2012,integrability,depend,depends,2012," GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7033,integrability,rout,routine,7033,"arning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! > You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. > Maybe you need to load the corresponding shared library? > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 by",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6495,interoperability,share,shared,6495,"rms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! > You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. > Maybe you need to load the corresponding shared library? > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2012,modifiability,depend,depends,2012," GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4324,modifiability,Modul,Module,4324,"master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4459,modifiability,Modul,Module,4459,"rSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:953,performance,memor,memory,953,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:960,performance,error,error,960,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3810,performance,Optimiz,OptimizationRemarkEmitter,3810," namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set add",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3871,performance,Profil,ProfileSummaryInfo,3871,"t*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInfo<llvm::Constant*>, llvm::detail::DenseMapPair<llvm::Constant*, llvm::Constant*> >&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F38B7: llvm::ConstantFoldInstruction(llvm::Instruction*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6472,performance,load,load,6472,"ng: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! > You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. > Maybe you need to load the corresponding shared library? > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8683,performance,memor,memory,8683,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8835,performance,error,errors,8835,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8871,performance,ERROR,ERROR,8871,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8890,performance,error,errors,8890,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6,reliability,fail,failing,6,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:14,safety,test,test,14,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:960,safety,error,error,960,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:966,safety,detect,detector,966,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2012,safety,depend,depends,2012," GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4324,safety,Modul,Module,4324,"master/lib/libCling.so). > ==22765== by 0x91305C5: AddReachableCodeToWorklist(llvm::BasicBlock*, llvm::DataLayout const&, llvm::SmallPtrSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4459,safety,Modul,Module,4459,"rSetImpl<llvm::BasicBlock*>&, llvm::InstCombineWorklist&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9139861: combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, bool, llvm::LoopInfo*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x913A00E: llvm::InstructionCombiningPass::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CCC7: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4CE00: llvm::FPPassManager::runOnModule(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x9E4BEE5: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x6F12B5A: cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== . > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x31242000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (defined). > ==22765== Warning: set address range perms: large range [0x1cfd0000, 0x2d27d000) (noaccess). > ==2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8811,safety,detect,detected,8811,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8835,safety,error,errors,8835,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8871,safety,ERROR,ERROR,8871,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8890,safety,error,errors,8890,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:966,security,detect,detector,966,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7137,security,sign,signal,7137,"et address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'! > You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const. > Maybe you need to load the corresponding shared library? > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined). > ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess). > terminate called after throwing an instance of 'cling::InvalidDerefException'. > what(): Trying to dereference null pointer or trying to call routine taking non-null arguments. > ==22765== . > ==22765== Process terminating with default action of signal 6 (SIGABRT). > ==22765== at 0x546E18B: raise (raise.c:51). > ==22765== by 0x544D92D: abort (abort.c:100). > ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8811,security,detect,detected,8811,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:14,testability,test,test,14,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:904,testability,assert,assertSparseSelection,904,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1892,testability,assert,assertSparseSelection,1892," assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout co",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1948,testability,assert,assertSparseSelection,1948," error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2012,testability,depend,depends,2012," GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F35A1: (anonymous namespace)::ConstantFoldInstOperandsImpl(llvm::Value const*, unsigned int, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x93F15DF: (anonymous namespace)::ConstantFoldConstantImpl(llvm::Constant const*, llvm::DataLayout const&, llvm::TargetLibraryInfo const*, llvm::SmallDenseMap<llvm::Constant*, llvm::Constant*, 4u, llvm::DenseMapInf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8904,testability,context,contexts,8904,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:953,usability,memor,memory,953,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:960,usability,error,error,960,"> The failing test seems to trigger some llvm bug:. > . > ```. > valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional j",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1144,usability,Command,Command,1144," root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C. > ==22765== Memcheck, a memory error detector. > ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al. > ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info. > ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C. > ==22765== . > . > Processing assertSparseSelection.C... > ==22765== Conditional jump or move depends on uninitialised value(s). > ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::Ar",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8683,usability,memor,memory,8683,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8835,usability,error,errors,8835,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8871,usability,ERROR,ERROR,8871,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8890,usability,error,errors,8890,"2765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29). > ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DFF3CC: ??? > ==22765== by 0x1FFEFFBB3F: ??? > ==22765== by 0xB60A6A5548AF56FF: ??? > ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so). > ==22765== by 0x4DEB03F: ??? > ==22765== . > ==22765== HEAP SUMMARY:. > ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks. > ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated. > ==22765== . > ==22765== LEAK SUMMARY:. > ==22765== definitely lost: 0 bytes in 0 blocks. > ==22765== indirectly lost: 0 bytes in 0 blocks. > ==22765== possibly lost: 7,728 bytes in 66 blocks. > ==22765== still reachable: 66,622,884 bytes in 169,043 blocks. > ==22765== of which reachable via heuristic:. > ==22765== stdstring : 111 bytes in 1 blocks. > ==22765== multipleinheritance: 7,776 bytes in 10 blocks. > ==22765== suppressed: 278,964 bytes in 3,461 blocks. > ==22765== Rerun with --leak-check=full to see details of leaked memory. > ==22765== . > ==22765== Use --track-origins=yes to see where uninitialised values come from. > ==22765== For lists of detected and suppressed errors, rerun with: -s. > ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20). > Aborted (core dumped). > ```. > . > @hahnjo, do you have a clue what to do here? > . > PS: It seems similar to [RadeonOpenCompute/ROCm#1179](https://github.com/RadeonOpenCompute/ROCm/issues/1179). This is not an issue for this PR, it also happens in the master. We track this issue in root-project/root#11385 now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:383,availability,Slo,Slot,383,"For bench-marking the change can you run and compare with and without the PR:. ```. #include ""TChain.h"". void callfuncbench(int repeat = 1000) . {. TChain ch(""ntuple""); . for(int i = 0 ; i < repeat; ++i). ch.Draw(""TMath::TanH(px)"", """", ""goff""););. }. ```. This demonstrates a simple common (indirect) usage of CallFunc. . Thanks,. Philippe. They are also usage of CallFunc in Signal/Slot mechanism and QT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:208,energy efficiency,Draw,Draw,208,"For bench-marking the change can you run and compare with and without the PR:. ```. #include ""TChain.h"". void callfuncbench(int repeat = 1000) . {. TChain ch(""ntuple""); . for(int i = 0 ; i < repeat; ++i). ch.Draw(""TMath::TanH(px)"", """", ""goff""););. }. ```. This demonstrates a simple common (indirect) usage of CallFunc. . Thanks,. Philippe. They are also usage of CallFunc in Signal/Slot mechanism and QT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:383,reliability,Slo,Slot,383,"For bench-marking the change can you run and compare with and without the PR:. ```. #include ""TChain.h"". void callfuncbench(int repeat = 1000) . {. TChain ch(""ntuple""); . for(int i = 0 ; i < repeat; ++i). ch.Draw(""TMath::TanH(px)"", """", ""goff""););. }. ```. This demonstrates a simple common (indirect) usage of CallFunc. . Thanks,. Philippe. They are also usage of CallFunc in Signal/Slot mechanism and QT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:376,security,Sign,Signal,376,"For bench-marking the change can you run and compare with and without the PR:. ```. #include ""TChain.h"". void callfuncbench(int repeat = 1000) . {. TChain ch(""ntuple""); . for(int i = 0 ; i < repeat; ++i). ch.Draw(""TMath::TanH(px)"", """", ""goff""););. }. ```. This demonstrates a simple common (indirect) usage of CallFunc. . Thanks,. Philippe. They are also usage of CallFunc in Signal/Slot mechanism and QT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:276,testability,simpl,simple,276,"For bench-marking the change can you run and compare with and without the PR:. ```. #include ""TChain.h"". void callfuncbench(int repeat = 1000) . {. TChain ch(""ntuple""); . for(int i = 0 ; i < repeat; ++i). ch.Draw(""TMath::TanH(px)"", """", ""goff""););. }. ```. This demonstrates a simple common (indirect) usage of CallFunc. . Thanks,. Philippe. They are also usage of CallFunc in Signal/Slot mechanism and QT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:276,usability,simpl,simple,276,"For bench-marking the change can you run and compare with and without the PR:. ```. #include ""TChain.h"". void callfuncbench(int repeat = 1000) . {. TChain ch(""ntuple""); . for(int i = 0 ; i < repeat; ++i). ch.Draw(""TMath::TanH(px)"", """", ""goff""););. }. ```. This demonstrates a simple common (indirect) usage of CallFunc. . Thanks,. Philippe. They are also usage of CallFunc in Signal/Slot mechanism and QT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:426,availability,Slo,Slot,426,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:475,availability,failur,failure,475,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:527,availability,failur,failure,527,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:587,availability,slo,slowdown,587,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:692,availability,consist,consistent,692,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1564,availability,fault,faults,1564," noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1608,availability,fault,faults,1608,"o go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2600,availability,fault,faults,2600,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2644,availability,fault,faults,2644,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:475,deployability,fail,failure,475,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:527,deployability,fail,failure,527,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:865,deployability,releas,release,865,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:911,deployability,build,build,911,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:932,deployability,releas,release-master,932,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:987,deployability,build,build,987,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1008,deployability,releas,release-master,1008,"king the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Proc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1093,deployability,build,build,1093,"nclude ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1114,deployability,releas,release-master,1114,"void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1394,deployability,stack,stack,1394," usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1947,deployability,build,build,1947,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1968,deployability,releas,release-master,1968,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2023,deployability,build,build,2023,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2044,deployability,releas,release-master,2044,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2129,deployability,build,build,2129,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2150,deployability,releas,release-master,2150,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2430,deployability,stack,stack,2430,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:232,energy efficiency,Draw,Draw,232,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1226,energy efficiency,CPU,CPU,1226," ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1265,energy efficiency,clock,clock,1265,");. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1564,energy efficiency,fault,faults,1564," noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1608,energy efficiency,fault,faults,1608,"o go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2262,energy efficiency,CPU,CPU,2262,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2301,energy efficiency,clock,clock,2301,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2600,energy efficiency,fault,faults,2600,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2644,energy efficiency,fault,faults,2644,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1759,integrability,messag,messages,1759," it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1785,integrability,messag,messages,1785," runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	S",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2795,integrability,messag,messages,2795,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2821,integrability,messag,messages,2821,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1314,interoperability,share,shared,1314,"common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1752,interoperability,Socket,Socket,1752," to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inpu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1759,interoperability,messag,messages,1759," it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1778,interoperability,Socket,Socket,1778,"enchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system output",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1785,interoperability,messag,messages,1785," runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	S",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2350,interoperability,share,shared,2350,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2788,interoperability,Socket,Socket,2788,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2795,interoperability,messag,messages,2795,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2814,interoperability,Socket,Socket,2814,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2821,interoperability,messag,messages,2821,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:475,performance,failur,failure,475,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:527,performance,failur,failure,527,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:821,performance,time,time,821,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:884,performance,time,time,884,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1066,performance,time,timed,1066,"ut the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1162,performance,time,time,1162,". > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1192,performance,time,time,1192,"or(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	U",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1226,performance,CPU,CPU,1226," ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1272,performance,time,time,1272,"}. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1554,performance,I/O,I/O,1554,"enchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set si",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1564,performance,fault,faults,1564," noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1608,performance,fault,faults,1608,"o go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1920,performance,time,time,1920,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2102,performance,time,timed,2102,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2198,performance,time,time,2198,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2228,performance,time,time,2228,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2262,performance,CPU,CPU,2262,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2308,performance,time,time,2308,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2590,performance,I/O,I/O,2590,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2600,performance,fault,faults,2600,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2644,performance,fault,faults,2644,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:426,reliability,Slo,Slot,426,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:475,reliability,fail,failure,475,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:527,reliability,fail,failure,527,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:587,reliability,slo,slowdown,587,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1564,reliability,fault,faults,1564," noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1608,reliability,fault,faults,1608,"o go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2600,reliability,fault,faults,2600,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2644,reliability,fault,faults,2644,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1564,safety,fault,faults,1564," noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1608,safety,fault,faults,1608,"o go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1715,safety,input,inputs,1715,"ed to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context swit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2600,safety,fault,faults,2600,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2644,safety,fault,faults,2644,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2751,safety,input,inputs,2751,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:419,security,Sign,Signal,419,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1752,security,Soc,Socket,1752," to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inpu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1778,security,Soc,Socket,1778,"enchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system output",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1808,security,Sign,Signals,1808,"the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2788,security,Soc,Socket,2788,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2814,security,Soc,Socket,2814,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2844,security,Sign,Signals,2844,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:310,testability,simpl,simple,310,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1634,testability,context,context,1634,"tation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1670,testability,context,context,1670," it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary cont",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2670,testability,context,context,2670,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2706,testability,context,context,2706,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:310,usability,simpl,simple,310,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:692,usability,consist,consistent,692,"> For bench-marking the change can you run and compare with and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1052,usability,Command,Command,1052,"ith and without the PR:. > . > ```. > #include ""TChain.h"". > . > void callfuncbench(int repeat = 1000) . > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-mast",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1157,usability,User,User,1157,". > {. > TChain ch(""ntuple""); . > for(int i = 0 ; i < repeat; ++i). > ch.Draw(""TMath::TanH(px)"", """", ""goff""););. > }. > ```. > . > This demonstrates a simple common (indirect) usage of CallFunc. > . > Thanks, Philippe. > . > They are also usage of CallFunc in Signal/Slot mechanism and QT. I used `ctest --output-on-failure -R .*treefor.*` and `ctest -j12 --output-on-failure -R .*callfunc.*` to benchmark. I noticed around 20% slowdown and I decided to go with the enum implementation which I just pushed. Now with it we seem to be consistent with what we used to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1715,usability,input,inputs,1715,"ed to have but I am still looking how to make it faster. That benchmark runs more or less for the same time (0.16 +-2):. ```. root-callfunc-master/release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context swit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1862,usability,statu,status,1862,"release $ /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2088,usability,Command,Command,2088,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2193,usability,User,User,2193,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2751,usability,input,inputs,2751,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2898,usability,statu,status,2898,"uild/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.16. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.22. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 195476. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 25164. 	Voluntary context switches: 218. 	Involuntary context switches: 6. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```. and this PR on my machine:. ```. /usr/bin/time -v root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C\(1000000\). Processing /build/vvassilev/root-release-master/callfuncbench.C(1000000)... 	Command being timed: ""root.exe -l -b -q /build/vvassilev/root-release-master/callfuncbench.C(1000000)"". 	User time (seconds): 0.18. 	System time (seconds): 0.06. 	Percent of CPU this job got: 100%. 	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.24. 	Average shared text size (kbytes): 0. 	Average unshared data size (kbytes): 0. 	Average stack size (kbytes): 0. 	Average total size (kbytes): 0. 	Maximum resident set size (kbytes): 220812. 	Average resident set size (kbytes): 0. 	Major (requiring I/O) page faults: 0. 	Minor (reclaiming a frame) page faults: 27019. 	Voluntary context switches: 211. 	Involuntary context switches: 7. 	Swaps: 0. 	File system inputs: 0. 	File system outputs: 0. 	Socket messages sent: 0. 	Socket messages received: 0. 	Signals delivered: 0. 	Page size (bytes): 4096. 	Exit status: 0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:173,availability,slo,slowdown,173,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:232,availability,consist,consistency,232,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2878,availability,operat,operator-make,2878,220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-root-treeformula-parse-make ............. Passed 19.49 sec. Start 2229: roottest-root-treeformula-references-make. 13/19 Test #2229: roottest-root-treeformula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2937,availability,operat,operator-make,2937, roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-root-treeformula-parse-make ............. Passed 19.49 sec. Start 2229: roottest-root-treeformula-references-make. 13/19 Test #2229: roottest-root-treeformula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottest-root-treeformula-string-make ............ Passed 8.42 sec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6452,availability,operat,operator-make,6452,219: roottest-root-treeformula-depth-make. 4/19 Test #2219: roottest-root-treeformula-depth-make ............. Passed 0.28 sec. Start 2220: roottest-root-treeformula-event-make. 5/19 Test #2220: roottest-root-treeformula-event-make ............. Passed 4.29 sec. Start 2221: roottest-root-treeformula-evolution-make. 6/19 Test #2221: roottest-root-treeformula-evolution-make ......... Passed 6.01 sec. Start 2222: roottest-root-treeformula-formulaio-make. 7/19 Test #2222: roottest-root-treeformula-formulaio-make ......... Passed 0.56 sec. Start 2223: roottest-root-treeformula-function-make. 8/19 Test #2223: roottest-root-treeformula-function-make .......... Passed 13.24 sec. Start 2224: roottest-root-treeformula-morrison-make. 9/19 Test #2224: roottest-root-treeformula-morrison-make .......... Passed 7.61 sec. Start 2225: roottest-root-treeformula-ntuple-make. 10/19 Test #2225: roottest-root-treeformula-ntuple-make ............ Passed 0.61 sec. Start 2226: roottest-root-treeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:6511,availability,operat,operator-make,6511, roottest-root-treeformula-depth-make ............. Passed 0.28 sec. Start 2220: roottest-root-treeformula-event-make. 5/19 Test #2220: roottest-root-treeformula-event-make ............. Passed 4.29 sec. Start 2221: roottest-root-treeformula-evolution-make. 6/19 Test #2221: roottest-root-treeformula-evolution-make ......... Passed 6.01 sec. Start 2222: roottest-root-treeformula-formulaio-make. 7/19 Test #2222: roottest-root-treeformula-formulaio-make ......... Passed 0.56 sec. Start 2223: roottest-root-treeformula-function-make. 8/19 Test #2223: roottest-root-treeformula-function-make .......... Passed 13.24 sec. Start 2224: roottest-root-treeformula-morrison-make. 9/19 Test #2224: roottest-root-treeformula-morrison-make .......... Passed 7.61 sec. Start 2225: roottest-root-treeformula-ntuple-make. 10/19 Test #2225: roottest-root-treeformula-ntuple-make ............ Passed 0.61 sec. Start 2226: roottest-root-treeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7994,availability,operat,operation,7994,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:591,deployability,build,build,591,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:628,deployability,releas,release,628,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1423,deployability,build,build,1423, have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1460,deployability,releas,release,1460,ere are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4066,deployability,Fail,Failed,4066,ula-parse-make ............. Passed 19.49 sec. Start 2229: roottest-root-treeformula-references-make. 13/19 Test #2229: roottest-root-treeformula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottest-root-treeformula-string-make ............ Passed 8.42 sec. Start 2235: roottest-root-treeformula-sync-make. 19/19 Test #2235: roottest-root-treeformula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1827: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.41 sec. Start 1828: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4183,deployability,build,build,4183,9: roottest-root-treeformula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottest-root-treeformula-string-make ............ Passed 8.42 sec. Start 2235: roottest-root-treeformula-sync-make. 19/19 Test #2235: roottest-root-treeformula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1827: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.41 sec. Start 1828: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-treeformula-array-make. 1/19 Test #2216: roottest-root-treeformula-array-make ............. Passed 29.43 sec. Start 2,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4204,deployability,releas,release-master,4204,ula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottest-root-treeformula-string-make ............ Passed 8.42 sec. Start 2235: roottest-root-treeformula-sync-make. 19/19 Test #2235: roottest-root-treeformula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1827: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.41 sec. Start 1828: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-treeformula-array-make. 1/19 Test #2216: roottest-root-treeformula-array-make ............. Passed 29.43 sec. Start 2217: roottest-root-treefo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:5006,deployability,build,build,5006,35: roottest-root-treeformula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1827: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.41 sec. Start 1828: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-treeformula-array-make. 1/19 Test #2216: roottest-root-treeformula-array-make ............. Passed 29.43 sec. Start 2217: roottest-root-treeformula-casting-make. 2/19 Test #2217: roottest-root-treeformula-casting-make ........... Passed 3.40 sec. Start 2218: roottest-root-treeformula-clones-make. 3/19 Test #2218: roottest-root-treeformula-clones-make ............ Passed 0.95 sec. Start 2219: roottest-root-treeformula-depth-make. 4/19 Test #2219: roottest-root-treeformula-depth-make ............. Passed 0.28 sec. Start 2220: roottest-root-treeformula-event-make. 5/19 Test #2220: roottest-root-treeformula-event-make ............. Passed 4.29 sec. Start 2221: roottest-root-treeformula-evolution-make. 6/19 Test #2221: roottest-root-treeformula-evolution-make ......... Passed 6.01 sec. Start 2222: roottest-root-treeformula-formulaio-make. 7/19 Test #2222: roottest-root-treeformula-formulaio-make ......... Passed 0.56 sec. Start 222,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:5027,deployability,releas,release-master,5027,mula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1827: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.41 sec. Start 1828: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-treeformula-array-make. 1/19 Test #2216: roottest-root-treeformula-array-make ............. Passed 29.43 sec. Start 2217: roottest-root-treeformula-casting-make. 2/19 Test #2217: roottest-root-treeformula-casting-make ........... Passed 3.40 sec. Start 2218: roottest-root-treeformula-clones-make. 3/19 Test #2218: roottest-root-treeformula-clones-make ............ Passed 0.95 sec. Start 2219: roottest-root-treeformula-depth-make. 4/19 Test #2219: roottest-root-treeformula-depth-make ............. Passed 0.28 sec. Start 2220: roottest-root-treeformula-event-make. 5/19 Test #2220: roottest-root-treeformula-event-make ............. Passed 4.29 sec. Start 2221: roottest-root-treeformula-evolution-make. 6/19 Test #2221: roottest-root-treeformula-evolution-make ......... Passed 6.01 sec. Start 2222: roottest-root-treeformula-formulaio-make. 7/19 Test #2222: roottest-root-treeformula-formulaio-make ......... Passed 0.56 sec. Start 2223: roottest-root-treeform,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7640,deployability,Fail,Failed,7640,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7690,energy efficiency,optim,optimization,7690,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8161,energy efficiency,optim,optimize,8161,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2051,integrability,event,event-make,2051,-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2106,integrability,event,event-make,2106,ot-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-root-treeformula-parse-make ............. Passed 19.49 ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3567,integrability,schema,schemaEvolution-make,3567,roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-root-treeformula-parse-make ............. Passed 19.49 sec. Start 2229: roottest-root-treeformula-references-make. 13/19 Test #2229: roottest-root-treeformula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottest-root-treeformula-string-make ............ Passed 8.42 sec. Start 2235: roottest-root-treeformula-sync-make. 19/19 Test #2235: roottest-root-treeformula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-a,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:3633,integrability,schema,schemaEvolution-make,3633,-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-root-treeformula-parse-make ............. Passed 19.49 sec. Start 2229: roottest-root-treeformula-references-make. 13/19 Test #2229: roottest-root-treeformula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottest-root-treeformula-string-make ............ Passed 8.42 sec. Start 2235: roottest-root-treeformula-sync-make. 19/19 Test #2235: roottest-root-treeformula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1827: roottest-root-meta-callfunc-execResolveAt-aut,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:5625,integrability,event,event-make,5625,ResolveAt-auto ........ Passed 0.41 sec. Start 1828: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-treeformula-array-make. 1/19 Test #2216: roottest-root-treeformula-array-make ............. Passed 29.43 sec. Start 2217: roottest-root-treeformula-casting-make. 2/19 Test #2217: roottest-root-treeformula-casting-make ........... Passed 3.40 sec. Start 2218: roottest-root-treeformula-clones-make. 3/19 Test #2218: roottest-root-treeformula-clones-make ............ Passed 0.95 sec. Start 2219: roottest-root-treeformula-depth-make. 4/19 Test #2219: roottest-root-treeformula-depth-make ............. Passed 0.28 sec. Start 2220: roottest-root-treeformula-event-make. 5/19 Test #2220: roottest-root-treeformula-event-make ............. Passed 4.29 sec. Start 2221: roottest-root-treeformula-evolution-make. 6/19 Test #2221: roottest-root-treeformula-evolution-make ......... Passed 6.01 sec. Start 2222: roottest-root-treeformula-formulaio-make. 7/19 Test #2222: roottest-root-treeformula-formulaio-make ......... Passed 0.56 sec. Start 2223: roottest-root-treeformula-function-make. 8/19 Test #2223: roottest-root-treeformula-function-make .......... Passed 13.24 sec. Start 2224: roottest-root-treeformula-morrison-make. 9/19 Test #2224: roottest-root-treeformula-morrison-make .......... Passed 7.61 sec. Start 2225: roottest-root-treeformula-ntuple-make. 10/19 Test #2225: roottest-root-treeformula-ntuple-make ............ Passed 0.61 sec. Start 2226: roottest-root-treeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:5680,integrability,event,event-make,5680,ottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-treeformula-array-make. 1/19 Test #2216: roottest-root-treeformula-array-make ............. Passed 29.43 sec. Start 2217: roottest-root-treeformula-casting-make. 2/19 Test #2217: roottest-root-treeformula-casting-make ........... Passed 3.40 sec. Start 2218: roottest-root-treeformula-clones-make. 3/19 Test #2218: roottest-root-treeformula-clones-make ............ Passed 0.95 sec. Start 2219: roottest-root-treeformula-depth-make. 4/19 Test #2219: roottest-root-treeformula-depth-make ............. Passed 0.28 sec. Start 2220: roottest-root-treeformula-event-make. 5/19 Test #2220: roottest-root-treeformula-event-make ............. Passed 4.29 sec. Start 2221: roottest-root-treeformula-evolution-make. 6/19 Test #2221: roottest-root-treeformula-evolution-make ......... Passed 6.01 sec. Start 2222: roottest-root-treeformula-formulaio-make. 7/19 Test #2222: roottest-root-treeformula-formulaio-make ......... Passed 0.56 sec. Start 2223: roottest-root-treeformula-function-make. 8/19 Test #2223: roottest-root-treeformula-function-make .......... Passed 13.24 sec. Start 2224: roottest-root-treeformula-morrison-make. 9/19 Test #2224: roottest-root-treeformula-morrison-make .......... Passed 7.61 sec. Start 2225: roottest-root-treeformula-ntuple-make. 10/19 Test #2225: roottest-root-treeformula-ntuple-make ............ Passed 0.61 sec. Start 2226: roottest-root-treeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7141,integrability,schema,schemaEvolution-make,7141,"roottest-root-treeformula-morrison-make. 9/19 Test #2224: roottest-root-treeformula-morrison-make .......... Passed 7.61 sec. Start 2225: roottest-root-treeformula-ntuple-make. 10/19 Test #2225: roottest-root-treeformula-ntuple-make ............ Passed 0.61 sec. Start 2226: roottest-root-treeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7207,integrability,schema,schemaEvolution-make,7207,"-root-treeformula-morrison-make .......... Passed 7.61 sec. Start 2225: roottest-root-treeformula-ntuple-make. 10/19 Test #2225: roottest-root-treeformula-ntuple-make ............ Passed 0.61 sec. Start 2226: roottest-root-treeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8318,integrability,coupl,couple,8318,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8243,modifiability,maintain,maintain,8243,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8318,modifiability,coupl,couple,8318,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:12,performance,perform,performance,12,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:135,performance,perform,performance,135,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:312,performance,perform,performance,312,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:358,performance,perform,performance,358,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:477,performance,perform,performance,477,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7690,performance,optimiz,optimization,7690,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7734,performance,Improve perform,Improve performance,7734,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8143,performance,time,time,8143,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8161,performance,optimiz,optimize,8161,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8261,performance,perform,performance,8261,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:104,reliability,doe,does,104,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:173,reliability,slo,slowdown,173,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:4066,reliability,Fail,Failed,4066,ula-parse-make ............. Passed 19.49 sec. Start 2229: roottest-root-treeformula-references-make. 13/19 Test #2229: roottest-root-treeformula-references-make ........ Passed 8.65 sec. Start 2230: roottest-root-treeformula-retobj-make. 14/19 Test #2230: roottest-root-treeformula-retobj-make ............ Passed 7.18 sec. Start 2231: roottest-root-treeformula-scan-make. 15/19 Test #2231: roottest-root-treeformula-scan-make .............. Passed 1.24 sec. Start 2232: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2232: roottest-root-treeformula-schemaEvolution-make ... Passed 8.48 sec. Start 2233: roottest-root-treeformula-stl-make. 17/19 Test #2233: roottest-root-treeformula-stl-make ............... Passed 9.25 sec. Start 2234: roottest-root-treeformula-string-make. 18/19 Test #2234: roottest-root-treeformula-string-make ............ Passed 8.42 sec. Start 2235: roottest-root-treeformula-sync-make. 19/19 Test #2235: roottest-root-treeformula-sync-make ..............***Failed 52.53 sec. ```. </details>. <summary>This PR</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-release-master. Start 1825: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1825: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.30 sec. Start 1826: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1826: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.18 sec. Start 1827: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1827: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.41 sec. Start 1828: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1828: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.38 sec. Start 1829: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1829: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.43 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-release-master. Start 2216: roottest-root-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:7640,reliability,Fail,Failed,7640,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:8013,reliability,doe,does,8013,"eeformula-operator-make. 11/19 Test #2226: roottest-root-treeformula-operator-make .......... Passed 1.09 sec. Start 2227: roottest-root-treeformula-parse-make. 12/19 Test #2227: roottest-root-treeformula-parse-make ............. Passed 20.18 sec. Start 2228: roottest-root-treeformula-references-make. 13/19 Test #2228: roottest-root-treeformula-references-make ........ Passed 8.88 sec. Start 2229: roottest-root-treeformula-retobj-make. 14/19 Test #2229: roottest-root-treeformula-retobj-make ............ Passed 7.35 sec. Start 2230: roottest-root-treeformula-scan-make. 15/19 Test #2230: roottest-root-treeformula-scan-make .............. Passed 1.31 sec. Start 2231: roottest-root-treeformula-schemaEvolution-make. 16/19 Test #2231: roottest-root-treeformula-schemaEvolution-make ... Passed 8.64 sec. Start 2232: roottest-root-treeformula-stl-make. 17/19 Test #2232: roottest-root-treeformula-stl-make ............... Passed 9.53 sec. Start 2233: roottest-root-treeformula-string-make. 18/19 Test #2233: roottest-root-treeformula-string-make ............ Passed 8.62 sec. Start 2234: roottest-root-treeformula-sync-make. 19/19 Test #2234: roottest-root-treeformula-sync-make ..............***Failed 51.12 sec. ```. </details>. The enum-based optimization which I introduced in commit [""Improve performance by allowing most of cling::Value to inline""](https://github.com/root-project/root/pull/11252/commits/fa74b5419c3120ab4b5130e53a1844c54dc467c4). Unfortunately it did not show any improvement for callfunc. It helps with inlining the `castAs` operation but that does not bring benefits. That's why I decided to revert it but keep it in the history if we want to apply it. I can further spend time in trying to optimize this but that might be at the cost of making it harder to understand and maintain. If that performance info is acceptable, I will play a bit with a couple of ideas I have and move forward as that's blocking lowering parts of CallFunc to cling standalone. fyi @Axel-Naumann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:190,safety,test,tests,190,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:261,safety,test,tests,261,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:347,safety,test,tested,347,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:577,safety,Test,Test,577,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:700,safety,Test,Test,700,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:854,safety,Test,Test,854,"@pcanal, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Pass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1003,safety,Test,Test,1003,"al, my performance quest did not bring a lot of fruit unfortunately. The good news is that this PR does not introduce significant performance regression. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1152,safety,Test,Test,1152,ion. There is 2-5% slowdown on some tests but I think the improvement of type consistency is worth it. The tests were primarily focused at the TClingCallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1301,safety,Test,Test,1301,CallFunc performance I have not excessively tested the performance of other `cling::Value`-related code as we do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1409,safety,Test,Test,1409,e do not really have an idiom which is widely used. Here are some performance benchmarks details:. <summary>master</summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Pa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1524,safety,Test,Test,1524,/summary>. <details>. ```. ctest -R .*callfunc.* . Test project /build/vvassilev/root-callfunc-master/release. Start 1829: roottest-root-meta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-func,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1662,safety,Test,Test,1662,eta-callfunc-assertUnload-auto. 1/5 Test #1829: roottest-root-meta-callfunc-assertUnload-auto ......... Passed 0.25 sec. Start 1830: roottest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-mor,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1798,safety,Test,Test,1798,ttest-root-meta-callfunc-assertUnloadHelper-auto. 2/5 Test #1830: roottest-root-meta-callfunc-assertUnloadHelper-auto ... Passed 0.16 sec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-nt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:1933,safety,Test,Test,1933,ec. Start 1831: roottest-root-meta-callfunc-execResolveAt-auto. 3/5 Test #1831: roottest-root-meta-callfunc-execResolveAt-auto ........ Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2068,safety,Test,Test,2068, Passed 0.43 sec. Start 1832: roottest-root-meta-callfunc-runmemberFunc-auto. 4/5 Test #1832: roottest-root-meta-callfunc-runmemberFunc-auto ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-root-treeformu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
https://github.com/root-project/root/pull/11252:2207,safety,Test,Test,2207,o ........ Passed 0.34 sec. Start 1833: roottest-root-meta-callfunc-runsimpleFunc-auto. 5/5 Test #1833: roottest-root-meta-callfunc-runsimpleFunc-auto ........ Passed 0.40 sec. ctest -R .*treefor.* . Test project /build/vvassilev/root-callfunc-master/release. Start 2217: roottest-root-treeformula-array-make. 1/19 Test #2217: roottest-root-treeformula-array-make ............. Passed 34.53 sec. Start 2218: roottest-root-treeformula-casting-make. 2/19 Test #2218: roottest-root-treeformula-casting-make ........... Passed 3.28 sec. Start 2219: roottest-root-treeformula-clones-make. 3/19 Test #2219: roottest-root-treeformula-clones-make ............ Passed 0.91 sec. Start 2220: roottest-root-treeformula-depth-make. 4/19 Test #2220: roottest-root-treeformula-depth-make ............. Passed 0.26 sec. Start 2221: roottest-root-treeformula-event-make. 5/19 Test #2221: roottest-root-treeformula-event-make ............. Passed 4.26 sec. Start 2222: roottest-root-treeformula-evolution-make. 6/19 Test #2222: roottest-root-treeformula-evolution-make ......... Passed 5.89 sec. Start 2223: roottest-root-treeformula-formulaio-make. 7/19 Test #2223: roottest-root-treeformula-formulaio-make ......... Passed 0.54 sec. Start 2224: roottest-root-treeformula-function-make. 8/19 Test #2224: roottest-root-treeformula-function-make .......... Passed 12.81 sec. Start 2225: roottest-root-treeformula-morrison-make. 9/19 Test #2225: roottest-root-treeformula-morrison-make .......... Passed 7.55 sec. Start 2226: roottest-root-treeformula-ntuple-make. 10/19 Test #2226: roottest-root-treeformula-ntuple-make ............ Passed 0.58 sec. Start 2227: roottest-root-treeformula-operator-make. 11/19 Test #2227: roottest-root-treeformula-operator-make .......... Passed 1.02 sec. Start 2228: roottest-root-treeformula-parse-make. 12/19 Test #2228: roottest-root-treeformula-parse-make ............. Passed 19.49 sec. Start 2229: roottest-root-treeformula-references-make. 13/19 Test #2229: roottest-root-treefo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11252
