id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/12529:177,energy efficiency,model,models,177,"[RF] Add initial interface and implementation for code-squashing.; This commit adds the initial implementation of the code-squashing approach for AD. Users can now squash their models into a single function that can then be used for evaluation, derivative calculation, minimization, etc., through the RooFuncWrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12529
https://github.com/root-project/root/pull/12529:17,integrability,interfac,interface,17,"[RF] Add initial interface and implementation for code-squashing.; This commit adds the initial implementation of the code-squashing approach for AD. Users can now squash their models into a single function that can then be used for evaluation, derivative calculation, minimization, etc., through the RooFuncWrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12529
https://github.com/root-project/root/pull/12529:17,interoperability,interfac,interface,17,"[RF] Add initial interface and implementation for code-squashing.; This commit adds the initial implementation of the code-squashing approach for AD. Users can now squash their models into a single function that can then be used for evaluation, derivative calculation, minimization, etc., through the RooFuncWrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12529
https://github.com/root-project/root/pull/12529:17,modifiability,interfac,interface,17,"[RF] Add initial interface and implementation for code-squashing.; This commit adds the initial implementation of the code-squashing approach for AD. Users can now squash their models into a single function that can then be used for evaluation, derivative calculation, minimization, etc., through the RooFuncWrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12529
https://github.com/root-project/root/pull/12529:177,security,model,models,177,"[RF] Add initial interface and implementation for code-squashing.; This commit adds the initial implementation of the code-squashing approach for AD. Users can now squash their models into a single function that can then be used for evaluation, derivative calculation, minimization, etc., through the RooFuncWrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12529
https://github.com/root-project/root/pull/12529:150,usability,User,Users,150,"[RF] Add initial interface and implementation for code-squashing.; This commit adds the initial implementation of the code-squashing approach for AD. Users can now squash their models into a single function that can then be used for evaluation, derivative calculation, minimization, etc., through the RooFuncWrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12529
https://github.com/root-project/root/pull/12529:269,usability,minim,minimization,269,"[RF] Add initial interface and implementation for code-squashing.; This commit adds the initial implementation of the code-squashing approach for AD. Users can now squash their models into a single function that can then be used for evaluation, derivative calculation, minimization, etc., through the RooFuncWrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12529
https://github.com/root-project/root/pull/12530:85,safety,test,test,85,[DF] Fix wrong data in CSV data source with user-defined column types ; ...and add a test. This fixes https://github.com/root-project/root/issues/12520.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12530
https://github.com/root-project/root/pull/12530:85,testability,test,test,85,[DF] Fix wrong data in CSV data source with user-defined column types ; ...and add a test. This fixes https://github.com/root-project/root/issues/12520.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12530
https://github.com/root-project/root/pull/12530:44,usability,user,user-defined,44,[DF] Fix wrong data in CSV data source with user-defined column types ; ...and add a test. This fixes https://github.com/root-project/root/issues/12520.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12530
https://github.com/root-project/root/pull/12531:247,energy efficiency,load,loading,247,"[DF] Fix wrong data in CSV data source with user-defined column types (v6.28); When some column types were specified explicitly by the user, RCsvDS forgot to add that type to fColTypesList, which in turn caused RCsvDS::SetEntry to skip the proper loading of some column data. This fixes #12520.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12531
https://github.com/root-project/root/pull/12531:107,interoperability,specif,specified,107,"[DF] Fix wrong data in CSV data source with user-defined column types (v6.28); When some column types were specified explicitly by the user, RCsvDS forgot to add that type to fColTypesList, which in turn caused RCsvDS::SetEntry to skip the proper loading of some column data. This fixes #12520.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12531
https://github.com/root-project/root/pull/12531:247,performance,load,loading,247,"[DF] Fix wrong data in CSV data source with user-defined column types (v6.28); When some column types were specified explicitly by the user, RCsvDS forgot to add that type to fColTypesList, which in turn caused RCsvDS::SetEntry to skip the proper loading of some column data. This fixes #12520.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12531
https://github.com/root-project/root/pull/12531:44,usability,user,user-defined,44,"[DF] Fix wrong data in CSV data source with user-defined column types (v6.28); When some column types were specified explicitly by the user, RCsvDS forgot to add that type to fColTypesList, which in turn caused RCsvDS::SetEntry to skip the proper loading of some column data. This fixes #12520.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12531
https://github.com/root-project/root/pull/12531:135,usability,user,user,135,"[DF] Fix wrong data in CSV data source with user-defined column types (v6.28); When some column types were specified explicitly by the user, RCsvDS forgot to add that type to fColTypesList, which in turn caused RCsvDS::SetEntry to skip the proper loading of some column data. This fixes #12520.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12531
https://github.com/root-project/root/pull/12532:131,availability,state,state,131,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:466,availability,error,error,466,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:49,deployability,unload,unloaded,49,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:84,deployability,unload,unloading,84,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:367,deployability,depend,depends,367,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:408,deployability,unload,unloaded,408,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:131,integrability,state,state,131,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:367,integrability,depend,depends,367,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:536,integrability,coupl,couple,536,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:367,modifiability,depend,depends,367,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:536,modifiability,coupl,couple,536,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:466,performance,error,error,466,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:367,safety,depend,depends,367,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:466,safety,error,error,466,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:367,testability,depend,depends,367,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:536,testability,coupl,couple,536,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/pull/12532:466,usability,error,error,466,"Resolve issue when dictionary with std::tuple is unloaded.; This fixes #12358. When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of `std::tuple` is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12532
https://github.com/root-project/root/issues/12533:346,energy efficiency,current,currently,346,"Backport missing commits to our fork of the LLVM monorepo; Hi @Axel-Naumann,. Could you backport [root-project/root#11874](https://github.com/root-project/root/pull/11874), [root-project/root#12179](https://github.com/root-project/root/pull/12179), [root-project/root#12418](https://github.com/root-project/root/pull/12418) to the monorepo. This currently makes theoretically impossible for https://github.com/root-project/root/pull/12523 to go in.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12533
https://github.com/root-project/root/pull/12534:77,performance,time,time,77,[webcanvas] Implement `projxy` feature; Allows to show both projections at a time. Also prevents websocket overloading. Includes jsroot with standalone feature. Resolves #10660 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12534
https://github.com/root-project/root/pull/12534:88,safety,prevent,prevents,88,[webcanvas] Implement `projxy` feature; Allows to show both projections at a time. Also prevents websocket overloading. Includes jsroot with standalone feature. Resolves #10660 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12534
https://github.com/root-project/root/pull/12534:88,security,preven,prevents,88,[webcanvas] Implement `projxy` feature; Allows to show both projections at a time. Also prevents websocket overloading. Includes jsroot with standalone feature. Resolves #10660 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12534
https://github.com/root-project/root/issues/12535:493,availability,down,download,493,"TGraph2D's Interpolate() returns 0; This issue is made as a follow-up of the discussion in: https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172. The Interpolate() method on TGraph2D sometimes returns 0.0 on a perfectly interpolatable coordinates. For example, this is how my graph looks like drawn with “colz” option:. <img src=""https://user-images.githubusercontent.com/67898371/227203785-b6fd576d-7757-496f-807e-4375156e2def.png"" width=""500"">. To reproduce the problem, please download the file attached in the above root forum post and execute:. ```. root yield_graphs.root. graph_yield_nom->Interpolate(750, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(760, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(770, 500) // this returns zero. graph_yield_nom->Interpolate(780, 500) // this returns zero. graph_yield_nom->Interpolate(790, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(800, 500) // this returns zero. ```. The coordinates that return zero are within interpolation range as shown by the plot. So they should have returned non-zero values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12535
https://github.com/root-project/root/issues/12535:306,energy efficiency,draw,drawn,306,"TGraph2D's Interpolate() returns 0; This issue is made as a follow-up of the discussion in: https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172. The Interpolate() method on TGraph2D sometimes returns 0.0 on a perfectly interpolatable coordinates. For example, this is how my graph looks like drawn with “colz” option:. <img src=""https://user-images.githubusercontent.com/67898371/227203785-b6fd576d-7757-496f-807e-4375156e2def.png"" width=""500"">. To reproduce the problem, please download the file attached in the above root forum post and execute:. ```. root yield_graphs.root. graph_yield_nom->Interpolate(750, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(760, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(770, 500) // this returns zero. graph_yield_nom->Interpolate(780, 500) // this returns zero. graph_yield_nom->Interpolate(790, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(800, 500) // this returns zero. ```. The coordinates that return zero are within interpolation range as shown by the plot. So they should have returned non-zero values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12535
https://github.com/root-project/root/issues/12535:248,interoperability,coordinat,coordinates,248,"TGraph2D's Interpolate() returns 0; This issue is made as a follow-up of the discussion in: https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172. The Interpolate() method on TGraph2D sometimes returns 0.0 on a perfectly interpolatable coordinates. For example, this is how my graph looks like drawn with “colz” option:. <img src=""https://user-images.githubusercontent.com/67898371/227203785-b6fd576d-7757-496f-807e-4375156e2def.png"" width=""500"">. To reproduce the problem, please download the file attached in the above root forum post and execute:. ```. root yield_graphs.root. graph_yield_nom->Interpolate(750, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(760, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(770, 500) // this returns zero. graph_yield_nom->Interpolate(780, 500) // this returns zero. graph_yield_nom->Interpolate(790, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(800, 500) // this returns zero. ```. The coordinates that return zero are within interpolation range as shown by the plot. So they should have returned non-zero values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12535
https://github.com/root-project/root/issues/12535:1003,interoperability,coordinat,coordinates,1003,"TGraph2D's Interpolate() returns 0; This issue is made as a follow-up of the discussion in: https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172. The Interpolate() method on TGraph2D sometimes returns 0.0 on a perfectly interpolatable coordinates. For example, this is how my graph looks like drawn with “colz” option:. <img src=""https://user-images.githubusercontent.com/67898371/227203785-b6fd576d-7757-496f-807e-4375156e2def.png"" width=""500"">. To reproduce the problem, please download the file attached in the above root forum post and execute:. ```. root yield_graphs.root. graph_yield_nom->Interpolate(750, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(760, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(770, 500) // this returns zero. graph_yield_nom->Interpolate(780, 500) // this returns zero. graph_yield_nom->Interpolate(790, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(800, 500) // this returns zero. ```. The coordinates that return zero are within interpolation range as shown by the plot. So they should have returned non-zero values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12535
https://github.com/root-project/root/issues/12535:351,usability,user,user-images,351,"TGraph2D's Interpolate() returns 0; This issue is made as a follow-up of the discussion in: https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172. The Interpolate() method on TGraph2D sometimes returns 0.0 on a perfectly interpolatable coordinates. For example, this is how my graph looks like drawn with “colz” option:. <img src=""https://user-images.githubusercontent.com/67898371/227203785-b6fd576d-7757-496f-807e-4375156e2def.png"" width=""500"">. To reproduce the problem, please download the file attached in the above root forum post and execute:. ```. root yield_graphs.root. graph_yield_nom->Interpolate(750, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(760, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(770, 500) // this returns zero. graph_yield_nom->Interpolate(780, 500) // this returns zero. graph_yield_nom->Interpolate(790, 500) // this returns a non-zero value. graph_yield_nom->Interpolate(800, 500) // this returns zero. ```. The coordinates that return zero are within interpolation range as shown by the plot. So they should have returned non-zero values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12535
https://github.com/root-project/root/pull/12536:119,deployability,depend,dependencies,119,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:119,integrability,depend,dependencies,119,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:87,modifiability,concern,concern,87,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:119,modifiability,depend,dependencies,119,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:119,safety,depend,dependencies,119,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:210,safety,review,reviewing,210,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:87,testability,concern,concern,87,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:119,testability,depend,dependencies,119,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/pull/12536:210,testability,review,reviewing,210,"A few Roofit issues; In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things. Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12536
https://github.com/root-project/root/issues/12537:279,availability,error,error,279,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:288,availability,Error,Error,288,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:226,deployability,depend,depending,226,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:244,deployability,version,version,244,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:483,deployability,version,versions,483,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:533,deployability,stack,stack,533,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:226,integrability,depend,depending,226,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:244,integrability,version,version,244,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:483,integrability,version,versions,483,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:226,modifiability,depend,depending,226,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:244,modifiability,version,version,244,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:483,modifiability,version,versions,483,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:279,performance,error,error,279,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:288,performance,Error,Error,288,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:605,reliability,doe,doesn,605,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:226,safety,depend,depending,226,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:279,safety,error,error,279,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:288,safety,Error,Error,288,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:644,security,Access,Accessing,644,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:226,testability,depend,depending,226,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:279,usability,error,error,279,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/issues/12537:288,usability,Error,Error,288,"Segmentation violation when trying to open particular cycle using TBrowser; When opening files reconstructed with the SHiP framework, trying to open the second cycle of the cbmsim tree results in a segmentation violation and (depending on ROOT version? not always) the following error:. `Error in <TBufferFile::CheckByteCount>: object of class TClonesArray read too few bytes: 66 instead of 7071`. A small reproducer file:. https://cernbox.cern.ch/s/MSDo7DAuFOuUlMc. Tried with ROOT versions 6.26/06, 6.26/02, from the SHiP software stack and from conda, both using `rootbrowse` and `root`. I assume ROOT doesn't like how this file is created. Accessing all branches using (py)ROOT seems to work fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12537
https://github.com/root-project/root/pull/12538:14,usability,indicat,indicator,14,[webgeom] add indicator for selected node; Show special symbol for selected node like:. ![GeomTopNode](https://user-images.githubusercontent.com/4936580/227247074-e6fb3ea4-d783-4aaa-ba56-10310a4f7785.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12538
https://github.com/root-project/root/pull/12538:111,usability,user,user-images,111,[webgeom] add indicator for selected node; Show special symbol for selected node like:. ![GeomTopNode](https://user-images.githubusercontent.com/4936580/227247074-e6fb3ea4-d783-4aaa-ba56-10310a4f7785.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12538
https://github.com/root-project/root/pull/12539:226,deployability,build,builds,226,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:260,deployability,build,builds,260,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:357,deployability,contain,containers,357,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:420,deployability,updat,updated,420,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:390,safety,test,tested,390,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:420,safety,updat,updated,420,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:420,security,updat,updated,420,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:390,testability,test,tested,390,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/pull/12539:345,usability,user,user,345,"[CI] Add windows (x64|x86), macOS 13 jobs; resolves #12268. resolves #12267. [skip-ci]. I did big changes to the python script so bundling macOS and windows to a single PR makes thing easier. ## Main changes:. - Adds macOS 13 builds (ARM64). - Adds Windows 10 builds (x64, x86). ## Minor fixes:. - Disable running script as root. - Use non-root user inside containers. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12539
https://github.com/root-project/root/issues/12540:1572,availability,Operat,Operating,1572,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1654,availability,Down,Downloaded,1654,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1719,availability,Operat,Operating,1719,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1798,availability,Down,Downloaded,1798,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:918,deployability,build,build,918,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1540,deployability,version,version,1540,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1669,deployability,instal,installer,1669,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1690,deployability,version,version,1690,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1813,deployability,instal,installer,1813,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:557,integrability,messag,message,557,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1540,integrability,version,version,1540,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1690,integrability,version,version,1690,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:557,interoperability,messag,message,557,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1540,modifiability,version,version,1540,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1690,modifiability,version,version,1690,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:18,safety,except,exception,18,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:512,safety,Except,Exception,512,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:872,safety,input,input,872,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1839,testability,context,context,1839,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1868,testability,context,context,1868,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:446,usability,clear,clear,446,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:494,usability,behavi,behavior,494,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:595,usability,behavi,behavior,595,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:613,usability,clear,clear,613,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:727,usability,behavi,behavior,727,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:872,usability,input,input,872,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1597,usability,Visual,Visual,1597,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/issues/12540:1744,usability,Visual,Visual,1744,"std::length_error exception when RDataFrame is created; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Exception is throwing std::length_error with message vector too long. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. #include <ROOT/RDataFrame.hxx>. #include <TFile.h>. #include <TTree.h>. int. main(int argc, char* argv[]). {. std::uint32_t v0 = 0;. std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");. TTree tree(""tree-name"", ""tree-title"");. tree.Branch(""v0"", &v0);. tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i). {. v0 = i;. v1 = i * 2;. tree.Fill();. }. tree.Scan();. tree.Write();. try. {. ROOT::RDataFrame df(tree);. }. catch (std::length_error& ex). {. std::cout << ex.what() << std::endl;. std::cout << std::endl;. }. return 0;. }. ```. ### Setup. <!--. 1. ROOT version 6.26.10 and 6.29.01. 2. Operating system Windows Visual Studio 2022 64-bit x64 . 3. How you obtained ROOT Downloaded exe installer. -->. ROOT version 6.26.10 and 6.29.01. Operating system Windows Visual Studio 2022 64-bit x64 . How you obtained ROOT Downloaded exe installer. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12540
https://github.com/root-project/root/pull/12542:443,deployability,updat,updated,443,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:682,deployability,observ,observed,682,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:62,integrability,interfac,interface,62,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:148,integrability,interfac,interface,148,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:62,interoperability,interfac,interface,62,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:148,interoperability,interfac,interface,148,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:159,interoperability,Specif,Specifically,159,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:62,modifiability,interfac,interface,62,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:148,modifiability,interfac,interface,148,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:443,safety,updat,updated,443,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:725,safety,test,tested,725,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:13,security,misus,misuse,13,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:99,security,misus,misuse,99,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:292,security,misus,misuse,292,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:443,security,updat,updated,443,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:682,testability,observ,observed,682,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:725,testability,test,tested,725,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:341,usability,document,documentation,341,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12542:399,usability,document,documentation,399,"[ntuple] Fix misuse of the `TVirtualCollectionProxy` iterator interface; This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12542
https://github.com/root-project/root/pull/12543:112,energy efficiency,draw,draw,112,"New class TScatter; This new class implements scatter plots like in mathplotlib. A TScatter is a TGraph able to draw four variables on a single plot. The two first. variables are the x and y position of the markers and the 3rd is mapped on the current. color map and the 4th on the marker size. <img width=""692"" alt=""Screenshot 2023-03-24 at 16 27 38"" src=""https://user-images.githubusercontent.com/4697738/227569572-f69961a7-2194-41e3-b695-86617e6d2083.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12543
https://github.com/root-project/root/pull/12543:244,energy efficiency,current,current,244,"New class TScatter; This new class implements scatter plots like in mathplotlib. A TScatter is a TGraph able to draw four variables on a single plot. The two first. variables are the x and y position of the markers and the 3rd is mapped on the current. color map and the 4th on the marker size. <img width=""692"" alt=""Screenshot 2023-03-24 at 16 27 38"" src=""https://user-images.githubusercontent.com/4697738/227569572-f69961a7-2194-41e3-b695-86617e6d2083.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12543
https://github.com/root-project/root/pull/12543:122,modifiability,variab,variables,122,"New class TScatter; This new class implements scatter plots like in mathplotlib. A TScatter is a TGraph able to draw four variables on a single plot. The two first. variables are the x and y position of the markers and the 3rd is mapped on the current. color map and the 4th on the marker size. <img width=""692"" alt=""Screenshot 2023-03-24 at 16 27 38"" src=""https://user-images.githubusercontent.com/4697738/227569572-f69961a7-2194-41e3-b695-86617e6d2083.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12543
https://github.com/root-project/root/pull/12543:165,modifiability,variab,variables,165,"New class TScatter; This new class implements scatter plots like in mathplotlib. A TScatter is a TGraph able to draw four variables on a single plot. The two first. variables are the x and y position of the markers and the 3rd is mapped on the current. color map and the 4th on the marker size. <img width=""692"" alt=""Screenshot 2023-03-24 at 16 27 38"" src=""https://user-images.githubusercontent.com/4697738/227569572-f69961a7-2194-41e3-b695-86617e6d2083.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12543
https://github.com/root-project/root/pull/12543:365,usability,user,user-images,365,"New class TScatter; This new class implements scatter plots like in mathplotlib. A TScatter is a TGraph able to draw four variables on a single plot. The two first. variables are the x and y position of the markers and the 3rd is mapped on the current. color map and the 4th on the marker size. <img width=""692"" alt=""Screenshot 2023-03-24 at 16 27 38"" src=""https://user-images.githubusercontent.com/4697738/227569572-f69961a7-2194-41e3-b695-86617e6d2083.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12543
https://github.com/root-project/root/pull/12544:22,availability,failur,failures,22,"Fix remaining CI test failures [skip-ci]; Its Python 3.11 needs the upcoming Spark release, see https://github.com/apache/spark/pull/38987.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12544
https://github.com/root-project/root/pull/12544:22,deployability,fail,failures,22,"Fix remaining CI test failures [skip-ci]; Its Python 3.11 needs the upcoming Spark release, see https://github.com/apache/spark/pull/38987.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12544
https://github.com/root-project/root/pull/12544:83,deployability,releas,release,83,"Fix remaining CI test failures [skip-ci]; Its Python 3.11 needs the upcoming Spark release, see https://github.com/apache/spark/pull/38987.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12544
https://github.com/root-project/root/pull/12544:22,performance,failur,failures,22,"Fix remaining CI test failures [skip-ci]; Its Python 3.11 needs the upcoming Spark release, see https://github.com/apache/spark/pull/38987.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12544
https://github.com/root-project/root/pull/12544:22,reliability,fail,failures,22,"Fix remaining CI test failures [skip-ci]; Its Python 3.11 needs the upcoming Spark release, see https://github.com/apache/spark/pull/38987.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12544
https://github.com/root-project/root/pull/12544:17,safety,test,test,17,"Fix remaining CI test failures [skip-ci]; Its Python 3.11 needs the upcoming Spark release, see https://github.com/apache/spark/pull/38987.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12544
https://github.com/root-project/root/pull/12544:17,testability,test,test,17,"Fix remaining CI test failures [skip-ci]; Its Python 3.11 needs the upcoming Spark release, see https://github.com/apache/spark/pull/38987.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12544
https://github.com/root-project/root/pull/12545:449,safety,test,test,449,"[math] Fix Delaunay 2D interpolation; Fix Delaunay 2D interpolation when the interpolated points are on at tringle's edges. . This is often the case when interpolating points laying in a grid, see https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172 (linked also from the issue report). . Before a crude hack was present, which could not work if the edge is horizontal. . . Clean up also the class code and improve comments. Add also a test for the interpolation on points on the edges. This PR fixes #12535 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12545
https://github.com/root-project/root/pull/12545:317,security,hack,hack,317,"[math] Fix Delaunay 2D interpolation; Fix Delaunay 2D interpolation when the interpolated points are on at tringle's edges. . This is often the case when interpolating points laying in a grid, see https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172 (linked also from the issue report). . Before a crude hack was present, which could not work if the edge is horizontal. . . Clean up also the class code and improve comments. Add also a test for the interpolation on points on the edges. This PR fixes #12535 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12545
https://github.com/root-project/root/pull/12545:449,testability,test,test,449,"[math] Fix Delaunay 2D interpolation; Fix Delaunay 2D interpolation when the interpolated points are on at tringle's edges. . This is often the case when interpolating points laying in a grid, see https://root-forum.cern.ch/t/tgraph2d-interpolate-returns-0/54172 (linked also from the issue report). . Before a crude hack was present, which could not work if the edge is horizontal. . . Clean up also the class code and improve comments. Add also a test for the interpolation on points on the edges. This PR fixes #12535 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12545
https://github.com/root-project/root/pull/12546:39,energy efficiency,adapt,adaptation,39,[RF] Refactor RooAddHelpers for easier adaptation to code generation later; To fill out later.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12546
https://github.com/root-project/root/pull/12546:39,integrability,adapt,adaptation,39,[RF] Refactor RooAddHelpers for easier adaptation to code generation later; To fill out later.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12546
https://github.com/root-project/root/pull/12546:39,interoperability,adapt,adaptation,39,[RF] Refactor RooAddHelpers for easier adaptation to code generation later; To fill out later.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12546
https://github.com/root-project/root/pull/12546:5,modifiability,Refact,Refactor,5,[RF] Refactor RooAddHelpers for easier adaptation to code generation later; To fill out later.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12546
https://github.com/root-project/root/pull/12546:39,modifiability,adapt,adaptation,39,[RF] Refactor RooAddHelpers for easier adaptation to code generation later; To fill out later.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12546
https://github.com/root-project/root/pull/12546:5,performance,Refactor,Refactor,5,[RF] Refactor RooAddHelpers for easier adaptation to code generation later; To fill out later.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12546
https://github.com/root-project/root/issues/12547:312,deployability,depend,dependency,312,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:204,integrability,event,event,204,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:312,integrability,depend,dependency,312,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:312,modifiability,depend,dependency,312,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:65,performance,perform,performance,65,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:156,performance,perform,performance,156,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:296,performance,cach,cache,296,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:237,reliability,doe,does,237,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:312,safety,depend,dependency,312,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:312,testability,depend,dependency,312,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:65,usability,perform,performance,65,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12547:156,usability,perform,performance,156,"[math] Mark `TRandom3::Rndm()` and similar functions `final` for performance; The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12547
https://github.com/root-project/root/issues/12548:238,deployability,manag,manage,238,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:310,deployability,depend,dependency,310,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1587,deployability,fail,fails,1587,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:238,energy efficiency,manag,manage,238,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1195,energy efficiency,alloc,allocator,1195,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1359,energy efficiency,alloc,allocator,1359,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:310,integrability,depend,dependency,310,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1811,interoperability,bind,bindings,1811,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:310,modifiability,depend,dependency,310,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1811,modifiability,bind,bindings,1811,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1587,reliability,fail,fails,1587,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:238,safety,manag,manage,238,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:310,safety,depend,dependency,310,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:345,safety,test,test,345,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:357,safety,test,test,357,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:500,safety,test,test,500,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1600,safety,prevent,prevents,1600,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:1600,security,preven,prevents,1600,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:148,testability,trace,traced,148,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:310,testability,depend,dependency,310,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:345,testability,test,test,345,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:357,testability,test,test,357,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12548:500,testability,test,test,500,"Name normalization problem with some boost::histogram functions; Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include <iostream>. #include <boost/histogram.hpp>. int test() {. auto ns = TClass::GetClass(""boost::histogram"");. auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;. std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());. std::cout << ""cl: "" << cl << std::endl;. return 0;. }. ```. output:. ```. meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >. meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >. cl: 0. (int) 0. ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12548
https://github.com/root-project/root/issues/12549:1062,availability,error,error,1062," pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1355,availability,Error,Error,1355,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2054,availability,Error,Error,2054,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:751,deployability,fail,fails,751,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1396,deployability,Fail,Failed,1396,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:867,integrability,wrap,wrapper,867,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2139,integrability,wrap,wrapper,2139,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:867,interoperability,wrapper,wrapper,867,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2139,interoperability,wrapper,wrapper,2139,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:56,modifiability,paramet,parameter,56,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:66,modifiability,pac,pack,66,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1062,performance,error,error,1062," pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1355,performance,Error,Error,1355,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2054,performance,Error,Error,2054,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:6,reliability,doe,doesn,6,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:751,reliability,fail,fails,751,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1396,reliability,Fail,Failed,1396,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1440,reliability,pra,pragma,1440,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1453,reliability,diagno,diagnostic,1453,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1471,reliability,pra,pragma,1471,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1484,reliability,diagno,diagnostic,1484,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2003,reliability,pra,pragma,2003,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2016,reliability,diagno,diagnostic,2016,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:95,safety,test,test,95,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:107,safety,test,test,107,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:398,safety,test,test,398,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:900,safety,prevent,prevents,900,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1048,safety,test,test,1048,"ter a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ==",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1062,safety,error,error,1062," pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1355,safety,Error,Error,1355,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2054,safety,Error,Error,2054,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:900,security,preven,prevents,900,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1513,security,secur,security,1513,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:95,testability,test,test,95,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:107,testability,test,test,107,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:398,testability,test,test,398,"Cling doesn't play nice with template arguments after a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1048,testability,test,test,1048,"ter a parameter pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ==",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1453,testability,diagno,diagnostic,1453,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1484,testability,diagno,diagnostic,1484,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2016,testability,diagno,diagnostic,2016,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1062,usability,error,error,1062," pack; Consider the following test case:. test.c. ```cpp. #include ""TInterpreter.h"". #include ""TClass.h"". #include ""TMethod.h"". #include ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:1355,usability,Error,Error,1355,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/issues/12549:2054,usability,Error,Error,2054,"lude ""TROOT.h"". #include <iostream>. struct Dummy {. double x;. };. struct Dummy2{. };. template<typename... Args, typename Extra = Dummy2>. double sumT(Args... args) {. return (args.x + ...);. }. int test() {. auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");. TMethodCall call_explicit(meth_explicit);. double res;. const Dummy arg{5.};. const void *args[3] = {&arg, &arg, &arg};. call_explicit.Execute(nullptr, args, 3, &res);. std::cout << ""res = "" << res << std::endl;. return 0;. }. ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```. In file included from input_line_8:1:. /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'. return (args.x + ...);. ~~~~ ^. input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. ^. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. else {. (void)(((double (&)(Dummy, Dummy,. Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],. *(Dummy*)args[2]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <TClingCallFunc::ExecWithArgsAndReturn(address, args, ret)>: Called with no wrapper, not implemented! res = 7.31217e-322. (int) 0. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12549
https://github.com/root-project/root/pull/12550:18,safety,test,test,18,[ntuple] Add unit test for templated user classes; Mimics one of the common user class patterns in CMS AODs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12550
https://github.com/root-project/root/pull/12550:13,testability,unit,unit,13,[ntuple] Add unit test for templated user classes; Mimics one of the common user class patterns in CMS AODs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12550
https://github.com/root-project/root/pull/12550:18,testability,test,test,18,[ntuple] Add unit test for templated user classes; Mimics one of the common user class patterns in CMS AODs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12550
https://github.com/root-project/root/pull/12550:37,usability,user,user,37,[ntuple] Add unit test for templated user classes; Mimics one of the common user class patterns in CMS AODs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12550
https://github.com/root-project/root/pull/12550:76,usability,user,user,76,[ntuple] Add unit test for templated user classes; Mimics one of the common user class patterns in CMS AODs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12550
https://github.com/root-project/root/pull/12551:497,availability,state,state,497,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:293,deployability,contain,containers,293,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:360,deployability,contain,containers,360,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:423,deployability,contain,containers,423,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:555,deployability,updat,updated,555,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:497,integrability,state,state,497,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:525,safety,test,tested,525,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:555,safety,updat,updated,555,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:555,security,updat,updated,555,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:525,testability,test,tested,525,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:0,usability,User,User,0,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:5,usability,guid,guide,5,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:94,usability,document,documentation,94,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:168,usability,user,user,168,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:173,usability,guid,guide,173,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:249,usability,Support,Support,249,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:375,usability,support,supported,375,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/pull/12551:438,usability,support,supported,438,"User guide: remove contradiciton on STL splitting; # This Pull request:. While looking at the documentation for split branches, I noticed a direct contradiction in the user guide:. > As of ROOT 4.01/00, only `std::vector` of objects can be split. > Support for splitting the other type of STL containers will be. > introduced in the near future. vs. > All STL containers are supported. ## Changes or fixes:. As now all STL containers are supported, I remove the bullet discussion the ROOT 4.01/00 state. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12551
https://github.com/root-project/root/issues/12552:436,deployability,depend,depends,436,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:543,deployability,contain,contains,543,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:1068,deployability,version,versions,1068,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:20,energy efficiency,load,loading,20,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:531,energy efficiency,load,loaded,531,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:732,energy efficiency,load,load,732,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:913,energy efficiency,load,loaded,913,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:931,energy efficiency,current,currently,931,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:987,energy efficiency,load,loading,987,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:436,integrability,depend,depends,436,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:1068,integrability,version,versions,1068,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:1100,integrability,event,eventually,1100,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:39,interoperability,share,shared,39,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:512,interoperability,share,shared,512,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:717,interoperability,share,shared,717,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:895,interoperability,share,shared,895,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:972,interoperability,share,shared,972,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:436,modifiability,depend,depends,436,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:1068,modifiability,version,versions,1068,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:20,performance,load,loading,20,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:416,performance,lock,locking,416,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:531,performance,load,loaded,531,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:677,performance,lock,lock,677,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:732,performance,load,load,732,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:882,performance,lock,lock,882,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:913,performance,load,loaded,913,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:987,performance,load,loading,987,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:1020,performance,lock,lock,1020,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:408,reliability,doe,does,408,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:436,safety,depend,depends,436,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:416,security,lock,locking,416,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:677,security,lock,lock,677,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:824,security,modif,modifies,824,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:882,security,lock,lock,882,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:964,security,hack,hacking,964,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:1020,security,lock,lock,1020,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:1035,security,hack,hack,1035,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:436,testability,depend,depends,436,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/issues/12552:359,usability,effectiv,effectively,359,"Race condition when loading dictionary shared libraries; As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary. information (see ATR-25049). The ROOT internal class TClassTable records information about all classes. that could potentially be created. This is effectively a singleton,. but TClassTable itself does no locking. Rather, it depends on callers. already having acquired the root internal mutex. When a shared library. is loaded that contains dictionary information, TClassTable gets calls. to register information for classes defined in that file. However,. the ROOT lock is not acquired in that case. So a shared library load. could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock. when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading. in order to acquire the lock, but this hack is not possible with newer. versions of glibc, so this will eventually become a blocker for. moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12552
https://github.com/root-project/root/pull/12553:170,availability,operat,operations,170,TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12553
https://github.com/root-project/root/pull/12553:225,availability,operat,operation,225,TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12553
https://github.com/root-project/root/pull/12553:273,performance,lock,lock,273,TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12553
https://github.com/root-project/root/pull/12553:273,security,lock,lock,273,TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12553
https://github.com/root-project/root/pull/12554:119,deployability,observ,observables,119,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:299,deployability,observ,observables,299,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:368,deployability,build,buildCall,368,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:135,modifiability,paramet,parameters,135,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:284,modifiability,paramet,parameters,284,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:76,performance,memor,memory,76,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:393,safety,avoid,avoid,393,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:468,safety,test,test,468,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:83,security,access,access,83,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:119,testability,observ,observables,119,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:299,testability,observ,observables,299,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:463,testability,unit,unit,463,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:468,testability,test,test,468,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:76,usability,memor,memory,76,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12554:423,usability,support,support,423,"[RF] Minor improvements to RooFit evaluation code generation; * fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12554
https://github.com/root-project/root/pull/12555:205,performance,cach,cached,205,"SelectorDraw: allow rebinning when using SetEstimate(GetEntries()).; This address one of the issue noted in https://sft.its.cern.ch/jira/browse/ROOT-2869. Instead of resetting`fNfill` (i.e. forgetting all cached data) right after taking an action (actual putting the data into the histogram), we now reset it at the beginning of the entry processing if we took action during the previous processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12555
https://github.com/root-project/root/pull/12556:30,deployability,observ,observables,30,"[RF] Don't add `weightVar` to observables in HistFactory; It doesn't make sense to have the weight variable in the set of observables. This causes problems in various places, e.g.:. * this dummy `weightVar` is polluting the JSON file when exporting the workspace. * it is a nuisance for normalization because it will also appear in the normalization sets. This commit suggests to not add some dummy weight variable to the workspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12556
https://github.com/root-project/root/pull/12556:122,deployability,observ,observables,122,"[RF] Don't add `weightVar` to observables in HistFactory; It doesn't make sense to have the weight variable in the set of observables. This causes problems in various places, e.g.:. * this dummy `weightVar` is polluting the JSON file when exporting the workspace. * it is a nuisance for normalization because it will also appear in the normalization sets. This commit suggests to not add some dummy weight variable to the workspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12556
https://github.com/root-project/root/pull/12556:99,modifiability,variab,variable,99,"[RF] Don't add `weightVar` to observables in HistFactory; It doesn't make sense to have the weight variable in the set of observables. This causes problems in various places, e.g.:. * this dummy `weightVar` is polluting the JSON file when exporting the workspace. * it is a nuisance for normalization because it will also appear in the normalization sets. This commit suggests to not add some dummy weight variable to the workspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12556
https://github.com/root-project/root/pull/12556:406,modifiability,variab,variable,406,"[RF] Don't add `weightVar` to observables in HistFactory; It doesn't make sense to have the weight variable in the set of observables. This causes problems in various places, e.g.:. * this dummy `weightVar` is polluting the JSON file when exporting the workspace. * it is a nuisance for normalization because it will also appear in the normalization sets. This commit suggests to not add some dummy weight variable to the workspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12556
https://github.com/root-project/root/pull/12556:61,reliability,doe,doesn,61,"[RF] Don't add `weightVar` to observables in HistFactory; It doesn't make sense to have the weight variable in the set of observables. This causes problems in various places, e.g.:. * this dummy `weightVar` is polluting the JSON file when exporting the workspace. * it is a nuisance for normalization because it will also appear in the normalization sets. This commit suggests to not add some dummy weight variable to the workspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12556
https://github.com/root-project/root/pull/12556:30,testability,observ,observables,30,"[RF] Don't add `weightVar` to observables in HistFactory; It doesn't make sense to have the weight variable in the set of observables. This causes problems in various places, e.g.:. * this dummy `weightVar` is polluting the JSON file when exporting the workspace. * it is a nuisance for normalization because it will also appear in the normalization sets. This commit suggests to not add some dummy weight variable to the workspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12556
https://github.com/root-project/root/pull/12556:122,testability,observ,observables,122,"[RF] Don't add `weightVar` to observables in HistFactory; It doesn't make sense to have the weight variable in the set of observables. This causes problems in various places, e.g.:. * this dummy `weightVar` is polluting the JSON file when exporting the workspace. * it is a nuisance for normalization because it will also appear in the normalization sets. This commit suggests to not add some dummy weight variable to the workspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12556
https://github.com/root-project/root/pull/12557:91,usability,support,supported,91,Fix compilation warnings on Windows; Fix several `warning C5033: 'register' is no longer a supported storage class` in asimage.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12557
https://github.com/root-project/root/pull/12558:314,deployability,updat,update,314,Support `TAttText` and `TGaxis` in TWebCanvas GED; 1. Special handler of `TAttText` in jsroot. 2. Dedicated fragment in `TWebCanvas` GED. 3. Let select `TGaxis` object on canvas. 4. Support `TGaxis` in GED. 5. Fix - background color in geo painter. 6. Fix - correct placing of `TLegend` header. 7. Fix - correctly update TH1 drawing when fSumw2 changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12558
https://github.com/root-project/root/pull/12558:325,energy efficiency,draw,drawing,325,Support `TAttText` and `TGaxis` in TWebCanvas GED; 1. Special handler of `TAttText` in jsroot. 2. Dedicated fragment in `TWebCanvas` GED. 3. Let select `TGaxis` object on canvas. 4. Support `TGaxis` in GED. 5. Fix - background color in geo painter. 6. Fix - correct placing of `TLegend` header. 7. Fix - correctly update TH1 drawing when fSumw2 changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12558
https://github.com/root-project/root/pull/12558:314,safety,updat,update,314,Support `TAttText` and `TGaxis` in TWebCanvas GED; 1. Special handler of `TAttText` in jsroot. 2. Dedicated fragment in `TWebCanvas` GED. 3. Let select `TGaxis` object on canvas. 4. Support `TGaxis` in GED. 5. Fix - background color in geo painter. 6. Fix - correct placing of `TLegend` header. 7. Fix - correctly update TH1 drawing when fSumw2 changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12558
https://github.com/root-project/root/pull/12558:314,security,updat,update,314,Support `TAttText` and `TGaxis` in TWebCanvas GED; 1. Special handler of `TAttText` in jsroot. 2. Dedicated fragment in `TWebCanvas` GED. 3. Let select `TGaxis` object on canvas. 4. Support `TGaxis` in GED. 5. Fix - background color in geo painter. 6. Fix - correct placing of `TLegend` header. 7. Fix - correctly update TH1 drawing when fSumw2 changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12558
https://github.com/root-project/root/pull/12558:0,usability,Support,Support,0,Support `TAttText` and `TGaxis` in TWebCanvas GED; 1. Special handler of `TAttText` in jsroot. 2. Dedicated fragment in `TWebCanvas` GED. 3. Let select `TGaxis` object on canvas. 4. Support `TGaxis` in GED. 5. Fix - background color in geo painter. 6. Fix - correct placing of `TLegend` header. 7. Fix - correctly update TH1 drawing when fSumw2 changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12558
https://github.com/root-project/root/pull/12558:182,usability,Support,Support,182,Support `TAttText` and `TGaxis` in TWebCanvas GED; 1. Special handler of `TAttText` in jsroot. 2. Dedicated fragment in `TWebCanvas` GED. 3. Let select `TGaxis` object on canvas. 4. Support `TGaxis` in GED. 5. Fix - background color in geo painter. 6. Fix - correct placing of `TLegend` header. 7. Fix - correctly update TH1 drawing when fSumw2 changes,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12558
https://github.com/root-project/root/issues/12559:416,availability,error,error,416,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:441,availability,Error,Error,441,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1046,availability,Error,Error,1046,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1108,availability,Error,Error,1108,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1152,availability,Error,Error,1152,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1197,availability,Error,Error,1197,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1283,availability,Error,Error,1283,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1379,availability,Error,Error,1379,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1475,availability,Error,Error,1475,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1571,availability,Error,Error,1571,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1667,availability,Error,Error,1667,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:59,deployability,version,versions,59,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:482,deployability,Fail,Failed,482,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:288,energy efficiency,draw,draw,288,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:377,energy efficiency,Draw,Draw,377,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:59,integrability,version,versions,59,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:59,modifiability,version,versions,59,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:416,performance,error,error,416,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:441,performance,Error,Error,441,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1046,performance,Error,Error,1046,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1108,performance,Error,Error,1108,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1152,performance,Error,Error,1152,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1197,performance,Error,Error,1197,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1283,performance,Error,Error,1283,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1379,performance,Error,Error,1379,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1475,performance,Error,Error,1475,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1571,performance,Error,Error,1571,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1667,performance,Error,Error,1667,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:482,reliability,Fail,Failed,482,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:526,reliability,pra,pragma,526,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:539,reliability,diagno,diagnostic,539,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:557,reliability,pra,pragma,557,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:570,reliability,diagno,diagnostic,570,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:995,reliability,pra,pragma,995,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1008,reliability,diagno,diagnostic,1008,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:416,safety,error,error,416,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:441,safety,Error,Error,441,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1046,safety,Error,Error,1046,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1108,safety,Error,Error,1108,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1128,safety,Input,InputFormulaIntoCling,1128,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1152,safety,Error,Error,1152,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1197,safety,Error,Error,1197,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1283,safety,Error,Error,1283,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1379,safety,Error,Error,1379,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1475,safety,Error,Error,1475,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1571,safety,Error,Error,1571,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1667,safety,Error,Error,1667,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:599,security,secur,security,599,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1812,security,session,session,1812,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:539,testability,diagno,diagnostic,539,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:570,testability,diagno,diagnostic,570,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1008,testability,diagno,diagnostic,1008,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:391,usability,Command,Command,391,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:416,usability,error,error,416,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:441,usability,Error,Error,441,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1046,usability,Error,Error,1046,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1108,usability,Error,Error,1108,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1128,usability,Input,InputFormulaIntoCling,1128,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1152,usability,Error,Error,1152,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1197,usability,Error,Error,1197,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1283,usability,Error,Error,1283,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1379,usability,Error,Error,1379,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1475,usability,Error,Error,1475,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1571,usability,Error,Error,1571,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/issues/12559:1667,usability,Error,Error,1667,"Problem to read `TF1`/`TFormula` stored with previous ROOT versions; Approx 10 years ago I create [file](https://root.cern/js/files/legends.root) with canvas from [`TLegend` docu](https://root.cern/doc/master/classTLegend.html). Now it is impossible to correctly read produced canvas and draw `TF1` object in it:. ```. root https://root.cern/js/files/legends.root -e ""legends->Draw()"". ```. Command produce a lot of error output like:. ```. Error in <TClingCallFunc::make_wrapper>: Failed to compile. ==== SOURCE BEGIN ====. #pragma clang diagnostic push. #pragma clang diagnostic ignored ""-Wformat-security"". __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))). extern ""C"" void __cf_1(void* obj, int nargs, void** args, void* ret). {. if (ret) {. new (ret) (double) (((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. else {. (void)(((double (&)(double *))TFormula____id1925463321337447592)(*(double**)args[0]));. return;. }. }. #pragma clang diagnostic pop. ==== SOURCE END ====. Error in <prepareFuncPtr>: Compiled function pointer is null. Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling. Error in <TFormula::ProcessFormula>: Formula ""1000*TMath::Abs(sin(x)/x)"" is invalid ! Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. Error in <TFormula::Eval>: Formula is invalid and not ready to execute . TMath::Abs is unknown. ```. Producing segfault when trying to quit ROOT session.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12559
https://github.com/root-project/root/pull/12560:168,deployability,observ,observed,168,"[graph] copy all attributes to new histogram; Use `TAttAxis::Copy` method to ensure that all attributes are copied . Axis and labels color were missing. Problem can be observed with `tutorials/hist/xyplot.C` macro. If invoke `InsertPoint` method for TGraph via context menu, histogram axes will be drawn.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12560
https://github.com/root-project/root/pull/12560:298,energy efficiency,draw,drawn,298,"[graph] copy all attributes to new histogram; Use `TAttAxis::Copy` method to ensure that all attributes are copied . Axis and labels color were missing. Problem can be observed with `tutorials/hist/xyplot.C` macro. If invoke `InsertPoint` method for TGraph via context menu, histogram axes will be drawn.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12560
https://github.com/root-project/root/pull/12560:168,testability,observ,observed,168,"[graph] copy all attributes to new histogram; Use `TAttAxis::Copy` method to ensure that all attributes are copied . Axis and labels color were missing. Problem can be observed with `tutorials/hist/xyplot.C` macro. If invoke `InsertPoint` method for TGraph via context menu, histogram axes will be drawn.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12560
https://github.com/root-project/root/pull/12560:261,testability,context,context,261,"[graph] copy all attributes to new histogram; Use `TAttAxis::Copy` method to ensure that all attributes are copied . Axis and labels color were missing. Problem can be observed with `tutorials/hist/xyplot.C` macro. If invoke `InsertPoint` method for TGraph via context menu, histogram axes will be drawn.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12560
https://github.com/root-project/root/pull/12560:269,usability,menu,menu,269,"[graph] copy all attributes to new histogram; Use `TAttAxis::Copy` method to ensure that all attributes are copied . Axis and labels color were missing. Problem can be observed with `tutorials/hist/xyplot.C` macro. If invoke `InsertPoint` method for TGraph via context menu, histogram axes will be drawn.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12560
https://github.com/root-project/root/pull/12561:86,availability,failur,failures,86,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:86,deployability,fail,failures,86,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:104,deployability,build,builds,104,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:111,deployability,depend,depending,111,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:128,deployability,build,build,128,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:312,deployability,modul,modules,312,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:369,deployability,depend,dependencies,369,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:583,deployability,modul,module,583,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:590,deployability,depend,dependencies,590,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:820,deployability,contain,contain,820,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:832,deployability,modul,modules,832,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1075,deployability,depend,depends,1075,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1259,deployability,depend,dependency,1259,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1496,deployability,modul,modules,1496,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:570,energy efficiency,current,currently,570,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1005,energy efficiency,core,core,1005,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1087,energy efficiency,Core,Core,1087,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1203,energy efficiency,Core,Core,1203,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1593,energy efficiency,current,current,1593,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:111,integrability,depend,depending,111,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:362,integrability,filter,filter,362,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:369,integrability,depend,dependencies,369,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:590,integrability,depend,dependencies,590,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1075,integrability,depend,depends,1075,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1259,integrability,depend,dependency,1259,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:111,modifiability,depend,depending,111,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:312,modifiability,modul,modules,312,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:369,modifiability,depend,dependencies,369,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:583,modifiability,modul,module,583,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:590,modifiability,depend,dependencies,590,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:832,modifiability,modul,modules,832,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1075,modifiability,depend,depends,1075,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1259,modifiability,depend,dependency,1259,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1496,modifiability,modul,modules,1496,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:86,performance,failur,failures,86,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1105,performance,time,time,1105,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:86,reliability,fail,failures,86,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:765,reliability,doe,doesn,765,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:811,reliability,doe,does,811,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1161,reliability,doe,doesn,1161,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:81,safety,test,test,81,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:111,safety,depend,depending,111,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:312,safety,modul,modules,312,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:369,safety,depend,dependencies,369,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:583,safety,modul,module,583,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:590,safety,depend,dependencies,590,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:832,safety,modul,modules,832,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1075,safety,depend,depends,1075,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1235,safety,compl,completely,1235,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1259,safety,depend,dependency,1259,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1496,safety,modul,modules,1496,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1235,security,compl,completely,1235,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:81,testability,test,test,81,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:111,testability,depend,depending,111,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:369,testability,depend,dependencies,369,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:590,testability,depend,dependencies,590,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1075,testability,depend,depends,1075,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1259,testability,depend,dependency,1259,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12561:1484,usability,support,support,1484,"[cmake] Remove broken check from ROOT_GENERATE_DICTIONARY; Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true! This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12561
https://github.com/root-project/root/pull/12562:73,deployability,log,log,73,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:190,deployability,updat,updated,190,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:50,reliability,doe,does,50,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:73,safety,log,log,73,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:160,safety,test,tested,160,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:190,safety,updat,updated,190,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:73,security,log,log,73,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:190,security,updat,updated,190,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:73,testability,log,log,73,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12562:160,testability,test,tested,160,[ci] Print docker invocation; whitespace:; dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12562
https://github.com/root-project/root/pull/12563:51,deployability,releas,release,51,"[jsroot] 7.3.1 28/03/2023 [skip-ci] [6.28]; Bugfix release, tagged in JSROOT repository.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12563
https://github.com/root-project/root/pull/12563:77,integrability,repositor,repository,77,"[jsroot] 7.3.1 28/03/2023 [skip-ci] [6.28]; Bugfix release, tagged in JSROOT repository.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12563
https://github.com/root-project/root/pull/12563:77,interoperability,repositor,repository,77,"[jsroot] 7.3.1 28/03/2023 [skip-ci] [6.28]; Bugfix release, tagged in JSROOT repository.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12563
https://github.com/root-project/root/pull/12565:227,deployability,updat,updated,227,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:31,integrability,pub,public,31,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:47,integrability,interfac,interface,47,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:88,integrability,wrap,wrapper,88,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:105,integrability,pub,public,105,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:130,integrability,interfac,interface,130,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:167,integrability,wrap,wrapped,167,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:47,interoperability,interfac,interface,47,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:88,interoperability,wrapper,wrapper,88,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:130,interoperability,interfac,interface,130,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:47,modifiability,interfac,interface,47,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:130,modifiability,interfac,interface,130,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:197,safety,test,tested,197,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:227,safety,updat,updated,227,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:227,security,updat,updated,227,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12565:197,testability,test,tested,197,[ntuple] Remove `RResult` from public importer interface; This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12565
https://github.com/root-project/root/pull/12566:476,deployability,updat,updated,476,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:128,interoperability,standard,standard,128,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:446,safety,test,tested,446,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:476,safety,updat,updated,476,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:476,security,updat,updated,476,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:107,testability,simul,simultaneously,107,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:446,testability,test,tested,446,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:177,usability,user,users,177,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/pull/12566:329,usability,user,user-images,329,"[gui] TH2 SetShowProjectionXY; # This Pull request:. ## Changes or fixes:. Adds XY projection capabilities simultaneously for a standard TCanvas with a TH2. (This is needed for users in some applications where they do not use the new TWebCanvas, which was kindly implemented by @linev, but the traditional one). ![image](https://user-images.githubusercontent.com/10653970/228327012-83f2f1a0-b07b-46c1-a71c-4ba602ec3d6d.png). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10660.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12566
https://github.com/root-project/root/issues/12567:164,deployability,fail,fails,164,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:92,energy efficiency,Draw,Draw,92,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:369,energy efficiency,Draw,Draw,369,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:395,energy efficiency,Draw,Draw,395,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:164,reliability,fail,fails,164,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:141,security,rotat,rotated,141,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:252,security,rotat,rotated,252,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:686,security,Team,Team,686,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:1016,testability,context,context,1016,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:210,usability,behavi,behavior,210,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:433,usability,user,user-images,433,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/issues/12567:872,usability,help,help,872,"Wrong y zoom with empty hbar histogram; - [x] Checked for duplicates. ### Describe the bug. Draw hbar is supposed to be the same as bar, but rotated. However, this fails if the histogram is empty. ### Expected behavior. hbar shows the same as bar, but rotated 90 degrees. ### To Reproduce. ```. auto c = new TCanvas(). c->Divide(2,1). auto h = new TH1F(). c->cd(1). h->Draw(""bar""). c->cd(2). h->Draw(""hbar""). ```. ![unnamed](https://user-images.githubusercontent.com/10653970/228314987-1703ec18-e832-4509-a628-9b3eb64c7368.png). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://github.com/root-project/root/pull/12566",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12567
https://github.com/root-project/root/pull/12568:119,availability,state,state,119,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:452,availability,error,error,452,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:56,deployability,unload,unloaded,56,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:72,deployability,unload,unloading,72,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:353,deployability,depend,depends,353,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:394,deployability,unload,unloaded,394,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:119,integrability,state,state,119,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:353,integrability,depend,depends,353,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:522,integrability,coupl,couple,522,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:353,modifiability,depend,depends,353,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:522,modifiability,coupl,couple,522,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:452,performance,error,error,452,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:353,safety,depend,depends,353,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:452,safety,error,error,452,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:353,testability,depend,depends,353,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:522,testability,coupl,couple,522,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/pull/12568:452,usability,error,error,452,"[v628] Resolve issue when dictionary with std::tuple is unloaded.; When unloading a 'compiled' TClass, TClass sets the state of the TClass to the most information possible. This usually means setting the ClassInfo if the interpreter information is still known about the class. In the case of std::tuple is order to do that we need to generate code that depends on other types (that may also be unloaded), so skip that steps (which lead to 'compilation error' from the interpreter in the report cases (and a crash due to a couple of others issues solved also in this PR).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12568
https://github.com/root-project/root/issues/12569:1355,deployability,Version,Version,1355,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1501,deployability,instal,install,1501,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1355,integrability,Version,Version,1355,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1403,interoperability,Platform,Platform,1403,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1355,modifiability,Version,Version,1355,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:42,performance,time,time,42,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:575,performance,time,time,575,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:617,performance,time,time,617,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1044,performance,time,time,1044,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1312,performance,time,time-constructor,1312,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1202,safety,test,tests,1202,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:1202,testability,test,tests,1202,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12569:793,usability,behavi,behavior,793,"TTimeStamp skips days when using date and time constructor before 1970-01-01; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. For dates before Jan 1st, 1970, `TTimeStamp` sometimes gives incorrect results when it’s initialized with date and time, whether using the unsigned date and time constructor, or the explicit year, month, day, hours, minutes, and seconds constructor. There are no problems if `TTimeStamp` is initialized from a `time_t`. ### Expected behavior. `TTimeStamp(19600822, 0u, 0u, true, 0).AsString(""s"")` returns `""1960-08-23 00:00:00""` instead of `""1960-08-22 00:00:00""`. Similarly for `TTimeStamp(1960, 8, 22, 0, 0, 0)`. Casting it to `time_t` yields `-295315200`, which is indeed the Unix time for `""1960-08-23 00:00:00""`. `TTimeStamp(-295401600, 0).AsString(""s"")` returns correctly `""1960-08-22 00:00:00""`. ### To Reproduce. See code and various tests on the [ROOT forum](https://root-forum.cern.ch/t/bug-in-ttimestamp-days-are-skipped-when-using-date-and-time-constructor/54201/1). ### Setup. ROOT Version: 6.26/02, heads/latest-stable@c8d49336. Platform: Ubuntu 22.04.2. Compiler: linuxx8664gcc. Compiled with `cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE='RelWithDebInfo' -Dbuiltin_vc='ON' -Dcudnn='OFF' -Dcfitsio='ON' -Dgviz='ON' -Dqt5_web='ON' -Dunuran='ON' -Dvc='ON' -Dveccore='ON' ../git`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12569
https://github.com/root-project/root/issues/12570:212,interoperability,format,format,212,Remove GIF output from stressGraphics; Ubuntu has removed GIF support from their libAfterImage. Therefore it makes sense to remove the use of GIF output from `stressGraphics`. Moreover `gif` is not the most used format for binaries output these days. People mainly use `png` and `jpg`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12570
https://github.com/root-project/root/issues/12570:62,usability,support,support,62,Remove GIF output from stressGraphics; Ubuntu has removed GIF support from their libAfterImage. Therefore it makes sense to remove the use of GIF output from `stressGraphics`. Moreover `gif` is not the most used format for binaries output these days. People mainly use `png` and `jpg`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12570
https://github.com/root-project/root/pull/12572:390,deployability,updat,updated,390,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:100,energy efficiency,GPU,GPU,100,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:235,energy efficiency,GPU,GPU,235,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:333,energy efficiency,GPU,GPU,333,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:194,modifiability,variab,variable,194,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:100,performance,GPU,GPU,100,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:235,performance,GPU,GPU,235,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:333,performance,GPU,GPU,333,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:360,safety,test,tested,360,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:390,safety,updat,updated,390,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:390,security,updat,updated,390,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:360,testability,test,tested,360,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12572:71,usability,support,support,71,"[WIP][skip-ci] CUDA Histogram; # This Pull request:. Adds experimental support for histogramming on GPU with CUDA. . `[skip-ci]`. ## Changes or fixes:. - N-dimensional histograms with fixed and variable sized bins can be filled on the GPU. - Histogram statistics (sum of weights, sum of square of weights, etc.) can be calculated on GPU . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12572
https://github.com/root-project/root/pull/12574:297,energy efficiency,load,load,297,"[ntuple] Add `RNTupleInspector::Create` for ntuple name and source path; This PR adds a new `Create` factory method to the `RNTupleInspector` that takes the name and source path of the `RNTuple` to be inspected as its arguments. This removes the need for the user to open the relevant `TFile` and load the `RNTuple` manually, which can be useful in case one is only interested in inspecting an `RNTuple`. Additionally, a check is added to the existing `Create(RNTuple *sourceNTuple)` method to make sure the pointer that was passed does not refer to null.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12574
https://github.com/root-project/root/pull/12574:297,performance,load,load,297,"[ntuple] Add `RNTupleInspector::Create` for ntuple name and source path; This PR adds a new `Create` factory method to the `RNTupleInspector` that takes the name and source path of the `RNTuple` to be inspected as its arguments. This removes the need for the user to open the relevant `TFile` and load the `RNTuple` manually, which can be useful in case one is only interested in inspecting an `RNTuple`. Additionally, a check is added to the existing `Create(RNTuple *sourceNTuple)` method to make sure the pointer that was passed does not refer to null.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12574
https://github.com/root-project/root/pull/12574:532,reliability,doe,does,532,"[ntuple] Add `RNTupleInspector::Create` for ntuple name and source path; This PR adds a new `Create` factory method to the `RNTupleInspector` that takes the name and source path of the `RNTuple` to be inspected as its arguments. This removes the need for the user to open the relevant `TFile` and load the `RNTuple` manually, which can be useful in case one is only interested in inspecting an `RNTuple`. Additionally, a check is added to the existing `Create(RNTuple *sourceNTuple)` method to make sure the pointer that was passed does not refer to null.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12574
https://github.com/root-project/root/pull/12574:259,usability,user,user,259,"[ntuple] Add `RNTupleInspector::Create` for ntuple name and source path; This PR adds a new `Create` factory method to the `RNTupleInspector` that takes the name and source path of the `RNTuple` to be inspected as its arguments. This removes the need for the user to open the relevant `TFile` and load the `RNTuple` manually, which can be useful in case one is only interested in inspecting an `RNTuple`. Additionally, a check is added to the existing `Create(RNTuple *sourceNTuple)` method to make sure the pointer that was passed does not refer to null.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12574
https://github.com/root-project/root/pull/12575:88,deployability,build,building,88,Avoid recursive powershell.exe; This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12575
https://github.com/root-project/root/pull/12575:16,energy efficiency,power,powershell,16,Avoid recursive powershell.exe; This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12575
https://github.com/root-project/root/pull/12575:62,energy efficiency,Power,Powershell,62,Avoid recursive powershell.exe; This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12575
https://github.com/root-project/root/pull/12575:109,performance,time,time,109,Avoid recursive powershell.exe; This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12575
https://github.com/root-project/root/pull/12575:0,safety,Avoid,Avoid,0,Avoid recursive powershell.exe; This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12575
https://github.com/root-project/root/pull/12575:37,safety,prevent,prevent,37,Avoid recursive powershell.exe; This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12575
https://github.com/root-project/root/pull/12575:37,security,preven,prevent,37,Avoid recursive powershell.exe; This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12575
https://github.com/root-project/root/pull/12576:204,energy efficiency,model,model,204,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:10,integrability,translat,translate,10,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:10,interoperability,translat,translate,10,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:128,safety,test,test,128,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:204,security,model,model,204,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:128,testability,test,test,128,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:197,testability,simpl,simple,197,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:56,usability,support,support,56,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:186,usability,minim,minimize,186,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12576:197,usability,simpl,simple,197,[RF] Add 'translate' to RooNllVarNew.; This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12576
https://github.com/root-project/root/pull/12577:259,performance,content,content,259,"[RF][HS3] Correct support for combined datasets and simultaneous pdfs; Put all the information necessary in the JSON to correctly reconstruct combined datasets and simultaneous pdfs. Also, fix the export of `RooHistPdf` and `RooHistFunc` to not normalize the content of the template histograms, which can cause numerical precision problems. More details in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12577
https://github.com/root-project/root/pull/12577:52,testability,simul,simultaneous,52,"[RF][HS3] Correct support for combined datasets and simultaneous pdfs; Put all the information necessary in the JSON to correctly reconstruct combined datasets and simultaneous pdfs. Also, fix the export of `RooHistPdf` and `RooHistFunc` to not normalize the content of the template histograms, which can cause numerical precision problems. More details in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12577
https://github.com/root-project/root/pull/12577:164,testability,simul,simultaneous,164,"[RF][HS3] Correct support for combined datasets and simultaneous pdfs; Put all the information necessary in the JSON to correctly reconstruct combined datasets and simultaneous pdfs. Also, fix the export of `RooHistPdf` and `RooHistFunc` to not normalize the content of the template histograms, which can cause numerical precision problems. More details in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12577
https://github.com/root-project/root/pull/12577:18,usability,support,support,18,"[RF][HS3] Correct support for combined datasets and simultaneous pdfs; Put all the information necessary in the JSON to correctly reconstruct combined datasets and simultaneous pdfs. Also, fix the export of `RooHistPdf` and `RooHistFunc` to not normalize the content of the template histograms, which can cause numerical precision problems. More details in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12577
https://github.com/root-project/root/pull/12578:60,deployability,depend,dependency,60,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:163,deployability,depend,depends,163,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:480,deployability,depend,dependency,480,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:631,deployability,depend,dependency,631,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:881,deployability,build,building,881,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:966,deployability,configurat,configuration,966,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1004,deployability,build,building,1004,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1033,deployability,depend,depends,1033,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1196,deployability,depend,dependency,1196,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:11,energy efficiency,Model,ModelConfig,11,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:569,energy efficiency,Model,ModelConfig,569,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:714,energy efficiency,Model,ModelConfig,714,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:806,energy efficiency,model,model,806,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:875,energy efficiency,model,model,875,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:944,energy efficiency,model,model,944,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:998,energy efficiency,model,model,998,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1071,energy efficiency,Model,ModelConfig,1071,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1133,energy efficiency,Model,ModelConfig,1133,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1302,energy efficiency,Model,ModelConfig,1302,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:60,integrability,depend,dependency,60,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:163,integrability,depend,depends,163,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:238,integrability,interfac,interfaces,238,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:480,integrability,depend,dependency,480,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:631,integrability,depend,dependency,631,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:966,integrability,configur,configuration,966,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1033,integrability,depend,depends,1033,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1196,integrability,depend,dependency,1196,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:238,interoperability,interfac,interfaces,238,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:933,interoperability,Specif,Specifying,933,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1343,interoperability,specif,specify,1343,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:60,modifiability,depend,dependency,60,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:98,modifiability,pac,packages,98,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:163,modifiability,depend,depends,163,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:238,modifiability,interfac,interfaces,238,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:480,modifiability,depend,dependency,480,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:631,modifiability,depend,dependency,631,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:966,modifiability,configur,configuration,966,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1033,modifiability,depend,depends,1033,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1196,modifiability,depend,dependency,1196,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:60,safety,depend,dependency,60,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:163,safety,depend,depends,163,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:480,safety,depend,dependency,480,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:536,safety,avoid,avoided,536,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:618,safety,avoid,avoiding,618,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:631,safety,depend,dependency,631,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1033,safety,depend,depends,1033,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1183,safety,avoid,avoiding,1183,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1196,safety,depend,dependency,1196,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:11,security,Model,ModelConfig,11,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:569,security,Model,ModelConfig,569,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:714,security,Model,ModelConfig,714,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:806,security,model,model,806,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:875,security,model,model,875,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:944,security,model,model,944,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:966,security,configur,configuration,966,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:998,security,model,model,998,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1071,security,Model,ModelConfig,1071,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1133,security,Model,ModelConfig,1133,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1302,security,Model,ModelConfig,1302,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:60,testability,depend,dependency,60,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:163,testability,depend,depends,163,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:480,testability,depend,dependency,480,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:631,testability,depend,dependency,631,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1033,testability,depend,depends,1033,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/pull/12578:1196,testability,depend,dependency,1196,"[RF] Move `ModelConfig` from RooStats to RooFit; There is a dependency problem between the RooFit packages that will. start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,. RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from. the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3. needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular. dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from. RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on. RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because. people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for. statisitcal procedures. Specifying model details in the. configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig. and the Asimov dataset generation. By moving the ModelConfig to. RooFit, we are also half way done avoiding the dependency of. HistFactory on RooStats. * The only thing that people use from RooStats is often only the. ModelConfig anyway, because it lets them specify analysis details in. the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12578
https://github.com/root-project/root/issues/12579:1184,availability,Operat,Operating,1184,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1259,availability,down,download,1259,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1105,deployability,build,build,1105,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1172,deployability,version,version,1172,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1241,deployability,instal,install,1241,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1172,integrability,version,version,1172,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:72,interoperability,prox,proxies,72,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1172,modifiability,version,version,1172,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1059,safety,input,input,1059,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1313,testability,context,context,1313,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1342,testability,context,context,1342,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:11,usability,support,support,11,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:471,usability,clear,clear,471,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:519,usability,behavi,behavior,519,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:630,usability,behavi,behavior,630,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:648,usability,clear,clear,648,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:914,usability,behavi,behavior,914,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/issues/12579:1059,usability,input,input,1059,"[backport] support __cast_cpp__ to implicitly convert python objects to proxies; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `ROOT` and latest` cppyy 3.0.1` cannot be used in the same virtual environment. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Please, consider back porting the feature needed from `cppyy 3.0.1`:. https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12579
https://github.com/root-project/root/pull/12580:361,deployability,updat,updated,361,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:80,interoperability,prox,proxies,80,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:183,interoperability,prox,proxies,183,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:331,safety,test,tested,331,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:361,safety,updat,updated,361,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:361,security,updat,updated,361,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:331,testability,test,tested,331,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:19,usability,support,support,19,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12580:122,usability,support,support,122,[cppyy] [backport] support __cast_cpp__ to implicitly convert python objects to proxies; # This Pull request:. back-ports support __cast_cpp__ to implicitly convert python objects to proxies. ## Changes or fixes:. cherry-picked https://github.com/wlav/CPyCppyy/commit/6c7ca2547347b7bea8e49c7f2337fa9fb0455186. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12579.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12580
https://github.com/root-project/root/pull/12581:26,availability,state,state,26,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:121,availability,avail,available,121,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:216,deployability,log,log,216,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:26,integrability,state,state,26,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:237,modifiability,concern,concerned,237,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:121,reliability,availab,available,121,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:121,safety,avail,available,121,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:216,safety,log,log,216,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:121,security,availab,available,121,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:216,security,log,log,216,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:250,security,token,tokens,250,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:216,testability,log,log,216,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12581:237,testability,concern,concerned,237,"[ci] Show node and config state. [skip-ci]; I know there's ""add debug output"" - but this is something we'll want to have available anyway, without having to re-run. I'm not dumping `env` because that can trigger the log grepper (not too concerned by tokens - GH is doing a good job at hiding those).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12581
https://github.com/root-project/root/pull/12582:175,availability,down,download,175,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:12,deployability,artifact,artifact,12,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:52,deployability,build,builds,52,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:137,deployability,Build,Builds,137,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:193,deployability,artifact,artifacts,193,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:223,deployability,build,builds,223,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:235,deployability,Artifact,Artifact,235,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:303,deployability,artifact,artifacts,303,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:435,deployability,build,builds,435,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:494,deployability,updat,updated,494,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:121,integrability,event,event,121,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:162,integrability,event,events,162,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:464,safety,test,tested,464,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:494,safety,updat,updated,494,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:494,security,updat,updated,494,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:464,testability,test,tested,464,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12582:127,usability,behavi,behavior,127,[CI] Change artifact upload heuristics and do clean builds on push; # This Pull request:. ## Changes or fixes:. ### Push event behavior. Builds triggered by push events never download previous artifacts and always do clean builds. ### Artifact uploads. Use different heuristics to decide when to upload artifacts. #### Old. - Check if connection to s3 was possible. #### New. - Never upload on pull request. - Never upload incremental builds. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12582
https://github.com/root-project/root/pull/12585:31,deployability,build,building,31,[CI] Fix macOS and Windows not building outside of pull requests; #### typo made build get skipped on macOS and windows:. ```. if: github.repository_owner == 'root_project' || github.event_name == 'pull_request'. ^^^^^^^^^^^^: changed to 'root-project'. ```. <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12585
https://github.com/root-project/root/pull/12585:81,deployability,build,build,81,[CI] Fix macOS and Windows not building outside of pull requests; #### typo made build get skipped on macOS and windows:. ```. if: github.repository_owner == 'root_project' || github.event_name == 'pull_request'. ^^^^^^^^^^^^: changed to 'root-project'. ```. <details><summary></summary>. <p>. [skip-ci]. </p>. </details>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12585
https://github.com/root-project/root/pull/12586:60,testability,context,context,60,[webcanvas] provide interactivity for `TGaxis`; 1. Move and context menu for TGaxis. 2. Support function inside `TGaxis` - see `tutorials/graphics/gaxis2.C`. 3. Full context menu for `TAttText`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12586
https://github.com/root-project/root/pull/12586:166,testability,context,context,166,[webcanvas] provide interactivity for `TGaxis`; 1. Move and context menu for TGaxis. 2. Support function inside `TGaxis` - see `tutorials/graphics/gaxis2.C`. 3. Full context menu for `TAttText`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12586
https://github.com/root-project/root/pull/12586:20,usability,interact,interactivity,20,[webcanvas] provide interactivity for `TGaxis`; 1. Move and context menu for TGaxis. 2. Support function inside `TGaxis` - see `tutorials/graphics/gaxis2.C`. 3. Full context menu for `TAttText`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12586
https://github.com/root-project/root/pull/12586:68,usability,menu,menu,68,[webcanvas] provide interactivity for `TGaxis`; 1. Move and context menu for TGaxis. 2. Support function inside `TGaxis` - see `tutorials/graphics/gaxis2.C`. 3. Full context menu for `TAttText`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12586
https://github.com/root-project/root/pull/12586:88,usability,Support,Support,88,[webcanvas] provide interactivity for `TGaxis`; 1. Move and context menu for TGaxis. 2. Support function inside `TGaxis` - see `tutorials/graphics/gaxis2.C`. 3. Full context menu for `TAttText`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12586
https://github.com/root-project/root/pull/12586:174,usability,menu,menu,174,[webcanvas] provide interactivity for `TGaxis`; 1. Move and context menu for TGaxis. 2. Support function inside `TGaxis` - see `tutorials/graphics/gaxis2.C`. 3. Full context menu for `TAttText`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12586
https://github.com/root-project/root/pull/12587:283,availability,state,state,283,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:482,availability,state,state,482,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:18,deployability,Updat,Update,18,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:549,deployability,updat,updated,549,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:208,energy efficiency,Current,Currently,208,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:373,energy efficiency,model,model,373,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:283,integrability,state,state,283,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:482,integrability,state,state,482,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:51,interoperability,specif,specifications,51,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:183,interoperability,Specif,Specifications,183,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:379,modifiability,extens,extension,379,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:18,safety,Updat,Update,18,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:549,safety,updat,updated,549,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:18,security,Updat,Update,18,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:373,security,model,model,373,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:549,security,updat,updated,549,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12587:198,usability,document,document,198,"[ntuple][skip-ci] Update `std::variant` section in specifications.md; Add a few clarifications to the description of the `std::variant<T1, T2, ..., Tn>` type in the RNTuple Reference Specifications document. Currently, the dispatch tag is `== 0` _iif_ the variant was in the invalid state when the entry was filled. This condition is also expected to happen after the late model extension PRs are merged, given that late-added fields of type `std::variant<Ts...>` are in an invalid state for entries for which there is no data. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12587
https://github.com/root-project/root/pull/12588:52,modifiability,variab,variable,52,"[ntuple] Avoid warning about possibly uninitialized variable; As noted in commit 538396a869 some weeks ago, Clang 15 warns that the variable v may be used uninitialized because it does not understand the pointer hackery to read individual bytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12588
https://github.com/root-project/root/pull/12588:132,modifiability,variab,variable,132,"[ntuple] Avoid warning about possibly uninitialized variable; As noted in commit 538396a869 some weeks ago, Clang 15 warns that the variable v may be used uninitialized because it does not understand the pointer hackery to read individual bytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12588
https://github.com/root-project/root/pull/12588:180,reliability,doe,does,180,"[ntuple] Avoid warning about possibly uninitialized variable; As noted in commit 538396a869 some weeks ago, Clang 15 warns that the variable v may be used uninitialized because it does not understand the pointer hackery to read individual bytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12588
https://github.com/root-project/root/pull/12588:9,safety,Avoid,Avoid,9,"[ntuple] Avoid warning about possibly uninitialized variable; As noted in commit 538396a869 some weeks ago, Clang 15 warns that the variable v may be used uninitialized because it does not understand the pointer hackery to read individual bytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12588
https://github.com/root-project/root/pull/12588:212,security,hack,hackery,212,"[ntuple] Avoid warning about possibly uninitialized variable; As noted in commit 538396a869 some weeks ago, Clang 15 warns that the variable v may be used uninitialized because it does not understand the pointer hackery to read individual bytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12588
https://github.com/root-project/root/pull/12588:189,testability,understand,understand,189,"[ntuple] Avoid warning about possibly uninitialized variable; As noted in commit 538396a869 some weeks ago, Clang 15 warns that the variable v may be used uninitialized because it does not understand the pointer hackery to read individual bytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12588
https://github.com/root-project/root/issues/12589:318,deployability,contain,containing,318,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:576,deployability,contain,contains,576,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:49,energy efficiency,GPU,GPU,49,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:61,energy efficiency,model,model,61,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:87,energy efficiency,CPU,CPU,87,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:183,energy efficiency,model,model,183,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:285,energy efficiency,model,model,285,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:310,energy efficiency,GPU,GPU,310,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:421,energy efficiency,CPU,CPU,421,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:536,energy efficiency,GPU,GPU,536,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:570,energy efficiency,model,model,570,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:78,modifiability,layer,layer,78,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:337,modifiability,layer,layer,337,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:595,modifiability,layer,layer,595,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:49,performance,GPU,GPU,49,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:87,performance,CPU,CPU,87,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:310,performance,GPU,GPU,310,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:421,performance,CPU,CPU,421,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:523,performance,perform,performed,523,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:536,performance,GPU,GPU,536,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:61,security,model,model,61,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:183,security,model,model,183,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:285,security,model,model,285,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:570,security,model,model,570,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/issues/12589:523,usability,perform,performed,523,[tmva] Wrong result when evaluating a TMVA CNN a GPU trained model with BNORM layer on CPU ; As reported in https://root-forum.cern.ch/t/tmva-read-image-data-for-application-of-a-cnn-model/54181/15 . and shown in this notebook example. https://cernbox.cern.ch/s/U7p6sgH7QN4GRlX. A CNN model that is trained on GPU and containing a BNORM layer produces wring results (all 0 or 1) when is evaluated (e.g. using RReader) on CPU. . The evaluation that is done in the Classification macro (in `Factory::EvcaluateAllMethods`) is performed on GPU. . This happens only when the model contains the BNORM layer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12589
https://github.com/root-project/root/pull/12590:48,deployability,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/pull/12590:153,deployability,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/pull/12590:48,safety,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/pull/12590:153,safety,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/pull/12590:552,safety,except,exception,552,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/pull/12590:872,safety,Except,Except,872,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/pull/12590:48,security,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/pull/12590:153,security,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 12; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/11942. 2. https://github.com/root-project/root/pull/9539. The final commit with the code modernization (others have already been backported in #11960). 3. https://github.com/root-project/root/pull/11963. 4. https://github.com/root-project/root/pull/12015. 5. https://github.com/root-project/root/pull/12022. Only the last one about throwing the exception in `RooAbsArg::redirectServers (the other commits have been backported already in #12057 and #12092). 6. https://github.com/root-project/root/pull/12180. 7. https://github.com/root-project/root/pull/12223. 8. https://github.com/root-project/root/pull/12232. 9. https://github.com/root-project/root/pull/12219. Except for the first and last commit that relate to the RooFit AD work. 10. https://github.com/root-project/root/pull/12304. 11. https://github.com/root-project/root/pull/12442. Only the first two commits that were not already backported. 12. https://github.com/root-project/root/pull/12447. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12590
https://github.com/root-project/root/issues/12591:28,deployability,modul,modules,28,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:149,deployability,modul,modules,149,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:280,deployability,depend,dependencies,280,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:298,deployability,modul,modules,298,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:601,deployability,build,build,601,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:625,deployability,depend,dependency,625,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:646,deployability,modul,module,646,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:724,deployability,build,build,724,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:877,deployability,modul,module,877,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:569,energy efficiency,core,core,569,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:200,integrability,coupl,couple,200,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:280,integrability,depend,dependencies,280,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:524,integrability,messag,messages,524,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:625,integrability,depend,dependency,625,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:524,interoperability,messag,messages,524,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:699,interoperability,incompatib,incompatible,699,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:28,modifiability,modul,modules,28,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:149,modifiability,modul,modules,149,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:200,modifiability,coupl,couple,200,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:280,modifiability,depend,dependencies,280,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:298,modifiability,modul,modules,298,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:625,modifiability,depend,dependency,625,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:646,modifiability,modul,module,646,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:877,modifiability,modul,module,877,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:28,safety,modul,modules,28,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:149,safety,modul,modules,149,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:280,safety,depend,dependencies,280,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:298,safety,modul,modules,298,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:625,safety,depend,dependency,625,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:646,safety,modul,module,646,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:877,safety,modul,module,877,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:200,testability,coupl,couple,200,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:280,testability,depend,dependencies,280,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:625,testability,depend,dependency,625,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:249,usability,support,support,249,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12591:348,usability,support,support,348,"Allow partial enablement of modules; Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12591
https://github.com/root-project/root/issues/12592:19,availability,error,error,19,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:112,availability,error,error,112,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:259,availability,error,errors-in-weighted-tprofiles,259,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:19,performance,error,error,19,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:112,performance,error,error,112,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:259,performance,error,errors-in-weighted-tprofiles,259,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:19,safety,error,error,19,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:112,safety,error,error,112,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:259,safety,error,errors-in-weighted-tprofiles,259,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:19,usability,error,error,19,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:25,usability,document,documentation,25,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:112,usability,error,error,112,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/issues/12592:259,usability,error,errors-in-weighted-tprofiles,259,[doc] TProfile bin error documentation is not correct; The formula showing the calculations of the TProfile bin error are not correct if the weights are different than 1. . In https://root.cern/doc/master/classTProfile.html . See https://root-forum.cern.ch/t/errors-in-weighted-tprofiles/54299,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12592
https://github.com/root-project/root/pull/12593:23,deployability,build,build,23,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:29,deployability,artifact,artifacts,29,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:43,deployability,Releas,Release,43,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:76,deployability,releas,release,76,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:84,deployability,build,builds,84,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:119,deployability,releas,release,119,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:127,deployability,build,builds,127,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:138,deployability,artifact,artifacts,138,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:173,deployability,build,building,173,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12593:188,deployability,artifact,artifacts,188,"[ci] For Windows, only build artifacts for Release: [skip-ci]; We only have release builds for incrementals, i.e. only release builds use artifacts, so there is no point in building debug artifacts.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12593
https://github.com/root-project/root/pull/12594:282,deployability,Automat,Automatically,282,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12594:140,interoperability,format,format,140,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12594:359,interoperability,format,format,359,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12594:415,modifiability,paramet,parameter,415,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12594:496,modifiability,paramet,parameters,496,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12594:197,safety,test,test,197,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12594:197,testability,test,test,197,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12594:282,testability,Automat,Automatically,282,[RF][HS3] Fix some closure issues between HistFactory and HistFactory HS3 implementation; This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant). * Fix export of RooDataSets with only one entry. * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets. * Also export special `Lumi` parameter from HistFactory. * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12594
https://github.com/root-project/root/pull/12595:168,deployability,depend,depending,168,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:168,integrability,depend,depending,168,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:416,integrability,interfac,interface,416,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:493,integrability,interfac,interface,493,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:416,interoperability,interfac,interface,416,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:493,interoperability,interfac,interface,493,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:168,modifiability,depend,depending,168,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:416,modifiability,interfac,interface,416,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:493,modifiability,interfac,interface,493,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:9,performance,memor,memory,9,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:377,performance,memor,memory,377,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:329,reliability,doe,doesn,329,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:168,safety,depend,depending,168,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:583,safety,test,test,583,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:168,testability,depend,depending,168,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:583,testability,test,test,583,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:9,usability,memor,memory,9,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:377,usability,memor,memory,377,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/pull/12595:554,usability,user,users,554,"[RF] Fix memory leaks from `RooAbsL::getParameters()`; The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12595
https://github.com/root-project/root/issues/12597:849,integrability,sub,substituting,849,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:287,safety,test,test,287,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:365,safety,test,test,365,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:445,safety,test,test,445,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:613,safety,test,test,613,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:287,testability,test,test,287,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:365,testability,test,test,365,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:445,testability,test,test,445,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:613,testability,test,test,613,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/issues/12597:116,usability,behavi,behavior-with-define,116,"[DF] Display of RVec<bool> shows wrong values; First reported at https://root-forum.cern.ch/t/rdataframe-unexpected-behavior-with-define/54329 . Reproducer:. ```cpp. #include <ROOT/RDataFrame.hxx>. #include <ROOT/RVec.hxx>. int main() {. ROOT::RDataFrame df(100);. auto df2 = df.Define(""test"", [] { return ROOT::RVec<bool>(1u, true); });. auto disp = df2.Display({""test""}, 3);. disp->Print();. }. ```. should print. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. +-----+------+. | 2 | true |. +-----+------+. ```. but instead prints. ```. +-----+------+. | Row | test |. +-----+------+. | 0 | true |. +-----+------+. | 1 | true |. | | true |. +-----+------+. | 2 | true |. | | true |. | | true |. +-----+------+. ```. (the value of each entry is appended to the collection representation instead of substituting it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12597
https://github.com/root-project/root/pull/12598:51,safety,test,test,51,"[DF] Fix RVec<bool> display, fix the corresponding test; Fixes https://github.com/root-project/root/issues/12597.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12598
https://github.com/root-project/root/pull/12598:51,testability,test,test,51,"[DF] Fix RVec<bool> display, fix the corresponding test; Fixes https://github.com/root-project/root/issues/12597.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12598
https://github.com/root-project/root/pull/12602:42,deployability,modul,modules,42,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:96,deployability,modul,modules,96,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:301,deployability,depend,dependencies,301,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:338,deployability,log,logic,338,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:66,energy efficiency,current,currently,66,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:301,integrability,depend,dependencies,301,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:383,integrability,messag,message,383,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:288,interoperability,specif,specified,288,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:383,interoperability,messag,message,383,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:42,modifiability,modul,modules,42,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:96,modifiability,modul,modules,96,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:301,modifiability,depend,dependencies,301,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:42,safety,modul,modules,42,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:96,safety,modul,modules,96,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:301,safety,depend,dependencies,301,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:338,safety,log,logic,338,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:338,security,log,logic,338,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:301,testability,depend,dependencies,301,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:338,testability,log,logic,338,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:12,usability,support,support,12,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12602:408,usability,close,closes,408,"[cmake] Add support for partially enabled modules; On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12602
https://github.com/root-project/root/pull/12603:176,availability,operat,operations,176,v628: TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12603
https://github.com/root-project/root/pull/12603:231,availability,operat,operation,231,v628: TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12603
https://github.com/root-project/root/pull/12603:279,performance,lock,lock,279,v628: TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12603
https://github.com/root-project/root/pull/12603:279,security,lock,lock,279,v628: TClassTable: fix data race between dlopen and other uses; This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12603
https://github.com/root-project/root/pull/12604:179,availability,operat,operations,179,[v626] TClassTable: fix data race between dlopen and other uses; . This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12604
https://github.com/root-project/root/pull/12604:234,availability,operat,operation,234,[v626] TClassTable: fix data race between dlopen and other uses; . This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12604
https://github.com/root-project/root/pull/12604:282,performance,lock,lock,282,[v626] TClassTable: fix data race between dlopen and other uses; . This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12604
https://github.com/root-project/root/pull/12604:282,security,lock,lock,282,[v626] TClassTable: fix data race between dlopen and other uses; . This fixes https://github.com/root-project/root/issues/12552. This commit add a mutex for the TClassTable inner operations. Several changes were needed to insure that operation that can. either take the ROOT global lock or recursively call TClassTable. are executed outside of the TClassTable critical sections.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12604
https://github.com/root-project/root/issues/12606:181,energy efficiency,core,core,181,"`RCompressionSetting` documented level 0 (`kUncompressed`) does not work; According to the docs:. https://github.com/root-project/root/blob/6fc4ddc223acc63eb4121c1aacfa470ce0e6cc1e/core/zip/inc/Compression.h#L31-L33. however upon trying:. ```cpp. options.SetCompression(ROOT::Experimental::RCompressionSetting::EAlgorithm::kZLIB,0). // or. options.SetCompression(ROOT::Experimental::RCompressionSetting::EAlgorithm::kUndefined,0). ```. Neither of them seems to write out uncompressed RNTuple.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12606
https://github.com/root-project/root/issues/12606:59,reliability,doe,does,59,"`RCompressionSetting` documented level 0 (`kUncompressed`) does not work; According to the docs:. https://github.com/root-project/root/blob/6fc4ddc223acc63eb4121c1aacfa470ce0e6cc1e/core/zip/inc/Compression.h#L31-L33. however upon trying:. ```cpp. options.SetCompression(ROOT::Experimental::RCompressionSetting::EAlgorithm::kZLIB,0). // or. options.SetCompression(ROOT::Experimental::RCompressionSetting::EAlgorithm::kUndefined,0). ```. Neither of them seems to write out uncompressed RNTuple.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12606
https://github.com/root-project/root/issues/12606:22,usability,document,documented,22,"`RCompressionSetting` documented level 0 (`kUncompressed`) does not work; According to the docs:. https://github.com/root-project/root/blob/6fc4ddc223acc63eb4121c1aacfa470ce0e6cc1e/core/zip/inc/Compression.h#L31-L33. however upon trying:. ```cpp. options.SetCompression(ROOT::Experimental::RCompressionSetting::EAlgorithm::kZLIB,0). // or. options.SetCompression(ROOT::Experimental::RCompressionSetting::EAlgorithm::kUndefined,0). ```. Neither of them seems to write out uncompressed RNTuple.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12606
https://github.com/root-project/root/pull/12607:234,integrability,repositor,repository,234,[CI] Fix nightlies on Windows; . Fixes wrong variable being used to specify branch for windows nightlies. ```diff. --platform windows10. --incremental false. - --base_ref ${{ github.base_ref }}. + --base_ref ${{ github.ref_name }}. --repository ${{ github.server_url }}/${{ github.repository }}. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12607
https://github.com/root-project/root/pull/12607:281,integrability,repositor,repository,281,[CI] Fix nightlies on Windows; . Fixes wrong variable being used to specify branch for windows nightlies. ```diff. --platform windows10. --incremental false. - --base_ref ${{ github.base_ref }}. + --base_ref ${{ github.ref_name }}. --repository ${{ github.server_url }}/${{ github.repository }}. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12607
https://github.com/root-project/root/pull/12607:68,interoperability,specif,specify,68,[CI] Fix nightlies on Windows; . Fixes wrong variable being used to specify branch for windows nightlies. ```diff. --platform windows10. --incremental false. - --base_ref ${{ github.base_ref }}. + --base_ref ${{ github.ref_name }}. --repository ${{ github.server_url }}/${{ github.repository }}. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12607
https://github.com/root-project/root/pull/12607:117,interoperability,platform,platform,117,[CI] Fix nightlies on Windows; . Fixes wrong variable being used to specify branch for windows nightlies. ```diff. --platform windows10. --incremental false. - --base_ref ${{ github.base_ref }}. + --base_ref ${{ github.ref_name }}. --repository ${{ github.server_url }}/${{ github.repository }}. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12607
https://github.com/root-project/root/pull/12607:234,interoperability,repositor,repository,234,[CI] Fix nightlies on Windows; . Fixes wrong variable being used to specify branch for windows nightlies. ```diff. --platform windows10. --incremental false. - --base_ref ${{ github.base_ref }}. + --base_ref ${{ github.ref_name }}. --repository ${{ github.server_url }}/${{ github.repository }}. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12607
https://github.com/root-project/root/pull/12607:281,interoperability,repositor,repository,281,[CI] Fix nightlies on Windows; . Fixes wrong variable being used to specify branch for windows nightlies. ```diff. --platform windows10. --incremental false. - --base_ref ${{ github.base_ref }}. + --base_ref ${{ github.ref_name }}. --repository ${{ github.server_url }}/${{ github.repository }}. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12607
https://github.com/root-project/root/pull/12607:45,modifiability,variab,variable,45,[CI] Fix nightlies on Windows; . Fixes wrong variable being used to specify branch for windows nightlies. ```diff. --platform windows10. --incremental false. - --base_ref ${{ github.base_ref }}. + --base_ref ${{ github.ref_name }}. --repository ${{ github.server_url }}/${{ github.repository }}. ```.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12607
https://github.com/root-project/root/pull/12608:44,interoperability,format,formatting,44,"[RF] Improvements to `RooAbsPdf::paramOn()` formatting; Two changes: . 1. Removes the deprecated `RooFit::Format(const char* option, int)` command argument. 2. Remove deprecated `RooAbsPdf::paramOn()` overload that take a formatting string directly. 3. Make it possible to use parameter titles instead of variables in `RooAbsPdf::paramOn()`, closing the followng JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-6039. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12608
https://github.com/root-project/root/pull/12608:106,interoperability,Format,Format,106,"[RF] Improvements to `RooAbsPdf::paramOn()` formatting; Two changes: . 1. Removes the deprecated `RooFit::Format(const char* option, int)` command argument. 2. Remove deprecated `RooAbsPdf::paramOn()` overload that take a formatting string directly. 3. Make it possible to use parameter titles instead of variables in `RooAbsPdf::paramOn()`, closing the followng JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-6039. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12608
https://github.com/root-project/root/pull/12608:222,interoperability,format,formatting,222,"[RF] Improvements to `RooAbsPdf::paramOn()` formatting; Two changes: . 1. Removes the deprecated `RooFit::Format(const char* option, int)` command argument. 2. Remove deprecated `RooAbsPdf::paramOn()` overload that take a formatting string directly. 3. Make it possible to use parameter titles instead of variables in `RooAbsPdf::paramOn()`, closing the followng JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-6039. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12608
https://github.com/root-project/root/pull/12608:277,modifiability,paramet,parameter,277,"[RF] Improvements to `RooAbsPdf::paramOn()` formatting; Two changes: . 1. Removes the deprecated `RooFit::Format(const char* option, int)` command argument. 2. Remove deprecated `RooAbsPdf::paramOn()` overload that take a formatting string directly. 3. Make it possible to use parameter titles instead of variables in `RooAbsPdf::paramOn()`, closing the followng JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-6039. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12608
https://github.com/root-project/root/pull/12608:305,modifiability,variab,variables,305,"[RF] Improvements to `RooAbsPdf::paramOn()` formatting; Two changes: . 1. Removes the deprecated `RooFit::Format(const char* option, int)` command argument. 2. Remove deprecated `RooAbsPdf::paramOn()` overload that take a formatting string directly. 3. Make it possible to use parameter titles instead of variables in `RooAbsPdf::paramOn()`, closing the followng JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-6039. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12608
https://github.com/root-project/root/pull/12608:139,usability,command,command,139,"[RF] Improvements to `RooAbsPdf::paramOn()` formatting; Two changes: . 1. Removes the deprecated `RooFit::Format(const char* option, int)` command argument. 2. Remove deprecated `RooAbsPdf::paramOn()` overload that take a formatting string directly. 3. Make it possible to use parameter titles instead of variables in `RooAbsPdf::paramOn()`, closing the followng JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-6039. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12608
https://github.com/root-project/root/issues/12610:73,availability,Escal,Escalier,73,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/issues/12610:36,modifiability,variab,variables,36,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/issues/12610:296,modifiability,variab,variables,296,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/issues/12610:491,modifiability,variab,variable,491,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/issues/12610:1550,modifiability,variab,variable,1550,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/issues/12610:73,security,Escal,Escalier,73,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/issues/12610:1543,testability,simpl,simple,1543,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/issues/12610:1543,usability,simpl,simple,1543,"[RF] RooRealVar for vector/array of variables; *Original request by Marc Escalier in [ROOT-2753](https://sft.its.cern.ch/jira/browse/ROOT-2753), which got quite a few comments. Ported now to GitHub to make the request more visible.*. Hello,. one can create a RooDataSet with a given selection on variables by doing :. ```C++. RooRealVar myvariable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable,""condition on myvariable""). ```. for which ""condition on the variable"" could be for example : ""myvariable < 10"". this works well if myvariable is a float for example. but in the case where myvariable is a vector (i mean a array) of float or anything else :. (myvector_variable[0], myvector_myvariable[1], etc...), how to do to make a selection on the first (or any index) element of the vector, with a condition on the element of the vector ? it seems this is not implemented in roofit ? i mean, if i do this :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable,""myvector_variable[0]<10""). ```. it crashes. if i do :. ```C++. RooRealVar myvector_variable(""myvector_variable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvariable[0],""myvector_variable[0] < 10""). ```. it is ""forbidden"" by the root/roofit program. by the way, it crashes also if i do :. ```C++. RooRealVar myvector_variable(""myvariable"",...). RooDataSet mydataset(""mydataset"",""mydataset"",mytree,myvector_variable). ```. (if myvariable is a vector and not a simple variable). thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12610
https://github.com/root-project/root/pull/12611:13,interoperability,format,format,13,"Suppress gif format from StressGraphics; Ubuntu has removed GIF support from their libAfterImage. . Moreover ""gif"" is not the most used format for binaries output these days. People mainly use png and jpg .... Therefore it makes sense to remove the use of GIF output from stressGraphics? . This PR fixes: https://github.com/root-project/root/issues/12570.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12611
https://github.com/root-project/root/pull/12611:136,interoperability,format,format,136,"Suppress gif format from StressGraphics; Ubuntu has removed GIF support from their libAfterImage. . Moreover ""gif"" is not the most used format for binaries output these days. People mainly use png and jpg .... Therefore it makes sense to remove the use of GIF output from stressGraphics? . This PR fixes: https://github.com/root-project/root/issues/12570.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12611
https://github.com/root-project/root/pull/12611:64,usability,support,support,64,"Suppress gif format from StressGraphics; Ubuntu has removed GIF support from their libAfterImage. . Moreover ""gif"" is not the most used format for binaries output these days. People mainly use png and jpg .... Therefore it makes sense to remove the use of GIF output from stressGraphics? . This PR fixes: https://github.com/root-project/root/issues/12570.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12611
https://github.com/root-project/root/pull/12612:305,availability,failur,failures,305,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:305,deployability,fail,failures,305,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:123,energy efficiency,model,model,123,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:104,modifiability,paramet,parameters,104,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:179,modifiability,paramet,parameter,179,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:305,performance,failur,failures,305,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:305,reliability,fail,failures,305,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:49,safety,test,testRooFuncWrapper,49,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:123,security,model,model,123,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12612:49,testability,test,testRooFuncWrapper,49,"[RF] Fix wrong size for gradient output array in testRooFuncWrapper.; Instead of guessing the number of parameters for the model represented by RooFuncWrapper, we now introduce a parameter size function that can be used to declare gradient output arrays of the right size. Possibly fixes some of the ASAN failures @hahnjo reported earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12612
https://github.com/root-project/root/pull/12613:1069,availability,operat,operation,1069,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:10,energy efficiency,reduc,reduce,10,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:547,energy efficiency,load,loading,547,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:254,integrability,sub,sub-processes,254,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:194,modifiability,variab,variables,194,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:50,performance,cach,caching,50,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:547,performance,load,loading,547,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:386,reliability,doe,does,386,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:642,reliability,DOE,DOESNOTEXIST,642,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:663,reliability,DOE,DOESNOTEXIST,663,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:1368,security,sign,significant,1368,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:414,usability,behavi,behaviour,414,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12613:440,usability,user,users,440,"Option to reduce startup syscalls via environment caching; This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables. This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```. export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'). ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```. strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=... export ROOT_CPPSYSINCL=... strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls. ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12613
https://github.com/root-project/root/pull/12614:443,integrability,wrap,wraps,443,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:861,integrability,wrap,wrapping,861,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:1004,integrability,event,eventually,1004,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:360,performance,memor,memory,360,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:1160,performance,memor,memory,1160,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:118,usability,indicat,indicating,118,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:360,usability,memor,memory,360,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:1113,usability,tool,tool,1113,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12614:1160,usability,memor,memory,1160,"[RF] Introduce `RooFit::OwningPtr<T>` alias for owning pointers; This commit introduces an alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. For RooFit developers, it can be very useful to make this an alias to `std::unique_ptr<T>`, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a `RooFit::OwningPtr<T>` in a `std::unique_ptr<T>`. The two fundamental RooFit functions `RooAbsArg::getVariables()` and `RooAbsArg::getParameters()` are also migrated to this new alias, and I tried to recompile ROOT locally using the `std::unique_ptr<T>` alias. This commit includes also the necessary changes to make ROOT compile with both raw and smart pointer alias, always wrapping the result of these functions in `std::unique_ptr<RooArgSet>`. There are many benefits of this alias, and my ultimate goal here is to eventually make PyROOT aware of it to always take ownership of the referenced objects. But it's also a great tool for developers to check that there are no memory issues in RooFit code. Now that this PR sets the first examples of how to use this alias, I can make further migrations also a good warm-up projects for new contributors such as students.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12614
https://github.com/root-project/root/pull/12615:76,integrability,wrap,wrapper,76,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12615:303,integrability,interfac,interface,303,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12615:76,interoperability,wrapper,wrapper,76,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12615:303,interoperability,interfac,interface,303,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12615:303,modifiability,interfac,interface,303,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12615:21,performance,memor,memory,21,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12615:354,performance,time,time,354,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12615:21,usability,memor,memory,21,"[math][mathmore] Fix memory leak in GaussianND random function; Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12615
https://github.com/root-project/root/pull/12617:75,availability,operat,operator,75,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:368,availability,operat,operators,368,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:393,availability,failur,failure,393,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:87,deployability,observ,observed,87,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:102,deployability,build,building,102,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:204,deployability,fail,fails,204,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:393,deployability,fail,failure,393,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:242,interoperability,convers,conversion,242,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:393,performance,failur,failure,393,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:204,reliability,fail,fails,204,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:393,reliability,fail,failure,393,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:87,testability,observ,observed,87,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12617:338,usability,prefer,preferring,338,"C++20 fixes: add missing include, fix span constructor, symmetric equality operator; I observed these building on macOS 13.2.1 and XCode 14.2. - Construction of `std::span` from vector iterators directly fails to compile due to not finding a conversion. This can be worked around by passing in a pointer and a size. - Warning about C++20 preferring symmetric equality operators (this is not a failure (yet)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12617
https://github.com/root-project/root/pull/12618:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 13; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12227. 2. https://github.com/root-project/root/pull/12016. Only the commits 1, 2, 5, 6, 8 that don't change the definition of `RooNumber::infinity()`. 3. https://github.com/root-project/root/pull/12328. 4. https://github.com/root-project/root/pull/12330. 5. https://github.com/root-project/root/pull/12207. Related to https://github.com/root-project/root/issues/12319.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618
https://github.com/root-project/root/pull/12618:153,deployability,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 13; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12227. 2. https://github.com/root-project/root/pull/12016. Only the commits 1, 2, 5, 6, 8 that don't change the definition of `RooNumber::infinity()`. 3. https://github.com/root-project/root/pull/12328. 4. https://github.com/root-project/root/pull/12330. 5. https://github.com/root-project/root/pull/12207. Related to https://github.com/root-project/root/issues/12319.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618
https://github.com/root-project/root/pull/12618:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 13; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12227. 2. https://github.com/root-project/root/pull/12016. Only the commits 1, 2, 5, 6, 8 that don't change the definition of `RooNumber::infinity()`. 3. https://github.com/root-project/root/pull/12328. 4. https://github.com/root-project/root/pull/12330. 5. https://github.com/root-project/root/pull/12207. Related to https://github.com/root-project/root/issues/12319.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618
https://github.com/root-project/root/pull/12618:153,safety,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 13; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12227. 2. https://github.com/root-project/root/pull/12016. Only the commits 1, 2, 5, 6, 8 that don't change the definition of `RooNumber::infinity()`. 3. https://github.com/root-project/root/pull/12328. 4. https://github.com/root-project/root/pull/12330. 5. https://github.com/root-project/root/pull/12207. Related to https://github.com/root-project/root/issues/12319.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618
https://github.com/root-project/root/pull/12618:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 13; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12227. 2. https://github.com/root-project/root/pull/12016. Only the commits 1, 2, 5, 6, 8 that don't change the definition of `RooNumber::infinity()`. 3. https://github.com/root-project/root/pull/12328. 4. https://github.com/root-project/root/pull/12330. 5. https://github.com/root-project/root/pull/12207. Related to https://github.com/root-project/root/issues/12319.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618
https://github.com/root-project/root/pull/12618:153,security,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 13; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12227. 2. https://github.com/root-project/root/pull/12016. Only the commits 1, 2, 5, 6, 8 that don't change the definition of `RooNumber::infinity()`. 3. https://github.com/root-project/root/pull/12328. 4. https://github.com/root-project/root/pull/12330. 5. https://github.com/root-project/root/pull/12207. Related to https://github.com/root-project/root/issues/12319.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12618
https://github.com/root-project/root/pull/12619:14,deployability,version,version,14,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:82,deployability,version,version,82,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:223,deployability,version,version,223,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:285,deployability,version,version,285,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:485,deployability,version,version,485,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:552,deployability,version,version,552,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:14,integrability,version,version,14,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:82,integrability,version,version,82,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:223,integrability,version,version,223,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:285,integrability,version,version,285,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:485,integrability,version,version,485,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:552,integrability,version,version,552,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:14,modifiability,version,version,14,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:82,modifiability,version,version,82,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:223,modifiability,version,version,223,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:285,modifiability,version,version,285,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:485,modifiability,version,version,485,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:552,modifiability,version,version,552,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:538,performance,memor,memory,538,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12619:538,usability,memor,memory,538,"[RF] Increase version number of `RooRealVar` from 9 to 10; In 13670912, the class version of the `RooAbsReal` class was incremented. As explained in #8791, there are sometimes warnings in the IO of derived classes if their version number is not increased as well. Increasing the class version of RooRealVar indeed fixes this warning that one gets right now when reading old workspaces:. ```. Warning in <TStreamerInfo::CompareContent>: The following data member of. the on-file layout version 9 of class 'RooRealVar' differs from. the in-memory layout version 9:. RooAbsBinning _binning; //. vs. unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning;. ```. Thanks to @will-cern for catching this problem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12619
https://github.com/root-project/root/pull/12620:48,deployability,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 14; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12392. 2. https://github.com/root-project/root/pull/12340. 3. https://github.com/root-project/root/pull/12399. 4. https://github.com/root-project/root/pull/12413. Except for commits 5 and 6 that are unrelated to RooFitHS3. 6. https://github.com/root-project/root/pull/12467. 7. https://github.com/root-project/root/pull/12471. 8. https://github.com/root-project/root/pull/12470. 9. https://github.com/root-project/root/pull/12487. 10. https://github.com/root-project/root/pull/12490. 11. https://github.com/root-project/root/pull/12504. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12620
https://github.com/root-project/root/pull/12620:153,deployability,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 14; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12392. 2. https://github.com/root-project/root/pull/12340. 3. https://github.com/root-project/root/pull/12399. 4. https://github.com/root-project/root/pull/12413. Except for commits 5 and 6 that are unrelated to RooFitHS3. 6. https://github.com/root-project/root/pull/12467. 7. https://github.com/root-project/root/pull/12471. 8. https://github.com/root-project/root/pull/12470. 9. https://github.com/root-project/root/pull/12487. 10. https://github.com/root-project/root/pull/12490. 11. https://github.com/root-project/root/pull/12504. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12620
https://github.com/root-project/root/pull/12620:48,safety,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 14; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12392. 2. https://github.com/root-project/root/pull/12340. 3. https://github.com/root-project/root/pull/12399. 4. https://github.com/root-project/root/pull/12413. Except for commits 5 and 6 that are unrelated to RooFitHS3. 6. https://github.com/root-project/root/pull/12467. 7. https://github.com/root-project/root/pull/12471. 8. https://github.com/root-project/root/pull/12470. 9. https://github.com/root-project/root/pull/12487. 10. https://github.com/root-project/root/pull/12490. 11. https://github.com/root-project/root/pull/12504. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12620
https://github.com/root-project/root/pull/12620:153,safety,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 14; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12392. 2. https://github.com/root-project/root/pull/12340. 3. https://github.com/root-project/root/pull/12399. 4. https://github.com/root-project/root/pull/12413. Except for commits 5 and 6 that are unrelated to RooFitHS3. 6. https://github.com/root-project/root/pull/12467. 7. https://github.com/root-project/root/pull/12471. 8. https://github.com/root-project/root/pull/12470. 9. https://github.com/root-project/root/pull/12487. 10. https://github.com/root-project/root/pull/12490. 11. https://github.com/root-project/root/pull/12504. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12620
https://github.com/root-project/root/pull/12620:370,safety,Except,Except,370,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 14; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12392. 2. https://github.com/root-project/root/pull/12340. 3. https://github.com/root-project/root/pull/12399. 4. https://github.com/root-project/root/pull/12413. Except for commits 5 and 6 that are unrelated to RooFitHS3. 6. https://github.com/root-project/root/pull/12467. 7. https://github.com/root-project/root/pull/12471. 8. https://github.com/root-project/root/pull/12470. 9. https://github.com/root-project/root/pull/12487. 10. https://github.com/root-project/root/pull/12490. 11. https://github.com/root-project/root/pull/12504. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12620
https://github.com/root-project/root/pull/12620:48,security,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 14; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12392. 2. https://github.com/root-project/root/pull/12340. 3. https://github.com/root-project/root/pull/12399. 4. https://github.com/root-project/root/pull/12413. Except for commits 5 and 6 that are unrelated to RooFitHS3. 6. https://github.com/root-project/root/pull/12467. 7. https://github.com/root-project/root/pull/12471. 8. https://github.com/root-project/root/pull/12470. 9. https://github.com/root-project/root/pull/12487. 10. https://github.com/root-project/root/pull/12490. 11. https://github.com/root-project/root/pull/12504. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12620
https://github.com/root-project/root/pull/12620:153,security,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 14; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12392. 2. https://github.com/root-project/root/pull/12340. 3. https://github.com/root-project/root/pull/12399. 4. https://github.com/root-project/root/pull/12413. Except for commits 5 and 6 that are unrelated to RooFitHS3. 6. https://github.com/root-project/root/pull/12467. 7. https://github.com/root-project/root/pull/12471. 8. https://github.com/root-project/root/pull/12470. 9. https://github.com/root-project/root/pull/12487. 10. https://github.com/root-project/root/pull/12490. 11. https://github.com/root-project/root/pull/12504. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12620
https://github.com/root-project/root/issues/12621:647,availability,degrad,degradation,647,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:87,energy efficiency,Measur,Measurements,87,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:45,integrability,event,event,45,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:162,integrability,event,event,162,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:876,integrability,event,event,876,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:1015,integrability,pub,public,1015,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:905,interoperability,distribut,distributed,905,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:198,modifiability,scal,scaling,198,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:1,performance,I/O,I/O,1,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:32,performance,multi-thread,multi-thread,32,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:74,performance,bottleneck,bottlenecks,74,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:149,performance,multi-thread,multi-thread,149,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:232,performance,throttl,throttling,232,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:284,performance,throttl,throttling,284,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:629,performance,multiplex,multiplexing,629,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:1222,performance,content,contention,1222,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:647,reliability,degrad,degradation,647,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:1102,safety,compl,completeness,1102,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:1102,security,compl,completeness,1102,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12621:1255,security,access,access,1255,"[I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: . - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709. - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above). Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:. For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12621
https://github.com/root-project/root/issues/12622:318,energy efficiency,Draw,Draw,318,"TTreeCache might not be reset between runs.; It seems (at least in the `TTreeDraw` case that the `TTreeCache` does return to the learning phase after the completion of a run:. ```. Attaching file tutorials/hsimple.root as _file0... (TFile *) 0x556fa2b6a770. root [1] ntuple->SetCacheSize(100000000);. root [2] ntuple->Draw(""py""). root [4] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. root [5] ntuple->Draw(""px""). root [6] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12622
https://github.com/root-project/root/issues/12622:534,energy efficiency,Draw,Draw,534,"TTreeCache might not be reset between runs.; It seems (at least in the `TTreeDraw` case that the `TTreeCache` does return to the learning phase after the completion of a run:. ```. Attaching file tutorials/hsimple.root as _file0... (TFile *) 0x556fa2b6a770. root [1] ntuple->SetCacheSize(100000000);. root [2] ntuple->Draw(""py""). root [4] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. root [5] ntuple->Draw(""px""). root [6] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12622
https://github.com/root-project/root/issues/12622:110,reliability,doe,does,110,"TTreeCache might not be reset between runs.; It seems (at least in the `TTreeDraw` case that the `TTreeCache` does return to the learning phase after the completion of a run:. ```. Attaching file tutorials/hsimple.root as _file0... (TFile *) 0x556fa2b6a770. root [1] ntuple->SetCacheSize(100000000);. root [2] ntuple->Draw(""py""). root [4] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. root [5] ntuple->Draw(""px""). root [6] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12622
https://github.com/root-project/root/issues/12622:154,safety,compl,completion,154,"TTreeCache might not be reset between runs.; It seems (at least in the `TTreeDraw` case that the `TTreeCache` does return to the learning phase after the completion of a run:. ```. Attaching file tutorials/hsimple.root as _file0... (TFile *) 0x556fa2b6a770. root [1] ntuple->SetCacheSize(100000000);. root [2] ntuple->Draw(""py""). root [4] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. root [5] ntuple->Draw(""px""). root [6] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12622
https://github.com/root-project/root/issues/12622:154,security,compl,completion,154,"TTreeCache might not be reset between runs.; It seems (at least in the `TTreeDraw` case that the `TTreeCache` does return to the learning phase after the completion of a run:. ```. Attaching file tutorials/hsimple.root as _file0... (TFile *) 0x556fa2b6a770. root [1] ntuple->SetCacheSize(100000000);. root [2] ntuple->Draw(""py""). root [4] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. root [5] ntuple->Draw(""px""). root [6] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12622
https://github.com/root-project/root/issues/12622:129,usability,learn,learning,129,"TTreeCache might not be reset between runs.; It seems (at least in the `TTreeDraw` case that the `TTreeCache` does return to the learning phase after the completion of a run:. ```. Attaching file tutorials/hsimple.root as _file0... (TFile *) 0x556fa2b6a770. root [1] ntuple->SetCacheSize(100000000);. root [2] ntuple->Draw(""py""). root [4] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. root [5] ntuple->Draw(""px""). root [6] ntuple->GetReadCache(ntuple->GetDirectory()->GetFile())->GetCachedBranches()->ls();. OBJ: TObjArray TObjArray An array of objects : 0. OBJ: TBranch py py : 0 at: 0x556fa7555e70. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12622
https://github.com/root-project/root/issues/12623:737,availability,Operat,Operating,737,"gDirectory macro should include global-namespace qualification; - [x] Checked for duplicates. ### Describe the bug. The definition of `gDirectory` as a macro causes problems when used inside of a namespace named `ROOT`. For example, the following fails to compile with GCC 9.3 and C++17:. ```C++. #include ""TDirectory.h"". namespace util::ROOT {. void foo() { auto path = gDirectory->GetPath(); }. }. ```. Because `gDirectory` expands to `ROOT::Internal...` and not `::ROOT::Internal...`, C++ name lookup chooses `util::ROOT` and notices that `util::ROOT::Internal` is non-existent. ### Expected behavior. The above should compile without ambiguity. A PR is forthcoming to address this limitation. ### Setup. 1. Version: ROOT 6.26/06. 2. Operating system: CentOS 7. 3. Built from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12623
https://github.com/root-project/root/issues/12623:247,deployability,fail,fails,247,"gDirectory macro should include global-namespace qualification; - [x] Checked for duplicates. ### Describe the bug. The definition of `gDirectory` as a macro causes problems when used inside of a namespace named `ROOT`. For example, the following fails to compile with GCC 9.3 and C++17:. ```C++. #include ""TDirectory.h"". namespace util::ROOT {. void foo() { auto path = gDirectory->GetPath(); }. }. ```. Because `gDirectory` expands to `ROOT::Internal...` and not `::ROOT::Internal...`, C++ name lookup chooses `util::ROOT` and notices that `util::ROOT::Internal` is non-existent. ### Expected behavior. The above should compile without ambiguity. A PR is forthcoming to address this limitation. ### Setup. 1. Version: ROOT 6.26/06. 2. Operating system: CentOS 7. 3. Built from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12623
https://github.com/root-project/root/issues/12623:711,deployability,Version,Version,711,"gDirectory macro should include global-namespace qualification; - [x] Checked for duplicates. ### Describe the bug. The definition of `gDirectory` as a macro causes problems when used inside of a namespace named `ROOT`. For example, the following fails to compile with GCC 9.3 and C++17:. ```C++. #include ""TDirectory.h"". namespace util::ROOT {. void foo() { auto path = gDirectory->GetPath(); }. }. ```. Because `gDirectory` expands to `ROOT::Internal...` and not `::ROOT::Internal...`, C++ name lookup chooses `util::ROOT` and notices that `util::ROOT::Internal` is non-existent. ### Expected behavior. The above should compile without ambiguity. A PR is forthcoming to address this limitation. ### Setup. 1. Version: ROOT 6.26/06. 2. Operating system: CentOS 7. 3. Built from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12623
https://github.com/root-project/root/issues/12623:711,integrability,Version,Version,711,"gDirectory macro should include global-namespace qualification; - [x] Checked for duplicates. ### Describe the bug. The definition of `gDirectory` as a macro causes problems when used inside of a namespace named `ROOT`. For example, the following fails to compile with GCC 9.3 and C++17:. ```C++. #include ""TDirectory.h"". namespace util::ROOT {. void foo() { auto path = gDirectory->GetPath(); }. }. ```. Because `gDirectory` expands to `ROOT::Internal...` and not `::ROOT::Internal...`, C++ name lookup chooses `util::ROOT` and notices that `util::ROOT::Internal` is non-existent. ### Expected behavior. The above should compile without ambiguity. A PR is forthcoming to address this limitation. ### Setup. 1. Version: ROOT 6.26/06. 2. Operating system: CentOS 7. 3. Built from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12623
https://github.com/root-project/root/issues/12623:711,modifiability,Version,Version,711,"gDirectory macro should include global-namespace qualification; - [x] Checked for duplicates. ### Describe the bug. The definition of `gDirectory` as a macro causes problems when used inside of a namespace named `ROOT`. For example, the following fails to compile with GCC 9.3 and C++17:. ```C++. #include ""TDirectory.h"". namespace util::ROOT {. void foo() { auto path = gDirectory->GetPath(); }. }. ```. Because `gDirectory` expands to `ROOT::Internal...` and not `::ROOT::Internal...`, C++ name lookup chooses `util::ROOT` and notices that `util::ROOT::Internal` is non-existent. ### Expected behavior. The above should compile without ambiguity. A PR is forthcoming to address this limitation. ### Setup. 1. Version: ROOT 6.26/06. 2. Operating system: CentOS 7. 3. Built from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12623
https://github.com/root-project/root/issues/12623:247,reliability,fail,fails,247,"gDirectory macro should include global-namespace qualification; - [x] Checked for duplicates. ### Describe the bug. The definition of `gDirectory` as a macro causes problems when used inside of a namespace named `ROOT`. For example, the following fails to compile with GCC 9.3 and C++17:. ```C++. #include ""TDirectory.h"". namespace util::ROOT {. void foo() { auto path = gDirectory->GetPath(); }. }. ```. Because `gDirectory` expands to `ROOT::Internal...` and not `::ROOT::Internal...`, C++ name lookup chooses `util::ROOT` and notices that `util::ROOT::Internal` is non-existent. ### Expected behavior. The above should compile without ambiguity. A PR is forthcoming to address this limitation. ### Setup. 1. Version: ROOT 6.26/06. 2. Operating system: CentOS 7. 3. Built from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12623
https://github.com/root-project/root/issues/12623:595,usability,behavi,behavior,595,"gDirectory macro should include global-namespace qualification; - [x] Checked for duplicates. ### Describe the bug. The definition of `gDirectory` as a macro causes problems when used inside of a namespace named `ROOT`. For example, the following fails to compile with GCC 9.3 and C++17:. ```C++. #include ""TDirectory.h"". namespace util::ROOT {. void foo() { auto path = gDirectory->GetPath(); }. }. ```. Because `gDirectory` expands to `ROOT::Internal...` and not `::ROOT::Internal...`, C++ name lookup chooses `util::ROOT` and notices that `util::ROOT::Internal` is non-existent. ### Expected behavior. The above should compile without ambiguity. A PR is forthcoming to address this limitation. ### Setup. 1. Version: ROOT 6.26/06. 2. Operating system: CentOS 7. 3. Built from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12623
https://github.com/root-project/root/pull/12624:307,deployability,updat,updated,307,Fully qualify ROOT namespace; # This Pull request:. Addresses an infelicity in the definition of the `gDirectory` macro. ## Changes or fixes:. The leading `ROOT` namespace qualification in the macro definition is prefixed with the global namespace (`::`). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12624
https://github.com/root-project/root/pull/12624:277,safety,test,tested,277,Fully qualify ROOT namespace; # This Pull request:. Addresses an infelicity in the definition of the `gDirectory` macro. ## Changes or fixes:. The leading `ROOT` namespace qualification in the macro definition is prefixed with the global namespace (`::`). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12624
https://github.com/root-project/root/pull/12624:307,safety,updat,updated,307,Fully qualify ROOT namespace; # This Pull request:. Addresses an infelicity in the definition of the `gDirectory` macro. ## Changes or fixes:. The leading `ROOT` namespace qualification in the macro definition is prefixed with the global namespace (`::`). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12624
https://github.com/root-project/root/pull/12624:307,security,updat,updated,307,Fully qualify ROOT namespace; # This Pull request:. Addresses an infelicity in the definition of the `gDirectory` macro. ## Changes or fixes:. The leading `ROOT` namespace qualification in the macro definition is prefixed with the global namespace (`::`). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12624
https://github.com/root-project/root/pull/12624:277,testability,test,tested,277,Fully qualify ROOT namespace; # This Pull request:. Addresses an infelicity in the definition of the `gDirectory` macro. ## Changes or fixes:. The leading `ROOT` namespace qualification in the macro definition is prefixed with the global namespace (`::`). ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #12623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12624
https://github.com/root-project/root/pull/12626:361,availability,error,errors,361,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:782,availability,error,error,782,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1029,availability,error,error,1029,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1291,availability,error,error,1291,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1538,availability,error,error,1538,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:355,deployability,build,build,355,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:389,deployability,build,building,389,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:398,deployability,modul,module,398,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:420,deployability,build,building,420,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:429,deployability,modul,module,429,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:496,deployability,modul,module-includes,496,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:583,deployability,Toolchain,Toolchains,583,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:701,deployability,Toolchain,Toolchains,701,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:947,deployability,Toolchain,Toolchains,947,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1209,deployability,Toolchain,Toolchains,1209,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1456,deployability,Toolchain,Toolchains,1456,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:406,energy efficiency,Core,Core,406,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1056,interoperability,specif,specifier,1056,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:398,modifiability,modul,module,398,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:429,modifiability,modul,module,429,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:496,modifiability,modul,module-includes,496,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:361,performance,error,errors,361,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:564,performance,Content,Contents,564,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:682,performance,Content,Contents,682,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:782,performance,error,error,782,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:928,performance,Content,Contents,928,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1029,performance,error,error,1029,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1190,performance,Content,Contents,1190,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1291,performance,error,error,1291,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1437,performance,Content,Contents,1437,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1538,performance,error,error,1538,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:361,safety,error,errors,361,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:398,safety,modul,module,398,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:429,safety,modul,module,429,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:496,safety,modul,module-includes,496,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:782,safety,error,error,782,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1029,safety,error,error,1029,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1291,safety,error,error,1291,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1538,safety,error,error,1538,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1316,security,ident,identifier,1316,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:195,usability,command,command,195,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:208,usability,tool,tools,208,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:361,usability,error,errors,361,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:583,usability,Tool,Toolchains,583,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:701,usability,Tool,Toolchains,701,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:782,usability,error,error,782,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:947,usability,Tool,Toolchains,947,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1029,usability,error,error,1029,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1209,usability,Tool,Toolchains,1209,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1291,usability,error,error,1291,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1456,usability,Tool,Toolchains,1456,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12626:1538,usability,error,error,1538,"[cmake] Pass isysroot to clang when determining stdlib incpath:; isysroot influences where clang will pick up libc++. Without this, and with. Xcode 14.3, cling will use libc++ from Xcode (or the command line tools) rather. than stdc++ from the macOS SDK, as clang would normally use. Passing the isysroot. (which point to the SDK) fixes this. This solves build errors such as:. ```. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:17:. In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:309:. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:1: error: cannot template a using declaration. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:21: error: C++ requires a type specifier for all declarations. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:68: error: use of undeclared identifier '_Val'. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ^. /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:462:73: error: expected '(' for function-style cast or type construction. using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12626
https://github.com/root-project/root/pull/12627:156,availability,servic,services,156,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:477,availability,state,statement,477,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:741,availability,state,statement,741,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:969,availability,state,statement,969,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:1232,availability,state,statement,1232,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:156,deployability,servic,services,156,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:329,deployability,build,build,329,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:393,deployability,build,build,393,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:612,deployability,build,build,612,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:676,deployability,build,build,676,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:821,deployability,build,build,821,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:885,deployability,build,build,885,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:1102,deployability,build,build,1102,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:1166,deployability,build,build,1166,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:156,integrability,servic,services,156,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:477,integrability,state,statement,477,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:741,integrability,state,statement,741,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:969,integrability,state,statement,969,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:1232,integrability,state,statement,1232,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12627:156,modifiability,servic,services,156,"[RF] Fix RooFit warnings in the nightlies; This is a follow-up to 82d17fb69c9a, fixing these warnings seen in the nightlies (Ubuntu 20.04):. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2004-clang,SPEC=soversion,V=master/lastBuild/parsed_console/. ```. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8046:7: note: previous statement is here. if(onfile._vecE) _vecE = *onfile._vecE; \. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8048:11: warning: misleading indentation; statement is not part of the previous 'if' [-Wmisleading-indentation]. if(onfile._vecEH) _vecEH = *onfile._vecEH;. ^. /home/sftnight/build/night/LABEL/ROOT-ubuntu2004-clang/SPEC/soversion/V/master/build/roofit/roofitcore/G__RooFitCore.cxx:8047:11: note: previous statement is here. if(onfile._vecEL) _vecEL = *onfile._vecEL; \. ^. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12627
https://github.com/root-project/root/pull/12628:381,availability,servic,services,381,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:264,deployability,version,versions,264,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:381,deployability,servic,services,381,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:1,energy efficiency,core,core,1,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:30,energy efficiency,core,core,30,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:160,energy efficiency,core,core,160,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:264,integrability,version,versions,264,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:381,integrability,servic,services,381,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:264,modifiability,version,versions,264,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:381,modifiability,servic,services,381,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:233,usability,prototyp,prototype,233,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:289,usability,support,supported,289,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12628:324,usability,prototyp,prototype,324,"[core] Remove some `mm*.c` in core/clib; These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```. core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]. extern char *getenv ();. ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12628
https://github.com/root-project/root/pull/12629:107,availability,Failur,Failures,107,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:424,availability,error,error,424,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:737,availability,error,error,737,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:1,deployability,modul,modulemap,1,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:107,deployability,Fail,Failures,107,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:149,deployability,build,build,149,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:312,deployability,build,build,312,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:645,deployability,build,build,645,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:699,deployability,build,build,699,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:719,deployability,modul,modulemap,719,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:744,deployability,modul,module,744,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:803,deployability,modul,module,803,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:893,deployability,modul,module,893,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:870,integrability,sub,submodule,870,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:1,modifiability,modul,modulemap,1,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:719,modifiability,modul,modulemap,719,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:744,modifiability,modul,module,744,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:803,modifiability,modul,module,803,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:893,modifiability,modul,module,893,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:107,performance,Failur,Failures,107,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:424,performance,error,error,424,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:737,performance,error,error,737,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:107,reliability,Fail,Failures,107,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:1,safety,modul,modulemap,1,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:424,safety,error,error,424,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:719,safety,modul,modulemap,719,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:737,safety,error,error,737,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:744,safety,modul,module,744,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:803,safety,modul,module,803,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:893,safety,modul,module,893,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:77,usability,support,support,77,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:424,usability,error,error,424,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12629:737,usability,error,error,737,"[modulemap] bits/chrono.h exists already with C++11:; It is needed for C++11 support of #include <chrono>. Failures:. ```. Processing /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C... In file included from input_line_10:1:. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/root/tutorials/multicore/mt201_parallelHistoFill.C:55:51: error: no member named 'duration' in namespace 'std::chrono'. std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));. ~~~~~~~~~~~~~^. ```. and. ```. root [11] #include <bits/chrono.h>. /home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/etc/cling/std.modulemap:432:10: error: module 'std.bits/chrono.h' requires feature 'cplusplus17'. module ""bits/chrono.h"" [optional] {. ^. ROOT_prompt_11:1:10: note: submodule of top-level module 'std' implicitly imported here. ^. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12629
https://github.com/root-project/root/pull/12630:48,deployability,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 15; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 0. https://github.com/root-project/root/pull/12459. 1. https://github.com/root-project/root/pull/12518. 2. https://github.com/root-project/root/pull/12556. 3. https://github.com/root-project/root/pull/12578. 4. https://github.com/root-project/root/pull/12577. 5. https://github.com/root-project/root/pull/12595. 6. https://github.com/root-project/root/pull/12608. Only the second commit that does not remove deprecated functionality. 7. https://github.com/root-project/root/pull/12594. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12630
https://github.com/root-project/root/pull/12630:153,deployability,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 15; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 0. https://github.com/root-project/root/pull/12459. 1. https://github.com/root-project/root/pull/12518. 2. https://github.com/root-project/root/pull/12556. 3. https://github.com/root-project/root/pull/12578. 4. https://github.com/root-project/root/pull/12577. 5. https://github.com/root-project/root/pull/12595. 6. https://github.com/root-project/root/pull/12608. Only the second commit that does not remove deprecated functionality. 7. https://github.com/root-project/root/pull/12594. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12630
https://github.com/root-project/root/pull/12630:554,reliability,doe,does,554,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 15; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 0. https://github.com/root-project/root/pull/12459. 1. https://github.com/root-project/root/pull/12518. 2. https://github.com/root-project/root/pull/12556. 3. https://github.com/root-project/root/pull/12578. 4. https://github.com/root-project/root/pull/12577. 5. https://github.com/root-project/root/pull/12595. 6. https://github.com/root-project/root/pull/12608. Only the second commit that does not remove deprecated functionality. 7. https://github.com/root-project/root/pull/12594. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12630
https://github.com/root-project/root/pull/12630:48,safety,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 15; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 0. https://github.com/root-project/root/pull/12459. 1. https://github.com/root-project/root/pull/12518. 2. https://github.com/root-project/root/pull/12556. 3. https://github.com/root-project/root/pull/12578. 4. https://github.com/root-project/root/pull/12577. 5. https://github.com/root-project/root/pull/12595. 6. https://github.com/root-project/root/pull/12608. Only the second commit that does not remove deprecated functionality. 7. https://github.com/root-project/root/pull/12594. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12630
https://github.com/root-project/root/pull/12630:153,safety,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 15; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 0. https://github.com/root-project/root/pull/12459. 1. https://github.com/root-project/root/pull/12518. 2. https://github.com/root-project/root/pull/12556. 3. https://github.com/root-project/root/pull/12578. 4. https://github.com/root-project/root/pull/12577. 5. https://github.com/root-project/root/pull/12595. 6. https://github.com/root-project/root/pull/12608. Only the second commit that does not remove deprecated functionality. 7. https://github.com/root-project/root/pull/12594. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12630
https://github.com/root-project/root/pull/12630:48,security,patch,patches,48,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 15; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 0. https://github.com/root-project/root/pull/12459. 1. https://github.com/root-project/root/pull/12518. 2. https://github.com/root-project/root/pull/12556. 3. https://github.com/root-project/root/pull/12578. 4. https://github.com/root-project/root/pull/12577. 5. https://github.com/root-project/root/pull/12595. 6. https://github.com/root-project/root/pull/12608. Only the second commit that does not remove deprecated functionality. 7. https://github.com/root-project/root/pull/12594. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12630
https://github.com/root-project/root/pull/12630:153,security,patch,patches,153,[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 15; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 0. https://github.com/root-project/root/pull/12459. 1. https://github.com/root-project/root/pull/12518. 2. https://github.com/root-project/root/pull/12556. 3. https://github.com/root-project/root/pull/12578. 4. https://github.com/root-project/root/pull/12577. 5. https://github.com/root-project/root/pull/12595. 6. https://github.com/root-project/root/pull/12608. Only the second commit that does not remove deprecated functionality. 7. https://github.com/root-project/root/pull/12594. Related to https://github.com/root-project/root/issues/12319.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12630
https://github.com/root-project/root/issues/12631:428,availability,Down,Downloading,428,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:548,availability,error,error,548,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:840,availability,Error,Error,840,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:10,deployability,build,build,10,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:82,deployability,build,build,82,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:191,deployability,build,build,191,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:197,deployability,fail,fail,197,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:284,deployability,version,version,284,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:444,deployability,build,building,444,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:460,deployability,version,version,460,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:485,deployability,build,building,485,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:654,deployability,version,version,654,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:855,deployability,modul,modules,855,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:996,deployability,instal,installation,996,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1025,deployability,instal,installation,1025,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1154,deployability,build,build,1154,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1212,deployability,instal,install,1212,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1289,deployability,build,build,1289,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1299,deployability,build,build,1299,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1341,deployability,instal,install,1341,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1365,deployability,instal,install,1365,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1442,deployability,build,builddir,1442,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1455,deployability,build,builddir,1455,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1510,deployability,instal,install,1510,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1694,deployability,version,versions,1694,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1721,deployability,fail,failed,1721,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:284,integrability,version,version,284,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:460,integrability,version,version,460,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:654,integrability,version,version,654,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:759,integrability,wrap,wrapper,759,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:900,integrability,messag,message,900,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1694,integrability,version,versions,1694,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:759,interoperability,wrapper,wrapper,759,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:900,interoperability,messag,message,900,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:284,modifiability,version,version,284,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:460,modifiability,version,version,460,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:654,modifiability,version,version,654,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:855,modifiability,modul,modules,855,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:949,modifiability,variab,variable,949,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1694,modifiability,version,versions,1694,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:548,performance,error,error,548,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:840,performance,Error,Error,840,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:156,reliability,doe,doesn,156,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:197,reliability,fail,fail,197,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1721,reliability,fail,failed,1721,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:548,safety,error,error,548,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:840,safety,Error,Error,840,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:855,safety,modul,modules,855,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1772,safety,compl,complaining,1772,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1772,security,compl,complaining,1772,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:1641,testability,context,context,1641,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:548,usability,error,error,548,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/issues/12631:840,usability,Error,Error,840,"Unable to build master with external XROOTD; ### Describe the bug. When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:. ```. -- Looking for XROOTD. -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po). -- Setting OLDPACK TRUE. -- XROOTD not found, enabling 'builtin_xrootd' option. -- Downloading and building XROOTD version 5.5.2. ```. When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:. ```. 121 -- Looking for XROOTD. 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV. ERS=500050003). 123 -- libXrdMain not found: xproofd will be . a wrapper around xrootd. 124 -- libXrdClient not found: use built-in. >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c. make:992 (message):. 126 XROOTD not found. Set environment variable XRDSYS t. o point to your XROOTD. 127 installation, or include the installation of XROOTD . in the. 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab. le the option. 129 'builtin_xrootd' to build XROOTD internally. ```. ### To Reproduce. ```. # To install xrootd. git clone https://github.com/xrootd/xrootd. cd xrootd. mkdir build. cd build. cmake .. -DCMAKE_INSTALL_PREFIX=../install. ```. ```. # To install ROOT. git clone https://github.com/root-project/root. cd root. mkdir builddir. cd builddir. cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON. ```. ### Setup. cmake 3.26.2. OS: Arch Linux. ### Additional context. I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12631
https://github.com/root-project/root/pull/12632:347,interoperability,compatib,compatibility,347,"[RF] Remove RooMomentMorphND (keep only RooMomentMorphFuncND); The `RooMomentMorphND` and `RooMomentMorphFuncND` were almost exact. copies of each other. However, the `RooMomentMorphND` had a problem: it was not serializable. because some of its data member classes were missing `LinkDef` entries. This means we don't need to care about backwards compatibility and can. remove this class. A flag is added to the `RooMomentMorphFuncND` to. change its implementation to match the `RooMomentMorphND` exactly (and I. really do mean **exactly** here, I diffed the source code). Instructions are added to the README and the documentation for users to. migrate their code. By the way, there are probably not many users of. this class to begin with, because it was only added a few years ago and. has absolutely zero documentation. Furthermore, the `RooMomentMorphND::getVal()` function is changed to. `RooMomentMorphND::getValV()`, because this is the real virtual function. that should be overridden. Closes https://github.com/root-project/root/issues/11876. This change has also been discussed some time ago @cburgard, who originally contributed the code for these two classes to ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12632
https://github.com/root-project/root/pull/12632:1094,performance,time,time,1094,"[RF] Remove RooMomentMorphND (keep only RooMomentMorphFuncND); The `RooMomentMorphND` and `RooMomentMorphFuncND` were almost exact. copies of each other. However, the `RooMomentMorphND` had a problem: it was not serializable. because some of its data member classes were missing `LinkDef` entries. This means we don't need to care about backwards compatibility and can. remove this class. A flag is added to the `RooMomentMorphFuncND` to. change its implementation to match the `RooMomentMorphND` exactly (and I. really do mean **exactly** here, I diffed the source code). Instructions are added to the README and the documentation for users to. migrate their code. By the way, there are probably not many users of. this class to begin with, because it was only added a few years ago and. has absolutely zero documentation. Furthermore, the `RooMomentMorphND::getVal()` function is changed to. `RooMomentMorphND::getValV()`, because this is the real virtual function. that should be overridden. Closes https://github.com/root-project/root/issues/11876. This change has also been discussed some time ago @cburgard, who originally contributed the code for these two classes to ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12632
https://github.com/root-project/root/pull/12632:618,usability,document,documentation,618,"[RF] Remove RooMomentMorphND (keep only RooMomentMorphFuncND); The `RooMomentMorphND` and `RooMomentMorphFuncND` were almost exact. copies of each other. However, the `RooMomentMorphND` had a problem: it was not serializable. because some of its data member classes were missing `LinkDef` entries. This means we don't need to care about backwards compatibility and can. remove this class. A flag is added to the `RooMomentMorphFuncND` to. change its implementation to match the `RooMomentMorphND` exactly (and I. really do mean **exactly** here, I diffed the source code). Instructions are added to the README and the documentation for users to. migrate their code. By the way, there are probably not many users of. this class to begin with, because it was only added a few years ago and. has absolutely zero documentation. Furthermore, the `RooMomentMorphND::getVal()` function is changed to. `RooMomentMorphND::getValV()`, because this is the real virtual function. that should be overridden. Closes https://github.com/root-project/root/issues/11876. This change has also been discussed some time ago @cburgard, who originally contributed the code for these two classes to ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12632
https://github.com/root-project/root/pull/12632:636,usability,user,users,636,"[RF] Remove RooMomentMorphND (keep only RooMomentMorphFuncND); The `RooMomentMorphND` and `RooMomentMorphFuncND` were almost exact. copies of each other. However, the `RooMomentMorphND` had a problem: it was not serializable. because some of its data member classes were missing `LinkDef` entries. This means we don't need to care about backwards compatibility and can. remove this class. A flag is added to the `RooMomentMorphFuncND` to. change its implementation to match the `RooMomentMorphND` exactly (and I. really do mean **exactly** here, I diffed the source code). Instructions are added to the README and the documentation for users to. migrate their code. By the way, there are probably not many users of. this class to begin with, because it was only added a few years ago and. has absolutely zero documentation. Furthermore, the `RooMomentMorphND::getVal()` function is changed to. `RooMomentMorphND::getValV()`, because this is the real virtual function. that should be overridden. Closes https://github.com/root-project/root/issues/11876. This change has also been discussed some time ago @cburgard, who originally contributed the code for these two classes to ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12632
https://github.com/root-project/root/pull/12632:706,usability,user,users,706,"[RF] Remove RooMomentMorphND (keep only RooMomentMorphFuncND); The `RooMomentMorphND` and `RooMomentMorphFuncND` were almost exact. copies of each other. However, the `RooMomentMorphND` had a problem: it was not serializable. because some of its data member classes were missing `LinkDef` entries. This means we don't need to care about backwards compatibility and can. remove this class. A flag is added to the `RooMomentMorphFuncND` to. change its implementation to match the `RooMomentMorphND` exactly (and I. really do mean **exactly** here, I diffed the source code). Instructions are added to the README and the documentation for users to. migrate their code. By the way, there are probably not many users of. this class to begin with, because it was only added a few years ago and. has absolutely zero documentation. Furthermore, the `RooMomentMorphND::getVal()` function is changed to. `RooMomentMorphND::getValV()`, because this is the real virtual function. that should be overridden. Closes https://github.com/root-project/root/issues/11876. This change has also been discussed some time ago @cburgard, who originally contributed the code for these two classes to ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12632
https://github.com/root-project/root/pull/12632:809,usability,document,documentation,809,"[RF] Remove RooMomentMorphND (keep only RooMomentMorphFuncND); The `RooMomentMorphND` and `RooMomentMorphFuncND` were almost exact. copies of each other. However, the `RooMomentMorphND` had a problem: it was not serializable. because some of its data member classes were missing `LinkDef` entries. This means we don't need to care about backwards compatibility and can. remove this class. A flag is added to the `RooMomentMorphFuncND` to. change its implementation to match the `RooMomentMorphND` exactly (and I. really do mean **exactly** here, I diffed the source code). Instructions are added to the README and the documentation for users to. migrate their code. By the way, there are probably not many users of. this class to begin with, because it was only added a few years ago and. has absolutely zero documentation. Furthermore, the `RooMomentMorphND::getVal()` function is changed to. `RooMomentMorphND::getValV()`, because this is the real virtual function. that should be overridden. Closes https://github.com/root-project/root/issues/11876. This change has also been discussed some time ago @cburgard, who originally contributed the code for these two classes to ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12632
https://github.com/root-project/root/pull/12632:995,usability,Close,Closes,995,"[RF] Remove RooMomentMorphND (keep only RooMomentMorphFuncND); The `RooMomentMorphND` and `RooMomentMorphFuncND` were almost exact. copies of each other. However, the `RooMomentMorphND` had a problem: it was not serializable. because some of its data member classes were missing `LinkDef` entries. This means we don't need to care about backwards compatibility and can. remove this class. A flag is added to the `RooMomentMorphFuncND` to. change its implementation to match the `RooMomentMorphND` exactly (and I. really do mean **exactly** here, I diffed the source code). Instructions are added to the README and the documentation for users to. migrate their code. By the way, there are probably not many users of. this class to begin with, because it was only added a few years ago and. has absolutely zero documentation. Furthermore, the `RooMomentMorphND::getVal()` function is changed to. `RooMomentMorphND::getValV()`, because this is the real virtual function. that should be overridden. Closes https://github.com/root-project/root/issues/11876. This change has also been discussed some time ago @cburgard, who originally contributed the code for these two classes to ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12632
https://github.com/root-project/root/pull/12633:108,deployability,updat,updated,108,Development; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12633
https://github.com/root-project/root/pull/12633:78,safety,test,tested,78,Development; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12633
https://github.com/root-project/root/pull/12633:108,safety,updat,updated,108,Development; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12633
https://github.com/root-project/root/pull/12633:108,security,updat,updated,108,Development; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12633
https://github.com/root-project/root/pull/12633:78,testability,test,tested,78,Development; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12633
https://github.com/root-project/root/pull/12634:62,deployability,Updat,Updates,62,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:20,energy efficiency,draw,draw,20,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:103,energy efficiency,draw,draw,103,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:151,energy efficiency,Draw,Draw,151,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:136,interoperability,coordinat,coordinates,136,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:62,safety,Updat,Updates,62,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:62,security,Updat,Updates,62,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:208,security,control,control,208,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:208,testability,control,control,208,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:30,usability,guid,guides,30,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/pull/12634:368,usability,user,user-images,368,REve: Add option to draw axis guides; # This Pull request:. * Updates RenderCore with functionality to draw text in world and projected coordinates. * Draw axis to with value of bounding box dimension. * Add control in REveView editor to enable axis guildes and change background. * Remove dat.gui. * Add rendering of REveBox and ReveBoxProjected. ![Untitled](https://user-images.githubusercontent.com/2516492/230965004-57511034-c77b-46f6-b0fc-71f4011a6ae7.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12634
https://github.com/root-project/root/issues/12635:1040,availability,avail,available,1040," you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1186,availability,avail,available,1186,"to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1603,availability,error,error,1603," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:78,deployability,Instal,Installing,78,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:206,deployability,instal,installed,206,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:260,deployability,instal,installation,260,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:394,deployability,version,version,394,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:483,deployability,version,version,483,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:542,deployability,version,version,542,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:599,deployability,modul,modules,599,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:991,deployability,loader,loader,991,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1321,deployability,API,API,1321," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1414,deployability,API,API,1414," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1659,deployability,instal,install,1659," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1762,deployability,modul,module,1762," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1849,deployability,modul,module,1849," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1945,deployability,modul,module,1945," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:2136,deployability,version,version,2136," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:2180,deployability,instal,install,2180," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:991,energy efficiency,load,loader,991,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:394,integrability,version,version,394,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:429,integrability,encapsulat,encapsulated,429,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:483,integrability,version,version,483,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:542,integrability,version,version,542,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:559,integrability,discover,discovered,559,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1321,integrability,API,API,1321," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1414,integrability,API,API,1414," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:2136,integrability,version,version,2136," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:288,interoperability,share,share,288,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:559,interoperability,discover,discovered,559,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1321,interoperability,API,API,1321," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1414,interoperability,API,API,1414," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1803,interoperability,share,share,1803," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:394,modifiability,version,version,394,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:429,modifiability,encapsul,encapsulated,429,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:483,modifiability,version,version,483,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:542,modifiability,version,version,542,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:599,modifiability,modul,modules,599,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:968,modifiability,pac,packages,968,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1078,modifiability,pac,packages,1078,"alling a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1267,modifiability,pac,packages,1267,"n. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1762,modifiability,modul,module,1762," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1849,modifiability,modul,module,1849," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1904,modifiability,pac,packages,1904," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1945,modifiability,modul,module,1945," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:2136,modifiability,version,version,2136," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:991,performance,load,loader,991,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1136,performance,perform,performance,1136,"ased ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --versio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1218,performance,perform,performance,1218,"thout this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1603,performance,error,error,1603," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:513,reliability,doe,does,513,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1040,reliability,availab,available,1040," you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1186,reliability,availab,available,1186,"to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:599,safety,modul,modules,599,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1040,safety,avail,available,1040," you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1186,safety,avail,available,1186,"to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1603,safety,error,error,1603," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1762,safety,modul,module,1762," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1849,safety,modul,module,1849," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1945,safety,modul,module,1945," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1040,security,availab,available,1040," you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1186,security,availab,available,1186,"to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1689,testability,Trace,Traceback,1689," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:6,usability,user,user-side,6,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:91,usability,user,user-side,91,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:152,usability,tool,tools,152,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:201,usability,user,user,201,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:559,usability,discov,discovered,559,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:686,usability,usab,usable,686,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:858,usability,help,help,858,"Cppyy user-side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1005,usability,User,UserWarning,1005,"side breaks ROOT; ### Explain what you would like to see improved. Installing a user-side cppyy (no virtualenv) breaks the python based ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1136,usability,perform,performance,1136,"ased ROOT tools. So, i would like to be possible to have a user installed cppyy without this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --versio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1218,usability,perform,performance,1218,"thout this having an impact on ROOT installation. ### Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1299,usability,User,UserWarning,1299," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1603,usability,error,error,1603," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:1669,usability,user,user,1669," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/issues/12635:2250,usability,user,user-side-breaks-root,2250," Optional: share how it could be improved. i was wondering if, given the special local only usage of a private/local version of cppyy, if this could be encapsulated somehow, so ROOT would use only it’s own version in such a way that is does not see any other cppyy version (even if discovered), and also the private cppyy modules are put in a place that would not be seen by anything outside ROOT as it’s not usable anyway:. ```. [Thursday 06.04.23 21:38 adrian@hal] ~ $. python3. Python 3.11.2 (main, Feb 8 2023, 00:00:00) [GCC 12.2.1 20221121 (Red Hat 12.2.1-4)] on linux. Type ""help"", ""copyright"", ""credits"" or ""license"" for more information. >>> import cppyy. /usr/lib64/python3.11/site-packages/cppyy_backend/loader.py:90: UserWarning: No precompiled header available (/usr/lib64/python3.11/site-packages/cppyy_backend/etc not writable); this may impact performance. warnings.warn('No precompiled header available (%s); this may impact performance.' % msg). /usr/lib64/python3.11/site-packages/cppyy/__init__.py:266: UserWarning: CPyCppyy API path not found (tried: /usr/include); set CPPYY_API_PATH to fix. warnings.warn(""CPyCppyy API path not found (tried: %s); set CPPYY_API_PATH to fix"" % os.path.dirname(cpycppyy_path)). ```. ### To Reproduce. ```. rootls. usage: rootls [-h] [-1] [-l] [-t] FILE [FILE ...]. rootls: error: the following arguments are required: FILE. pip3 install --user cppyy. rootls. Traceback (most recent call last):. File ""/usr/bin/rootls"", line 12, in <module>. import cmdLineUtils. File ""/usr/share/root/cli/cmdLineUtils.py"", line 81, in <module>. import ROOT. File ""/usr/lib64/python3.11/site-packages/ROOT/__init__.py"", line 25, in <module>. cppyy.gbl.gROOT.SetBatch(False). ^^^^^^^^^^^^^^^^^^^^^^^^. AttributeError: 'TROOT' object has no attribute 'SetBatch'. Did you mean: 'GetPath'? ```. ### Setup. 1. ```. root-config --version. 6.26/10. ```. 2. Fedora 37. 3. dnf install. 1st posted in root-forum: https://root-forum.cern.ch/t/cppyy-user-side-breaks-root/54393",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12635
https://github.com/root-project/root/pull/12636:342,deployability,updat,updated,342,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12636:143,integrability,intermediar,intermediary,143,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12636:143,modifiability,interm,intermediary,143,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12636:130,safety,avoid,avoid,130,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12636:312,safety,test,tested,312,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12636:342,safety,updat,updated,342,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12636:342,security,updat,updated,342,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12636:312,testability,test,tested,312,"DRAFT: [HS3][RF] More bugfixes; # This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects. - flag overloads correctly. - add a ""type"" field to dataset exports. - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12636
https://github.com/root-project/root/pull/12637:13,deployability,fail,failing,13,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:43,deployability,build,builds,43,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:75,deployability,fail,failing,75,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:98,deployability,build,builds,98,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:105,integrability,configur,configured,105,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:105,modifiability,configur,configured,105,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:171,performance,multi-thread,multi-threading,171,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:13,reliability,fail,failing,13,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:75,reliability,fail,failing,75,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:21,safety,test,tests,21,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:83,safety,test,tests,83,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:140,safety,test,tests,140,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:273,safety,test,tested,273,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:105,security,configur,configured,105,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:21,testability,test,tests,21,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:83,testability,test,tests,83,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:140,testability,test,tests,140,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:273,testability,test,tested,273,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12637:187,usability,support,support,187,[ntuple] Fix failing tests for `-Dimt=OFF` builds; This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12637
https://github.com/root-project/root/pull/12638:308,deployability,releas,release,308,"[RF] Override `TObject::Clone()` in RooWorkspace; Many users expect to use `Clone()` to copy RooWorkspaces, but so far this resulted in corrupt workspaces because the `Clone()` function was not overridden. This is an important fix that needs to be backported at least to 6.28 and 6.26, better yet every ROOT release used in production.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12638
https://github.com/root-project/root/pull/12638:55,usability,user,users,55,"[RF] Override `TObject::Clone()` in RooWorkspace; Many users expect to use `Clone()` to copy RooWorkspaces, but so far this resulted in corrupt workspaces because the `Clone()` function was not overridden. This is an important fix that needs to be backported at least to 6.28 and 6.26, better yet every ROOT release used in production.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12638
https://github.com/root-project/root/issues/12639:219,availability,error,errors,219,"[RF] Weighted Datasets for RooKeysPdf including negative weights; Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:. https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12639
https://github.com/root-project/root/issues/12639:491,deployability,fail,fails-in-,491,"[RF] Weighted Datasets for RooKeysPdf including negative weights; Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:. https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12639
https://github.com/root-project/root/issues/12639:219,performance,error,errors,219,"[RF] Weighted Datasets for RooKeysPdf including negative weights; Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:. https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12639
https://github.com/root-project/root/issues/12639:491,reliability,fail,fails-in-,491,"[RF] Weighted Datasets for RooKeysPdf including negative weights; Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:. https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12639
https://github.com/root-project/root/issues/12639:219,safety,error,errors,219,"[RF] Weighted Datasets for RooKeysPdf including negative weights; Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:. https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12639
https://github.com/root-project/root/issues/12639:376,safety,except,exceptions,376,"[RF] Weighted Datasets for RooKeysPdf including negative weights; Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:. https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12639
https://github.com/root-project/root/issues/12639:219,usability,error,errors,219,"[RF] Weighted Datasets for RooKeysPdf including negative weights; Up until now, weights were ignored when computing kernel width in RooKeysPdf. . This was worked on for 6.28, but negative weights are causing evaluation errors (some weights can go negative, like sWeights). . It would be good if negative weights were allowed and cases, where they are not allowed, would throw exceptions rather than computation be attempted. Relevant forum post:. https://root-forum.cern.ch/t/roofit-keyspdf-fails-in-6-28-works-in-6-26/54440",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12639
https://github.com/root-project/root/pull/12640:1,energy efficiency,core,core,1,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:337,modifiability,paramet,parameter,337,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:491,modifiability,paramet,parameter,491,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:576,reliability,doe,does,576,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:30,usability,ui,uid,30,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:105,usability,ui,uid,105,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:205,usability,UI,UID,205,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:325,usability,ui,uid,325,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:478,usability,ui,uid,478,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/pull/12640:606,usability,Close,Closes,606,"[core] Always assign correct `uid` output in TRefArray::GetObjectUID(); In `TRefArray::GetObjectUID(int &uid, TObjet *obj)`, there is a code. branch for the case of an empty TRefArray and an object with a UID. assigned. Is this case a new process ID corresponding to the object is. assigned to the `TRefArray`. However, the `uid` output parameter is not. correctly assigned in this code branch, which is fixed in this commit. The consequence of this bug is that the, since the `uid` output. parameter is not correctly assigned, that the implementation of. `TRefArray::Add*()` does not correctly work then. Closes https://github.com/root-project/root/issues/12329.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12640
https://github.com/root-project/root/issues/12644:745,availability,error,error,745,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1270,availability,error,error,1270,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1409,availability,error,error,1409,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1519,availability,Error,Error,1519,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1526,availability,Error,Error,1526,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1608,availability,Error,Error,1608,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1664,availability,Error,Error,1664,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:24,deployability,build,build,24,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:30,deployability,modul,module,30,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:74,deployability,build,building,74,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:773,deployability,Build,Building,773,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:868,deployability,Build,Building,868,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:977,deployability,Build,Building,977,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1072,deployability,build,building,1072,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1081,deployability,modul,module,1081,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1103,deployability,build,building,1103,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1112,deployability,modul,module,1112,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1213,deployability,modul,module-includes,1213,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1426,deployability,build,build,1426,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1432,deployability,modul,module,1432,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:693,energy efficiency,cpu,cpu,693,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:793,energy efficiency,core,core,793,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:888,energy efficiency,core,core,888,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:997,energy efficiency,core,core,997,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1089,energy efficiency,Core,Core,1089,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1532,energy efficiency,load,loading,1532,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1590,energy efficiency,core,core,1590,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1631,energy efficiency,core,core,1631,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:665,interoperability,share,shared,665,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:736,interoperability,XML,XML,736,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:30,modifiability,modul,module,30,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1081,modifiability,modul,module,1081,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1112,modifiability,modul,module,1112,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1213,modifiability,modul,module-includes,1213,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1432,modifiability,modul,module,1432,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:693,performance,cpu,cpu,693,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:745,performance,error,error,745,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1270,performance,error,error,1270,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1409,performance,error,error,1409,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1519,performance,Error,Error,1519,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1526,performance,Error,Error,1526,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1532,performance,load,loading,1532,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1608,performance,Error,Error,1608,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1664,performance,Error,Error,1664,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:30,safety,modul,module,30,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:499,safety,except,exceptions,499,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:745,safety,error,error,745,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1081,safety,modul,module,1081,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1112,safety,modul,module,1112,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1213,safety,modul,module-includes,1213,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1270,safety,error,error,1270,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1409,safety,error,error,1409,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1432,safety,modul,module,1432,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1519,safety,Error,Error,1519,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1526,safety,Error,Error,1526,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1608,safety,Error,Error,1608,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1664,safety,Error,Error,1664,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:679,security,ssl,ssl,679,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:147,usability,support,support,147,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:745,usability,error,error,745,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1270,usability,error,error,1270,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1409,usability,error,error,1409,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1519,usability,Error,Error,1519,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1526,usability,Error,Error,1526,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1608,usability,Error,Error,1608,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12644:1664,usability,Error,Error,1664,"Can't find cxxabi.h and build module 'ROOT_Foundation_Stage1_NoRTTI' when building from source on Macos; Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o. While building module 'Core':. While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:. In file included from <module-includes>:4:. ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found. #include <cxxabi.h>. ^~~~~~~~~~. In file included from input_line_3:2:. ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'. #include ""TIsAProxy.h"". ~~~~~~~~^~~~~~~~~~~~~. Error: Error loading the default rootcling header files. make[2]: *** [core/G__Core.cxx] Error 1. make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2. make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12644
https://github.com/root-project/root/issues/12645:1884,availability,slo,slow,1884,"RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3353,availability,Operat,Operating,3353," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3428,availability,down,download,3428," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:28,deployability,integr,integrals,28,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:689,deployability,integr,integrals,689,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:800,deployability,integr,integrals,800,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:822,deployability,integr,integrals,822,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:856,deployability,integr,integrals,856,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:941,deployability,integr,integrals,941,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1069,deployability,integr,integrals,1069," - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1169,deployability,integr,integral,1169,"oot/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1211,deployability,integr,integral,1211,"ps://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1271,deployability,integr,integral,1271," existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigger",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1427,deployability,integr,integrals,1427,">. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1473,deployability,integr,integrals,1473,"cise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1568,deployability,integr,integral,1568,"ed to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1689,deployability,integr,integrals,1689,"rals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1774,deployability,integr,integrals,1774," will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1806,deployability,integr,integral,1806,"as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2047,deployability,integr,integrals,2047,"o elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2123,deployability,integr,integrals,2123,"he new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2181,deployability,integr,integrals,2181," fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2430,deployability,build,build,2430,"als) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary downl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2584,deployability,log,logs,2584,"em to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the probl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2610,deployability,integr,integrals,2610," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2709,deployability,Integr,Integration,2709," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3341,deployability,version,version,3341," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3410,deployability,instal,install,3410," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:28,integrability,integr,integrals,28,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:689,integrability,integr,integrals,689,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:800,integrability,integr,integrals,800,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:822,integrability,integr,integrals,822,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:856,integrability,integr,integrals,856,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:941,integrability,integr,integrals,941,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1069,integrability,integr,integrals,1069," - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1169,integrability,integr,integral,1169,"oot/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1211,integrability,integr,integral,1211,"ps://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1271,integrability,integr,integral,1271," existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigger",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1427,integrability,integr,integrals,1427,">. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1473,integrability,integr,integrals,1473,"cise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1568,integrability,integr,integral,1568,"ed to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1689,integrability,integr,integrals,1689,"rals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1774,integrability,integr,integrals,1774," will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1806,integrability,integr,integral,1806,"as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1848,integrability,event,event,1848,"norm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '',",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2047,integrability,integr,integrals,2047,"o elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2123,integrability,integr,integrals,2123,"he new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2181,integrability,integr,integrals,2181," fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2610,integrability,integr,integrals,2610," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2689,integrability,Topic,Topic,2689," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2709,integrability,Integr,Integration,2709," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3341,integrability,version,version,3341," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:28,interoperability,integr,integrals,28,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:689,interoperability,integr,integrals,689,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:800,interoperability,integr,integrals,800,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:822,interoperability,integr,integrals,822,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:856,interoperability,integr,integrals,856,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:941,interoperability,integr,integrals,941,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1069,interoperability,integr,integrals,1069," - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1169,interoperability,integr,integral,1169,"oot/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1211,interoperability,integr,integral,1211,"ps://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1271,interoperability,integr,integral,1271," existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigger",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1427,interoperability,integr,integrals,1427,">. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1473,interoperability,integr,integrals,1473,"cise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1568,interoperability,integr,integral,1568,"ed to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1689,interoperability,integr,integrals,1689,"rals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1774,interoperability,integr,integrals,1774," will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1806,interoperability,integr,integral,1806,"as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2047,interoperability,integr,integrals,2047,"o elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2123,interoperability,integr,integrals,2123,"he new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2181,interoperability,integr,integrals,2181," fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2610,interoperability,integr,integrals,2610," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2709,interoperability,Integr,Integration,2709," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:28,modifiability,integr,integrals,28,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:689,modifiability,integr,integrals,689,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:800,modifiability,integr,integrals,800,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:822,modifiability,integr,integrals,822,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:856,modifiability,integr,integrals,856,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:941,modifiability,integr,integrals,941,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1069,modifiability,integr,integrals,1069," - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1169,modifiability,integr,integral,1169,"oot/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1211,modifiability,integr,integral,1211,"ps://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1271,modifiability,integr,integral,1271," existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigger",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1427,modifiability,integr,integrals,1427,">. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1473,modifiability,integr,integrals,1473,"cise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1568,modifiability,integr,integral,1568,"ed to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1689,modifiability,integr,integrals,1689,"rals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1774,modifiability,integr,integrals,1774," will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1806,modifiability,integr,integral,1806,"as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2047,modifiability,integr,integrals,2047,"o elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2123,modifiability,integr,integrals,2123,"he new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2181,modifiability,integr,integrals,2181," fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2610,modifiability,integr,integrals,2610," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2709,modifiability,Integr,Integration,2709," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3341,modifiability,version,version,3341," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1552,performance,perform,performed,1552,"ficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:28,reliability,integr,integrals,28,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:689,reliability,integr,integrals,689,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:800,reliability,integr,integrals,800,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:822,reliability,integr,integrals,822,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:856,reliability,integr,integrals,856,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:941,reliability,integr,integrals,941,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1069,reliability,integr,integrals,1069," - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1169,reliability,integr,integral,1169,"oot/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1211,reliability,integr,integral,1211,"ps://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1271,reliability,integr,integral,1271," existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigger",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1427,reliability,integr,integrals,1427,">. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1473,reliability,integr,integrals,1473,"cise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1568,reliability,integr,integral,1568,"ed to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1689,reliability,integr,integrals,1689,"rals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1774,reliability,integr,integrals,1774," will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1806,reliability,integr,integral,1806,"as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1884,reliability,slo,slow,1884,"RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1897,reliability,pra,practice,1897,"e changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2047,reliability,integr,integrals,2047,"o elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2110,reliability,doe,does,2110,"ll range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2123,reliability,integr,integrals,2123,"he new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2181,reliability,integr,integrals,2181," fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2610,reliability,integr,integrals,2610," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2709,reliability,Integr,Integration,2709," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1412,safety,avoid,avoid,1412,"day's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1545,safety,test,test,1545,", the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1790,safety,compl,complex,1790,"these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2384,safety,input,input,2384,"olution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2584,safety,log,logs,2584,"em to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the probl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:28,security,integr,integrals,28,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:689,security,integr,integrals,689,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:800,security,integr,integrals,800,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:822,security,integr,integrals,822,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:856,security,integr,integrals,856,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:941,security,integr,integrals,941,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1069,security,integr,integrals,1069," - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1169,security,integr,integral,1169,"oot/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1211,security,integr,integral,1211,"ps://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1271,security,integr,integral,1271," existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigger",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1427,security,integr,integrals,1427,">. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1473,security,integr,integrals,1473,"cise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1568,security,integr,integral,1568,"ed to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1689,security,integr,integrals,1689,"rals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1774,security,integr,integrals,1774," will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1790,security,compl,complex,1790,"these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, Ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1806,security,integr,integral,1806,"as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2047,security,integr,integrals,2047,"o elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2123,security,integr,integrals,2123,"he new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2181,security,integr,integrals,2181," fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2584,security,log,logs,2584,"em to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the probl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2610,security,integr,integrals,2610," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2709,security,Integr,Integration,2709," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:28,testability,integr,integrals,28,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:689,testability,integr,integrals,689,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:800,testability,integr,integrals,800,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:822,testability,integr,integrals,822,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:856,testability,integr,integrals,856,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:941,testability,integr,integrals,941,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1069,testability,integr,integrals,1069," - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1169,testability,integr,integral,1169,"oot/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1211,testability,integr,integral,1211,"ps://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1271,testability,integr,integral,1271," existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigger",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1427,testability,integr,integrals,1427,">. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1473,testability,integr,integrals,1473,"cise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Pyt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1545,testability,test,test,1545,", the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1568,testability,integr,integral,1568,"ed to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1689,testability,integr,integrals,1689,"rals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1774,testability,integr,integrals,1774," will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1806,testability,integr,integral,1806,"as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2047,testability,integr,integrals,2047,"o elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2123,testability,integr,integrals,2123,"he new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2181,testability,integr,integrals,2181," fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2540,testability,simpl,simple,2540,"e test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2584,testability,log,logs,2584,"em to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the probl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2610,testability,integr,integrals,2610," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2709,testability,Integr,Integration,2709," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3534,testability,context,context,3534," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:3563,testability,context,context,3563," fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:465,usability,clear,clear,465,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:513,usability,behavi,behavior,513,"[RF] Unneeded normalization integrals when fitting a RooAddPdf in a range; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1552,usability,perform,performed,1552,"ficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals. In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1953,usability,behavi,behavior,1953,"ith the old method would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:1971,usability,clear,clear,1971,"d would not be evaluated. In particular:. - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range. - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2239,usability,behavi,behavior,2239,"ge. This is separate to the integral with no range, which is also done. - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2384,usability,input,input,2384,"olution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12645:2540,usability,simpl,simple,2540,"e test I performed these integral do not seem to affect fit results, which are the same before and after 6.28. Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. from ROOT.RooFit import RooConst. # in this simple example the symptoms are only in the logs, in the names of the integrals evaluated. ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO, Topic = ROOT.RooFit.Integration). x = ROOT.RooRealVar('x', '', 0, 1). g = ROOT.RooGaussian('g', '', x, RooConst(0.5), RooConst(0.2)). u = ROOT.RooUniform('u', '', x). f = ROOT.RooRealVar('f', '', 0.5, 0, 1). a = ROOT.RooAddPdf('a', '', [g, u], [f]). dt = a.generate({x}, NumEvents = 1000). x.setRange('limited', 0.2, 0.8). x.setRange('full', 0, 1). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fitTo(dt, Range = 'limited', PrintLevel = -1). a.fixAddCoefRange('full'). a.fitTo(dt, Range = 'full', PrintLevel = -1). a.fixAddCoefRange('limited'). a.fitTo(dt, Range = 'limited', PrintLevel = -1). ```. Compare 6.26 with master. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26 from LCG 102b. ROOT master from LCG dev3. ### Additional context. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12645
https://github.com/root-project/root/issues/12646:952,availability,slo,slow,952,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2503,availability,Operat,Operating,2503,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2578,availability,down,download,2578,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:46,deployability,integr,integrals,46,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:578,deployability,integr,integrals,578,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:660,deployability,integr,integrate,660,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:759,deployability,integr,integral,759,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:798,deployability,integr,integral,798,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:856,deployability,integr,integration,856,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:898,deployability,integr,integrate,898,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1087,deployability,integr,integration,1087,"Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1372,deployability,build,build,1372,"sue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1688,deployability,integr,integrate,1688," variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1949,deployability,integr,integral,1949,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1988,deployability,integr,integral,1988,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2045,deployability,integr,integral,2045,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2119,deployability,integr,integrals,2119,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2158,deployability,integr,integrals,2158,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2176,deployability,integr,integral,2176,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2251,deployability,integr,integral,2251,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2288,deployability,integr,integral,2288,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2365,deployability,integr,integral,2365,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2491,deployability,version,version,2491,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2560,deployability,instal,install,2560,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:46,integrability,integr,integrals,46,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:578,integrability,integr,integrals,578,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:660,integrability,integr,integrate,660,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:759,integrability,integr,integral,759,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:798,integrability,integr,integral,798,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:856,integrability,integr,integration,856,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:898,integrability,integr,integrate,898,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1087,integrability,integr,integration,1087,"Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1688,integrability,integr,integrate,1688," variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1949,integrability,integr,integral,1949,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1988,integrability,integr,integral,1988,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2045,integrability,integr,integral,2045,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2119,integrability,integr,integrals,2119,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2158,integrability,integr,integrals,2158,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2176,integrability,integr,integral,2176,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2251,integrability,integr,integral,2251,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2288,integrability,integr,integral,2288,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2365,integrability,integr,integral,2365,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2491,integrability,version,version,2491,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:46,interoperability,integr,integrals,46,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:578,interoperability,integr,integrals,578,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:660,interoperability,integr,integrate,660,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:759,interoperability,integr,integral,759,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:798,interoperability,integr,integral,798,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:856,interoperability,integr,integration,856,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:898,interoperability,integr,integrate,898,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1087,interoperability,integr,integration,1087,"Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1688,interoperability,integr,integrate,1688," variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1949,interoperability,integr,integral,1949,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1988,interoperability,integr,integral,1988,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2045,interoperability,integr,integral,2045,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2119,interoperability,integr,integrals,2119,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2158,interoperability,integr,integrals,2158,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2176,interoperability,integr,integral,2176,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2251,interoperability,integr,integral,2251,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2288,interoperability,integr,integral,2288,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2365,interoperability,integr,integral,2365,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:46,modifiability,integr,integrals,46,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:578,modifiability,integr,integrals,578,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:660,modifiability,integr,integrate,660,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:694,modifiability,variab,variable,694,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:759,modifiability,integr,integral,759,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:798,modifiability,integr,integral,798,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:856,modifiability,integr,integration,856,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:868,modifiability,variab,variable,868,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:898,modifiability,integr,integrate,898,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1087,modifiability,integr,integration,1087,"Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1688,modifiability,integr,integrate,1688," variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1949,modifiability,integr,integral,1949,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1988,modifiability,integr,integral,1988,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2045,modifiability,integr,integral,2045,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2119,modifiability,integr,integrals,2119,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2158,modifiability,integr,integrals,2158,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2176,modifiability,integr,integral,2176,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2251,modifiability,integr,integral,2251,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2288,modifiability,integr,integral,2288,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2365,modifiability,integr,integral,2365,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2491,modifiability,version,version,2491,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:46,reliability,integr,integrals,46,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:578,reliability,integr,integrals,578,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:660,reliability,integr,integrate,660,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:759,reliability,integr,integral,759,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:798,reliability,integr,integral,798,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:807,reliability,doe,does,807,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:856,reliability,integr,integration,856,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:898,reliability,integr,integrate,898,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:952,reliability,slo,slow,952,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1087,reliability,integr,integration,1087,"Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1688,reliability,integr,integrate,1688," variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1949,reliability,integr,integral,1949,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1988,reliability,integr,integral,1988,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2045,reliability,integr,integral,2045,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2119,reliability,integr,integrals,2119,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2158,reliability,integr,integrals,2158,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2176,reliability,integr,integral,2176,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2251,reliability,integr,integral,2251,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2288,reliability,integr,integral,2288,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2365,reliability,integr,integral,2365,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1326,safety,input,input,1326,"o add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:46,security,integr,integrals,46,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:578,security,integr,integrals,578,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:660,security,integr,integrate,660,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:759,security,integr,integral,759,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:798,security,integr,integral,798,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:856,security,integr,integration,856,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:898,security,integr,integrate,898,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1087,security,integr,integration,1087,"Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1688,security,integr,integrate,1688," variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1949,security,integr,integral,1949,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1988,security,integr,integral,1988,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2045,security,integr,integral,2045,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2119,security,integr,integrals,2119,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2158,security,integr,integrals,2158,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2176,security,integr,integral,2176,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2251,security,integr,integral,2251,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2288,security,integr,integral,2288,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2365,security,integr,integral,2365,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:46,testability,integr,integrals,46,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:578,testability,integr,integrals,578,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:660,testability,integr,integrate,660,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:759,testability,integr,integral,759,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:798,testability,integr,integral,798,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:856,testability,integr,integration,856,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:898,testability,integr,integrate,898,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1087,testability,integr,integration,1087,"Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1688,testability,integr,integrate,1688," variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other conte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1949,testability,integr,integral,1949,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1988,testability,integr,integral,1988,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2045,testability,integr,integral,2045,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2119,testability,integr,integrals,2119,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2158,testability,integr,integrals,2158,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2176,testability,integr,integral,2176,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2251,testability,integr,integral,2251,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2288,testability,integr,integral,2288,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2365,testability,integr,integral,2365,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2659,testability,context,context,2659,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2688,testability,context,context,2688,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:447,usability,clear,clear,447,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:495,usability,behavi,behavior,495,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:971,usability,behavi,behavior,971,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:989,usability,clear,clear,989,"[RF] RooLinearVar not used in plot projection integrals; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1181,usability,behavi,behavior,1181,"D [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:1326,usability,input,input,1326,"o add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/issues/12646:2106,usability,support,supported,2106,"obian to correct the result. If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1). y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)). y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both. # still, the issue is visible regardless. D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame. dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works). # but not in the y projection. # if the pdf supported 2D integrals, there would be no numerical integrals at all. integral = D2.createIntegral({y}, NormSet = {x,y}). print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above). # numerical integral in the y projection (unwanted). frame = x.frame(). dt.plotOn(frame). D2.plotOn(frame). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12646
https://github.com/root-project/root/pull/12647:217,deployability,updat,updated,217,[RF] Use aliasName to lookup existing objects on RooWorkspace import; # This Pull request:. ## Changes or fixes:. use aliasName to lookup existing objects on import. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12647
https://github.com/root-project/root/pull/12647:187,safety,test,tested,187,[RF] Use aliasName to lookup existing objects on RooWorkspace import; # This Pull request:. ## Changes or fixes:. use aliasName to lookup existing objects on import. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12647
https://github.com/root-project/root/pull/12647:217,safety,updat,updated,217,[RF] Use aliasName to lookup existing objects on RooWorkspace import; # This Pull request:. ## Changes or fixes:. use aliasName to lookup existing objects on import. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12647
https://github.com/root-project/root/pull/12647:217,security,updat,updated,217,[RF] Use aliasName to lookup existing objects on RooWorkspace import; # This Pull request:. ## Changes or fixes:. use aliasName to lookup existing objects on import. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12647
https://github.com/root-project/root/pull/12647:187,testability,test,tested,187,[RF] Use aliasName to lookup existing objects on RooWorkspace import; # This Pull request:. ## Changes or fixes:. use aliasName to lookup existing objects on import. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12647
https://github.com/root-project/root/issues/12649:54,availability,cluster,clusters,54,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:309,availability,cluster,cluster,309,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:376,availability,cluster,cluster,376,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:421,availability,cluster,clusters,421,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:11,deployability,scale,scale,11,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:54,deployability,cluster,clusters,54,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:212,deployability,version,versions-in-speed-,212,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:309,deployability,cluster,cluster,309,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:376,deployability,cluster,cluster,376,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:421,deployability,cluster,clusters,421,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:449,deployability,scale,scale,449,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:11,energy efficiency,scale,scale,11,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:449,energy efficiency,scale,scale,449,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:161,integrability,discover,discovered-big-difference-between-old-and-new-root-versions-in-speed-,161,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:161,interoperability,discover,discovered-big-difference-between-old-and-new-root-versions-in-speed-,161,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:11,modifiability,scal,scale,11,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:212,modifiability,version,versions-in-speed-,212,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:449,modifiability,scal,scale,449,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:11,performance,scale,scale,11,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:252,performance,time,time,252,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:449,performance,scale,scale,449,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:525,performance,time,time,525,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/issues/12649:110,usability,interact,interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-,110,"TTreeCache scale (very) poorly with number of baskets/clusters.; As described in https://root-forum.cern.ch/t/interactively-working-with-large-ntuple-tree-files-discovered-big-difference-between-old-and-new-root-versions-in-speed-7s-vs-1-hour-response-time/54312, when a file/`TTree` is created such that the cluster is actually pretty small (in bytes) and thus the number of cluster in the file is very larges (100,000+ clusters), the `TTreeCache` scale poorly (since v6.14/00). In particular in the described case, the run-time increase from a few second (7s) to more than one hour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12649
https://github.com/root-project/root/pull/12650:42,availability,cluster,clusters,42,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:139,availability,cluster,clusters,139,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:341,availability,cluster,clusters,341,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:365,availability,cluster,cluster,365,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:487,availability,repair,repairs,487,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:574,availability,down,down,574,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:42,deployability,cluster,clusters,42,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:139,deployability,cluster,clusters,139,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:341,deployability,cluster,clusters,341,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:365,deployability,cluster,cluster,365,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:212,energy efficiency,estimat,estimated,212,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:531,energy efficiency,Draw,Draw,531,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:175,integrability,buffer,buffer,175,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:222,integrability,buffer,buffer,222,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:270,integrability,buffer,buffer,270,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:388,integrability,buffer,buffer,388,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:15,modifiability,Scal,Scaling,15,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:253,performance,time,times,253,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:499,performance,perform,performance,499,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:586,performance,perform,performance,586,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:655,performance,perform,performance,655,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:487,reliability,repair,repairs,487,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
